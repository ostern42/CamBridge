===== src\CamBridge.Config\ViewModels\LogViewerViewModel.cs =====
// src/CamBridge.Config/ViewModels/LogViewerViewModel.cs
// Version: 0.8.16
// Description: SLIM log viewer ViewModel - only UI logic!
// Copyright: (C) 2025 Claude's Improbably Reliable Software Solutions

using CamBridge.Config.Models;
using CamBridge.Config.Services;
using CamBridge.Config.Services.Interfaces;
using CamBridge.Core;
using CamBridge.Core.Infrastructure;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Microsoft.Extensions.Logging;
using Microsoft.Win32;
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;

namespace CamBridge.Config.ViewModels
{
    /// <summary>
    /// SLIM ViewModel for log viewer - delegates all logic to services
    /// </summary>
    public partial class LogViewerViewModel : ViewModelBase
    {
        private readonly ILogger<LogViewerViewModel> _logger;
        private readonly IConfigurationService _configurationService;
        private readonly ILogFileService _logFileService;
        private readonly ILogParsingService _logParsingService;
        private readonly ILogFilterService _logFilterService;
        private readonly ILogTreeBuilder _logTreeBuilder;
        private readonly Timer _refreshTimer;

        private const int RefreshIntervalMs = 1000;

        public LogViewerViewModel(
            ILogger<LogViewerViewModel> logger,
            IConfigurationService configurationService,
            ILogFileService logFileService,
            ILogParsingService logParsingService,
            ILogFilterService logFilterService,
            ILogTreeBuilder logTreeBuilder)
        {
            _logger = logger;
            _configurationService = configurationService;
            _logFileService = logFileService;
            _logParsingService = logParsingService;
            _logFilterService = logFilterService;
            _logTreeBuilder = logTreeBuilder;

            // Initialize collections
            FilteredCombinedEntries = new ObservableCollection<LogEntry>();
            CombinedLogEntries = new ObservableCollection<LogEntry>();
            CorrelationGroups = new ObservableCollection<CorrelationGroup>();
            PipelineSelections = new ObservableCollection<PipelineSelection>();

            // Initialize commands
            RefreshCommand = new AsyncRelayCommand(RefreshLogsAsync);
            ClearLogCommand = new RelayCommand(() => { CombinedLogEntries.Clear(); ApplyFilters(); });
            ExportLogCommand = new AsyncRelayCommand(ExportLogsAsync);
            OpenLogFolderCommand = new RelayCommand(OpenLogFolder);
            ClearFiltersCommand = new RelayCommand(() => { SearchText = Filter1 = Filter2 = Filter3 = ""; });
            CopyLineCommand = new RelayCommand<LogEntry>(CopyLine);
            CopyGroupCommand = new RelayCommand<CorrelationGroup>(CopyGroup);

            // Timer for auto-refresh
            _refreshTimer = new Timer(_ => { if (IsAutoScrollEnabled) _ = RefreshLogsAsync(); },
                                    null, Timeout.Infinite, Timeout.Infinite);

            // Set defaults
            ShowInformation = ShowWarning = ShowError = ShowCritical = true;
            IsTreeViewEnabled = true;
        }

        #region Properties

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(DisplayedLineCount))]
        private ObservableCollection<LogEntry> filteredCombinedEntries;

        [ObservableProperty]
        private ObservableCollection<LogEntry> combinedLogEntries;

        [ObservableProperty]
        private ObservableCollection<CorrelationGroup> correlationGroups;

        [ObservableProperty]
        private ObservableCollection<PipelineSelection> pipelineSelections;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FilteredCombinedEntries))]
        [NotifyPropertyChangedFor(nameof(CorrelationGroups))]
        private string? searchText;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FilteredCombinedEntries))]
        [NotifyPropertyChangedFor(nameof(CorrelationGroups))]
        private string filter1 = string.Empty;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FilteredCombinedEntries))]
        [NotifyPropertyChangedFor(nameof(CorrelationGroups))]
        private string filter2 = string.Empty;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FilteredCombinedEntries))]
        [NotifyPropertyChangedFor(nameof(CorrelationGroups))]
        private string filter3 = string.Empty;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FilteredCombinedEntries))]
        [NotifyPropertyChangedFor(nameof(CorrelationGroups))]
        private bool showDebug;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FilteredCombinedEntries))]
        [NotifyPropertyChangedFor(nameof(CorrelationGroups))]
        private bool showInformation;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FilteredCombinedEntries))]
        [NotifyPropertyChangedFor(nameof(CorrelationGroups))]
        private bool showWarning;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FilteredCombinedEntries))]
        [NotifyPropertyChangedFor(nameof(CorrelationGroups))]
        private bool showError;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FilteredCombinedEntries))]
        [NotifyPropertyChangedFor(nameof(CorrelationGroups))]
        private bool showCritical;

        [ObservableProperty]
        private bool isAutoScrollEnabled;

        [ObservableProperty]
        private bool isTreeViewEnabled;

        [ObservableProperty]
        private bool isLoading;

        [ObservableProperty]
        private string currentLogFiles = "No files selected";

        [ObservableProperty]
        private int totalLineCount;

        public int DisplayedLineCount => IsTreeViewEnabled
            ? CorrelationGroups?.Sum(g => g.TotalEntries) ?? 0
            : FilteredCombinedEntries?.Count ?? 0;

        public int SelectedPipelineCount => PipelineSelections?.Count(p => p.IsSelected) ?? 0;

        #endregion

        #region Commands

        public IAsyncRelayCommand RefreshCommand { get; }
        public IRelayCommand ClearLogCommand { get; }
        public IAsyncRelayCommand ExportLogCommand { get; }
        public IRelayCommand OpenLogFolderCommand { get; }
        public IRelayCommand ClearFiltersCommand { get; }
        public IRelayCommand<LogEntry> CopyLineCommand { get; }
        public IRelayCommand<CorrelationGroup> CopyGroupCommand { get; }

        #endregion

        #region Public Methods

        public async Task InitializeAsync()
        {
            try
            {
                await LoadPipelinesAsync();
                await RefreshLogsAsync();

                if (IsAutoScrollEnabled)
                    _refreshTimer.Change(RefreshIntervalMs, RefreshIntervalMs);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to initialize");
            }
        }

        public void Cleanup()
        {
            _refreshTimer?.Dispose();
            _logFileService.StopWatching();
            foreach (var sel in PipelineSelections)
                sel.PropertyChanged -= OnPipelineSelectionChanged;
        }

        #endregion

        #region Private Methods

        private async Task LoadPipelinesAsync()
        {
            PipelineSelections.Clear();

            // Add service log
            PipelineSelections.Add(new PipelineSelection
            {
                Name = "Service (Global)",
                SanitizedName = "service",
                IsSelected = true
            });

            // Add configured pipelines
            var settings = await _configurationService.LoadConfigurationAsync<CamBridgeSettingsV2>();
            if (settings?.Pipelines != null)
            {
                var isFirst = true;
                foreach (var p in settings.Pipelines)
                {
                    PipelineSelections.Add(new PipelineSelection
                    {
                        Name = p.Name,
                        SanitizedName = _logFileService.GetLogFileName(p.Name),
                        IsSelected = isFirst
                    });
                    isFirst = false;
                }
            }

            // Add archived logs
            var archived = await _logFileService.GetAvailableLogFilesAsync();
            foreach (var kvp in archived.Where(a => !PipelineSelections.Any(p => p.Name == a.Key)))
            {
                PipelineSelections.Add(new PipelineSelection
                {
                    Name = kvp.Key,
                    SanitizedName = kvp.Value,
                    IsSelected = false
                });
            }

            // Subscribe to changes
            foreach (var sel in PipelineSelections)
                sel.PropertyChanged += OnPipelineSelectionChanged;
        }

        private async Task RefreshLogsAsync()
        {
            try
            {
                IsLoading = true;
                var selected = PipelineSelections.Where(p => p.IsSelected).ToList();
                if (!selected.Any()) return;

                CurrentLogFiles = selected.Count == 1 ? selected[0].Name : $"{selected.Count} pipelines";

                // Collect entries
                var allEntries = new List<LogEntry>();
                foreach (var pipeline in selected)
                {
                    var path = Path.Combine(ConfigurationPaths.GetLogsDirectory(),
                                          _logFileService.GetLogFileName(pipeline.Name));
                    if (File.Exists(path))
                    {
                        var entries = await _logFileService.ReadLogFileAsync(path, pipeline.Name);
                        allEntries.AddRange(entries);
                    }
                }

                // Update UI
                await Application.Current.Dispatcher.InvokeAsync(() =>
                {
                    CombinedLogEntries.Clear();
                    foreach (var e in allEntries.OrderBy(x => x.Timestamp).TakeLast(10000))
                        CombinedLogEntries.Add(e);
                });

                TotalLineCount = CombinedLogEntries.Count;
                ApplyFilters();
            }
            finally { IsLoading = false; }
        }

        private void ApplyFilters()
        {
            var criteria = new LogFilterCriteria
            {
                ShowDebug = ShowDebug,
                ShowInformation = ShowInformation,
                ShowWarning = ShowWarning,
                ShowError = ShowError,
                ShowCritical = ShowCritical,
                SearchText = SearchText,
                Filter1 = Filter1,
                Filter2 = Filter2,
                Filter3 = Filter3
            };

            var filtered = _logFilterService.ApplyFilters(CombinedLogEntries, criteria);

            FilteredCombinedEntries.Clear();
            foreach (var e in filtered)
                FilteredCombinedEntries.Add(e);

            if (IsTreeViewEnabled)
            {
                var groups = _logTreeBuilder.BuildCorrelationGroups(filtered,
                    !string.IsNullOrEmpty(Filter1 + Filter2 + Filter3),
                    Filter1, Filter2, Filter3);

                CorrelationGroups.Clear();
                foreach (var g in groups)
                    CorrelationGroups.Add(g);
            }
        }

        private async Task ExportLogsAsync()
        {
            var dialog = new SaveFileDialog
            {
                Filter = "Log files (*.log)|*.log",
                FileName = $"Export_{DateTime.Now:yyyyMMdd_HHmmss}.log"
            };

            if (dialog.ShowDialog() == true)
            {
                var sb = new StringBuilder();
                if (IsTreeViewEnabled)
                {
                    foreach (var g in CorrelationGroups)
                    {
                        sb.AppendLine($"=== {g.CorrelationId} [{g.DurationText}] ===");
                        foreach (var e in g.AllEntries)
                            sb.AppendLine($"  {e.Timestamp:HH:mm:ss.fff} {e.Message}");
                    }
                }
                else
                {
                    foreach (var e in FilteredCombinedEntries)
                        sb.AppendLine(e.RawLine ?? $"{e.Timestamp:HH:mm:ss.fff} {e.Message}");
                }
                await File.WriteAllTextAsync(dialog.FileName, sb.ToString());
            }
        }

        private void OpenLogFolder()
        {
            Process.Start(new ProcessStartInfo
            {
                FileName = ConfigurationPaths.GetLogsDirectory(),
                UseShellExecute = true,
                Verb = "open"
            });
        }

        private void CopyLine(LogEntry? entry)
        {
            if (entry != null)
                Clipboard.SetText($"{entry.Timestamp:HH:mm:ss.fff} [{entry.CorrelationId}] {entry.Message}");
        }

        private void CopyGroup(CorrelationGroup? group)
        {
            if (group != null)
            {
                var sb = new StringBuilder();
                sb.AppendLine($"=== {group.CorrelationId} [{group.DurationText}] ===");
                foreach (var e in group.AllEntries)
                    sb.AppendLine($"{e.Timestamp:HH:mm:ss.fff} {e.Message}");
                Clipboard.SetText(sb.ToString());
            }
        }

        private void OnPipelineSelectionChanged(object? sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(PipelineSelection.IsSelected))
            {
                OnPropertyChanged(nameof(SelectedPipelineCount));
                _ = RefreshLogsAsync();
            }
        }

        #endregion

        #region Property Change Handlers

        partial void OnSearchTextChanged(string? value) => ApplyFilters();
        partial void OnShowDebugChanged(bool value) => ApplyFilters();
        partial void OnShowInformationChanged(bool value) => ApplyFilters();
        partial void OnShowWarningChanged(bool value) => ApplyFilters();
        partial void OnShowErrorChanged(bool value) => ApplyFilters();
        partial void OnShowCriticalChanged(bool value) => ApplyFilters();
        partial void OnIsTreeViewEnabledChanged(bool value) => ApplyFilters();
        partial void OnFilter1Changed(string value) => ApplyFilters();
        partial void OnFilter2Changed(string value) => ApplyFilters();
        partial void OnFilter3Changed(string value) => ApplyFilters();

        #endregion
    }
}

===== src\CamBridge.Config\Models\ILogServices.cs =====
// src/CamBridge.Config/Services/Interfaces/ILogServices.cs
// Version: 0.8.16
// Description: Service interfaces for log viewer functionality
// Copyright: (C) 2025 Claude's Improbably Reliable Software Solutions

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using CamBridge.Config.Models;
using CamBridge.Core.Enums;
using Microsoft.Extensions.Logging;

namespace CamBridge.Config.Services.Interfaces
{
    /// <summary>
    /// Service for file operations and monitoring
    /// </summary>
    public interface ILogFileService
    {
        /// <summary>
        /// Read log entries from a file
        /// </summary>
        Task<List<LogEntry>> ReadLogFileAsync(string logPath, string sourcePipeline);

        /// <summary>
        /// Get the log file name for a pipeline
        /// </summary>
        string GetLogFileName(string pipelineSelection);

        /// <summary>
        /// Get available log files for pipelines
        /// </summary>
        Task<Dictionary<string, string>> GetAvailableLogFilesAsync();

        /// <summary>
        /// Start watching log files for changes
        /// </summary>
        void StartWatching(IEnumerable<string> logFiles, Action<string> onFileChanged);

        /// <summary>
        /// Stop watching log files
        /// </summary>
        void StopWatching();
    }

    /// <summary>
    /// Service for parsing log lines into structured entries
    /// </summary>
    public interface ILogParsingService
    {
        /// <summary>
        /// Parse a single log line
        /// </summary>
        LogEntry? ParseLogLine(string line);

        /// <summary>
        /// Parse log level from string
        /// </summary>
        LogLevel ParseLogLevel(string levelStr);

        /// <summary>
        /// Parse processing stage from string
        /// </summary>
        ProcessingStage? ParseStage(string stageStr);

        /// <summary>
        /// Infer stage from message content
        /// </summary>
        ProcessingStage? InferStageFromMessage(string message);
    }

    /// <summary>
    /// Service for filtering log entries
    /// </summary>
    public interface ILogFilterService
    {
        /// <summary>
        /// Apply filters to log entries
        /// </summary>
        List<LogEntry> ApplyFilters(
            IEnumerable<LogEntry> entries,
            LogFilterCriteria criteria);

        /// <summary>
        /// Check if text matches wildcard pattern
        /// </summary>
        bool MatchesWildcard(string text, string pattern);
    }

    /// <summary>
    /// Service for building hierarchical log views
    /// </summary>
    public interface ILogTreeBuilder
    {
        /// <summary>
        /// Build correlation groups from log entries
        /// </summary>
        List<CorrelationGroup> BuildCorrelationGroups(
            IEnumerable<LogEntry> entries,
            bool applyTextFilters = false,
            params string[] textFilters);
    }

    /// <summary>
    /// Filter criteria for log entries
    /// </summary>
    public class LogFilterCriteria
    {
        public bool ShowDebug { get; set; }
        public bool ShowInformation { get; set; }
        public bool ShowWarning { get; set; }
        public bool ShowError { get; set; }
        public bool ShowCritical { get; set; }
        public string? SearchText { get; set; }
        public string? Filter1 { get; set; }
        public string? Filter2 { get; set; }
        public string? Filter3 { get; set; }
    }
}

===== src\CamBridge.Config\Services\LogFilterService.cs =====
// src/CamBridge.Config/Services/LogFilterService.cs
// Version: 0.8.16
// Description: Service for filtering log entries
// Copyright: (C) 2025 Claude's Improbably Reliable Software Solutions

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using CamBridge.Config.Models;
using CamBridge.Config.Services.Interfaces;
using Microsoft.Extensions.Logging;

namespace CamBridge.Config.Services
{
    /// <summary>
    /// Service implementation for log filtering
    /// </summary>
    public class LogFilterService : ILogFilterService
    {
        private readonly ILogger<LogFilterService> _logger;

        public LogFilterService(ILogger<LogFilterService> logger)
        {
            _logger = logger;
        }

        public List<LogEntry> ApplyFilters(IEnumerable<LogEntry> entries, LogFilterCriteria criteria)
        {
            _logger.LogDebug("ApplyFilters: Starting with {Count} entries", entries.Count());

            var filtered = entries.AsEnumerable();

            // Apply level filters
            var anyLevelSelected = criteria.ShowDebug || criteria.ShowInformation ||
                                 criteria.ShowWarning || criteria.ShowError || criteria.ShowCritical;

            if (anyLevelSelected)
            {
                filtered = filtered.Where(e =>
                    (criteria.ShowDebug && e.Level == LogLevel.Debug) ||
                    (criteria.ShowInformation && e.Level == LogLevel.Information) ||
                    (criteria.ShowWarning && e.Level == LogLevel.Warning) ||
                    (criteria.ShowError && e.Level == LogLevel.Error) ||
                    (criteria.ShowCritical && e.Level == LogLevel.Critical));
            }

            // Apply search filter
            if (!string.IsNullOrWhiteSpace(criteria.SearchText))
            {
                var searchLower = criteria.SearchText.ToLowerInvariant();
                filtered = filtered.Where(e =>
                    e.Message.ToLowerInvariant().Contains(searchLower) ||
                    e.LevelText.ToLowerInvariant().Contains(searchLower) ||
                    e.Source.ToLowerInvariant().Contains(searchLower) ||
                    (e.CorrelationId?.ToLowerInvariant().Contains(searchLower) ?? false) ||
                    (e.Stage?.ToString().ToLowerInvariant().Contains(searchLower) ?? false));
            }

            // Apply wildcard filters
            if (!string.IsNullOrWhiteSpace(criteria.Filter1) ||
                !string.IsNullOrWhiteSpace(criteria.Filter2) ||
                !string.IsNullOrWhiteSpace(criteria.Filter3))
            {
                filtered = filtered.Where(e =>
                {
                    var fullText = $"{e.Timestamp:HH:mm:ss.fff} {e.LevelText} {e.CorrelationId} {e.Stage} {e.Message} {e.Pipeline}".ToLowerInvariant();

                    return MatchesWildcard(fullText, criteria.Filter1) &&
                           MatchesWildcard(fullText, criteria.Filter2) &&
                           MatchesWildcard(fullText, criteria.Filter3);
                });
            }

            var result = filtered.ToList();
            _logger.LogDebug("After filtering: {Count} entries remain", result.Count);

            return result;
        }

        public bool MatchesWildcard(string text, string pattern)
        {
            if (string.IsNullOrWhiteSpace(pattern))
                return true;

            // Convert wildcard pattern to regex
            var regexPattern = "^" + Regex.Escape(pattern)
                .Replace("\\*", ".*")    // * = any number of chars
                .Replace("\\?", ".")     // ? = exactly one char
                + "$";

            return Regex.IsMatch(text, regexPattern, RegexOptions.IgnoreCase);
        }
    }
}

===== src\CamBridge.Config\Services\LogTreeBuilder.cs =====
// src/CamBridge.Config/Services/LogTreeBuilder.cs
// Version: 0.8.16
// Description: Service for building hierarchical log views
// Copyright: (C) 2025 Claude's Improbably Reliable Software Solutions

using System;
using System.Collections.Generic;
using System.Linq;
using CamBridge.Config.Models;
using CamBridge.Config.Services.Interfaces;
using CamBridge.Core.Enums;
using Microsoft.Extensions.Logging;

namespace CamBridge.Config.Services
{
    /// <summary>
    /// Service implementation for building tree views
    /// </summary>
    public class LogTreeBuilder : ILogTreeBuilder
    {
        private readonly ILogger<LogTreeBuilder> _logger;
        private readonly ILogFilterService _filterService;

        public LogTreeBuilder(
            ILogger<LogTreeBuilder> logger,
            ILogFilterService filterService)
        {
            _logger = logger;
            _filterService = filterService;
        }

        public List<CorrelationGroup> BuildCorrelationGroups(
            IEnumerable<LogEntry> entries,
            bool applyTextFilters = false,
            params string[] textFilters)
        {
            var result = new List<CorrelationGroup>();

            // If text filters are provided, filter at the GROUP level
            if (applyTextFilters && textFilters.Any(f => !string.IsNullOrWhiteSpace(f)))
            {
                var groupsToShow = new HashSet<string>();

                foreach (var entry in entries.Where(e => !string.IsNullOrEmpty(e.CorrelationId)))
                {
                    var fullText = $"{entry.Timestamp:HH:mm:ss.fff} {entry.LevelText} {entry.CorrelationId} {entry.Stage} {entry.Message} {entry.Pipeline}".ToLowerInvariant();

                    bool matchesAll = true;
                    foreach (var filter in textFilters.Where(f => !string.IsNullOrWhiteSpace(f)))
                    {
                        if (!_filterService.MatchesWildcard(fullText, filter))
                        {
                            matchesAll = false;
                            break;
                        }
                    }

                    if (matchesAll)
                    {
                        groupsToShow.Add(entry.CorrelationId!);
                    }
                }

                // Filter entries to only those in matching groups
                entries = entries.Where(e => string.IsNullOrEmpty(e.CorrelationId) || groupsToShow.Contains(e.CorrelationId!));
            }

            // Group by correlation ID
            var groups = entries
                .Where(e => !string.IsNullOrEmpty(e.CorrelationId))
                .GroupBy(e => e.CorrelationId!)
                .OrderByDescending(g => g.Max(e => e.Timestamp));

            foreach (var group in groups)
            {
                var correlationGroup = new CorrelationGroup
                {
                    CorrelationId = group.Key,
                    StartTime = group.Min(e => e.Timestamp),
                    EndTime = group.Max(e => e.Timestamp),
                    Pipeline = group.FirstOrDefault(e => !string.IsNullOrEmpty(e.Pipeline))?.Pipeline ?? "Unknown",
                    IsExpanded = true // Default expanded
                };

                // Build stage hierarchy
                var stages = new Dictionary<ProcessingStage, StageGroup>();

                foreach (var entry in group.OrderBy(e => e.Timestamp))
                {
                    if (entry.Stage.HasValue)
                    {
                        if (!stages.ContainsKey(entry.Stage.Value))
                        {
                            stages[entry.Stage.Value] = new StageGroup
                            {
                                Stage = entry.Stage.Value,
                                StartTime = entry.Timestamp,
                                IsExpanded = true
                            };
                        }

                        stages[entry.Stage.Value].Entries.Add(entry);
                        stages[entry.Stage.Value].EndTime = entry.Timestamp;
                    }
                    else
                    {
                        correlationGroup.UngroupedEntries.Add(entry);
                    }
                }

                // Add stages to correlation group
                foreach (var stage in stages.Values.OrderBy(s => s.StartTime))
                {
                    correlationGroup.Stages.Add(stage);
                }

                // Determine overall status
                if (stages.ContainsKey(ProcessingStage.Error))
                {
                    correlationGroup.Status = ProcessingStatus.Failed;
                }
                else if (stages.ContainsKey(ProcessingStage.Complete))
                {
                    correlationGroup.Status = ProcessingStatus.Completed;
                }
                else
                {
                    correlationGroup.Status = ProcessingStatus.InProgress;
                }

                result.Add(correlationGroup);
            }

            // Add entries without correlation ID
            var uncorrelatedEntries = entries.Where(e => string.IsNullOrEmpty(e.CorrelationId)).ToList();

            if (uncorrelatedEntries.Any())
            {
                var uncorrelatedGroup = new CorrelationGroup
                {
                    CorrelationId = "Uncorrelated",
                    StartTime = uncorrelatedEntries.Min(e => e.Timestamp),
                    EndTime = uncorrelatedEntries.Max(e => e.Timestamp),
                    Pipeline = "Various",
                    IsExpanded = true,
                    Status = ProcessingStatus.Unknown
                };

                foreach (var entry in uncorrelatedEntries.OrderBy(e => e.Timestamp))
                {
                    uncorrelatedGroup.UngroupedEntries.Add(entry);
                }

                result.Add(uncorrelatedGroup);
            }

            _logger.LogDebug("Built {Count} correlation groups from {EntryCount} entries",
                result.Count, entries.Count());

            return result;
        }
    }
}

===== src\CamBridge.Config\Models\CorrelationGroup.cs =====
// src/CamBridge.Config/Models/CorrelationGroup.cs
// Version: 0.8.16
// Description: Groups log entries by correlation ID for tree view
// Copyright: (C) 2025 Claude's Improbably Reliable Software Solutions

using CamBridge.Core.Enums;
using CamBridge.Config.Models;
using CommunityToolkit.Mvvm.ComponentModel;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;

namespace CamBridge.Config.Models
{
    /// <summary>
    /// Represents a group of log entries with the same correlation ID
    /// </summary>
    public class CorrelationGroup : ObservableObject
    {
        private bool _isExpanded = true; // Default expanded for compact view

        public string CorrelationId { get; set; } = string.Empty;
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Pipeline { get; set; } = string.Empty;
        public ProcessingStatus Status { get; set; }
        public ObservableCollection<StageGroup> Stages { get; }
        public ObservableCollection<LogEntry> UngroupedEntries { get; }

        // Constructor
        public CorrelationGroup()
        {
            Stages = new ObservableCollection<StageGroup>();
            UngroupedEntries = new ObservableCollection<LogEntry>();

            // IMPORTANT: Notify AllEntries when collections change
            Stages.CollectionChanged += (s, e) => OnPropertyChanged(nameof(AllEntries));
            UngroupedEntries.CollectionChanged += (s, e) => OnPropertyChanged(nameof(AllEntries));
        }

        public bool IsExpanded
        {
            get => _isExpanded;
            set => SetProperty(ref _isExpanded, value);
        }

        public TimeSpan Duration => EndTime - StartTime;
        public string DurationText => Duration.TotalMilliseconds >= 1000
            ? $"{Duration.TotalSeconds:0.0}s"
            : $"{Duration.TotalMilliseconds:0}ms";

        public int TotalEntries => Stages.Sum(s => s.Entries.Count) + UngroupedEntries.Count;

        /// <summary>
        /// All entries in chronological order for compact display
        /// </summary>
        public IEnumerable<LogEntry> AllEntries
        {
            get
            {
                var allEntries = new List<LogEntry>();

                // Add all stage entries
                foreach (var stage in Stages.OrderBy(s => s.StartTime))
                {
                    allEntries.AddRange(stage.Entries);
                }

                // Add ungrouped entries
                allEntries.AddRange(UngroupedEntries);

                // Return sorted by timestamp
                return allEntries.OrderBy(e => e.Timestamp);
            }
        }

        // UI Helper properties
        public string StatusIcon => Status switch
        {
            ProcessingStatus.Completed => "[OK]",
            ProcessingStatus.Failed => "[FAIL]",
            ProcessingStatus.InProgress => "[...]",
            _ => "[?]"
        };

        public string StatusColor => Status switch
        {
            ProcessingStatus.Completed => "#4CAF50",  // Green
            ProcessingStatus.Failed => "#F44336",      // Red
            ProcessingStatus.InProgress => "#2196F3",  // Blue
            _ => "#9E9E9E"                            // Gray
        };
    }

    /// <summary>
    /// Processing status for correlation groups
    /// </summary>
    public enum ProcessingStatus
    {
        Unknown,
        InProgress,
        Completed,
        Failed
    }
}

===== src\CamBridge.Config\Models\LogEntry.cs =====
// src/CamBridge.Config/Models/LogEntry.cs
// Version: 0.8.16
// Description: Core log entry model with correlation support
// Copyright: (C) 2025 Claude's Improbably Reliable Software Solutions

using System;
using CamBridge.Core.Enums;
using Microsoft.Extensions.Logging;

namespace CamBridge.Config.Models
{
    /// <summary>
    /// Enhanced log entry with correlation support
    /// </summary>
    public class LogEntry
    {
        public DateTime Timestamp { get; set; }
        public LogLevel Level { get; set; }
        public string Message { get; set; } = string.Empty;
        public string? RawLine { get; set; }
        public string Source { get; set; } = string.Empty; // Which log file this came from

        // Enhanced properties for correlation
        public string? CorrelationId { get; set; }
        public ProcessingStage? Stage { get; set; }
        public string? Pipeline { get; set; }
        public int? DurationMs { get; set; }

        // UI Helper Properties
        public string LevelText => Level switch
        {
            LogLevel.Debug => "DBG",
            LogLevel.Information => "INF",
            LogLevel.Warning => "WRN",
            LogLevel.Error => "ERR",
            LogLevel.Critical => "CRT",
            _ => "???"
        };

        public string LevelColor => Level switch
        {
            LogLevel.Debug => "#808080",      // Gray
            LogLevel.Information => "#0078D4", // Blue
            LogLevel.Warning => "#FFA500",     // Orange
            LogLevel.Error => "#FF0000",       // Red
            LogLevel.Critical => "#8B0000",    // Dark Red
            _ => "#000000"
        };

        // Stage icons using simple ASCII representations
        public string StageIcon => Stage switch
        {
            ProcessingStage.ServiceStartup => "[START]",
            ProcessingStage.ConfigurationLoading => "[CONFIG]",
            ProcessingStage.PipelineInitialization => "[INIT]",
            ProcessingStage.ServiceShutdown => "[STOP]",
            ProcessingStage.FileDetected => "[FILE]",
            ProcessingStage.ExifExtraction => "[EXIF]",
            ProcessingStage.TagMapping => "[MAP]",
            ProcessingStage.DicomConversion => "[DICOM]",
            ProcessingStage.PostProcessing => "[POST]",
            ProcessingStage.PacsUpload => "[PACS]",
            ProcessingStage.Complete => "[OK]",
            ProcessingStage.Error => "[ERR]",
            ProcessingStage.PipelineShutdown => "[SHUTDOWN]",
            ProcessingStage.PipelineRecovery => "[RECOVERY]",
            ProcessingStage.WatcherError => "[WATCH]",
            ProcessingStage.HealthCheck => "[HEALTH]",
            _ => "[*]"
        };

        public string FormattedDuration => DurationMs.HasValue ? $"{DurationMs}ms" : "";
    }
}

