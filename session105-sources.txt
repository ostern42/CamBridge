=== src\CamBridge.Config\Views\LogViewerPage.xaml ===
<!-- src\CamBridge.Config\Views\LogViewerPage.xaml -->
<!-- Version: 0.8.9 -->
<!-- Description: Enhanced log viewer with Triple Filter UI -->
<!-- Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions -->

<Page x:Class="CamBridge.Config.Views.LogViewerPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:CamBridge.Config.Views"
      xmlns:viewmodels="clr-namespace:CamBridge.Config.ViewModels"
      xmlns:converters="clr-namespace:CamBridge.Config.Converters"
      mc:Ignorable="d" 
      d:DesignHeight="600" d:DesignWidth="1000"
      d:DataContext="{d:DesignInstance Type=viewmodels:LogViewerViewModel}"
      Title="Log Viewer">

    <Page.Resources>
        <converters:BooleanToVisibilityConverter x:Key="BoolToVisibility"/>
        <converters:InverseBooleanToVisibilityConverter x:Key="InverseBoolToVisibility"/>

        <!-- Style for expandable group headers -->
        <Style x:Key="ExpandableGroupHeader" TargetType="Border">
            <Setter Property="Background" Value="#F5F5F5"/>
            <Setter Property="BorderBrush" Value="#E0E0E0"/>
            <Setter Property="BorderThickness" Value="0,0,0,1"/>
            <Setter Property="Padding" Value="8,4"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#E8E8E8"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- Context Menu for Copy/Export -->
        <ContextMenu x:Key="TreeContextMenu">
            <MenuItem Header="Copy All" Command="{Binding CopySelectedCommand}">
                <MenuItem.Icon>
                    <TextBlock Text="ðŸ“‹" FontSize="14"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Header="Export..." Command="{Binding ExportLogCommand}">
                <MenuItem.Icon>
                    <TextBlock Text="ðŸ’¾" FontSize="14"/>
                </MenuItem.Icon>
            </MenuItem>
        </ContextMenu>

        <!-- DataTemplate for log entries in tree view -->
        <DataTemplate x:Key="LogEntryTemplate" DataType="{x:Type viewmodels:LogEntry}">
            <Border Padding="24,2,8,2" BorderThickness="0,0,0,1" BorderBrush="#F0F0F0">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="100"/>
                        <ColumnDefinition Width="40"/>
                        <ColumnDefinition Width="60"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="80"/>
                    </Grid.ColumnDefinitions>

                    <TextBlock Grid.Column="0" Text="{Binding Timestamp, StringFormat='HH:mm:ss.fff'}" 
                               FontFamily="Consolas" FontSize="11" Opacity="0.7"/>

                    <TextBlock Grid.Column="1" Text="{Binding LevelText}" 
                               FontWeight="Bold" FontFamily="Consolas"
                               Foreground="{Binding LevelColor}"/>

                    <TextBlock Grid.Column="2" Text="{Binding StageIcon}" 
                               FontSize="14" VerticalAlignment="Center"/>

                    <TextBlock Grid.Column="3" Text="{Binding Message}" 
                               TextWrapping="Wrap" Margin="8,0,0,0"/>

                    <TextBlock Grid.Column="4" Text="{Binding FormattedDuration}" 
                               FontFamily="Consolas" FontSize="11" Opacity="0.7"
                               HorizontalAlignment="Right"/>
                </Grid>
            </Border>
        </DataTemplate>
    </Page.Resources>

    <DockPanel>
        <!-- Header with controls -->
        <Border DockPanel.Dock="Top" Padding="16" Background="White"
                BorderBrush="#E0E0E0" BorderThickness="0,0,0,1">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <!-- Title and Stats -->
                <DockPanel Grid.Row="0">
                    <StackPanel Orientation="Horizontal" DockPanel.Dock="Left">
                        <TextBlock Text="ðŸ“‹" FontSize="28" VerticalAlignment="Center"/>
                        <TextBlock Text="Log Viewer" FontSize="24" FontWeight="Bold" 
                                   VerticalAlignment="Center" Margin="8,0,0,0"/>

                        <!-- Tree/Flat Toggle -->
                        <ToggleButton IsChecked="{Binding IsTreeViewEnabled}" 
                                      Margin="16,0,0,0" VerticalAlignment="Center"
                                      ToolTip="Toggle tree view" Padding="8,4">
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="ðŸŒ³" FontSize="16" Margin="0,0,4,0"/>
                                <TextBlock Text="Tree View"/>
                            </StackPanel>
                        </ToggleButton>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal" DockPanel.Dock="Right" 
                                HorizontalAlignment="Right" VerticalAlignment="Center">
                        <TextBlock Text="Last Update:" Opacity="0.7" Margin="0,0,4,0"/>
                        <TextBlock Text="{Binding LastUpdateTime, StringFormat='HH:mm:ss'}" FontWeight="Bold"/>
                        <TextBlock Text="Lines:" Opacity="0.7" Margin="16,0,4,0"/>
                        <TextBlock Text="{Binding DisplayedLineCount}" FontWeight="Bold"/>
                        <TextBlock Text="/" Opacity="0.5"/>
                        <TextBlock Text="{Binding TotalLineCount}" Opacity="0.7"/>
                    </StackPanel>
                </DockPanel>

                <!-- REPLACE the Pipeline Selection section in LogViewerPage.xaml (around line 107) -->

                <!-- Pipeline Selection -->
                <Grid Grid.Row="1" Margin="0,8,0,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <TextBlock Grid.Column="0" Text="Pipelines:" VerticalAlignment="Center" Margin="0,0,8,0"/>

                    <ComboBox Grid.Column="1" ItemsSource="{Binding PipelineSelections}"
              MaxDropDownHeight="300">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <Border Padding="4,2" MinHeight="24">
                                    <CheckBox IsChecked="{Binding IsSelected}" 
                              Content="{Binding Name}"
                              VerticalAlignment="Center"/>
                                </Border>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                        <ComboBox.ItemContainerStyle>
                            <Style TargetType="ComboBoxItem">
                                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                <Setter Property="MinHeight" Value="24"/>
                                <Setter Property="Padding" Value="2"/>
                            </Style>
                        </ComboBox.ItemContainerStyle>
                        <ComboBox.Style>
                            <Style TargetType="ComboBox">
                                <Setter Property="MinWidth" Value="200"/>
                                <Style.Triggers>
                                    <Trigger Property="IsDropDownOpen" Value="True">
                                        <Setter Property="MinWidth" Value="250"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </ComboBox.Style>
                        <ComboBox.Text>
                            <MultiBinding StringFormat="{}{0} pipeline(s) selected" Mode="OneWay">
                                <Binding Path="SelectedPipelineCount" Mode="OneWay"/>
                            </MultiBinding>
                        </ComboBox.Text>
                    </ComboBox>

                    <!-- Rest of the buttons remain the same -->
                    <StackPanel Grid.Column="2" Orientation="Horizontal" Margin="16,0,0,0">
                        <!-- ... existing buttons ... -->
                    </StackPanel>
                </Grid>

                <!-- Filters -->
                <Grid Grid.Row="2" Margin="0,8,0,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <!-- Triple Filter Box -->
                    <StackPanel Grid.Column="0" Orientation="Horizontal">
                        <!-- Filter 1 -->
                        <TextBox Width="180" 
                                 Text="{Binding Filter1, UpdateSourceTrigger=PropertyChanged}"
                                 VerticalContentAlignment="Center" 
                                 Padding="4"
                                 Margin="0,0,4,0">
                            <TextBox.ToolTip>
                                <ToolTip>
                                    <TextBlock>
                                        <TextBlock.Text>Filter 1 - Wildcards supported:&#x0a;* = any characters&#x0a;? = single character&#x0a;Example: *Schmidt*</TextBlock.Text>
                                    </TextBlock>
                                </ToolTip>
                            </TextBox.ToolTip>
                            <TextBox.Tag>Filter 1...</TextBox.Tag>
                        </TextBox>

                        <TextBlock Text="â†’" VerticalAlignment="Center" Margin="4,0" Opacity="0.5" FontSize="16"/>

                        <!-- Filter 2 -->
                        <TextBox Width="180" 
                                 Text="{Binding Filter2, UpdateSourceTrigger=PropertyChanged}"
                                 VerticalContentAlignment="Center" 
                                 Padding="4"
                                 Margin="0,0,4,0">
                            <TextBox.ToolTip>
                                <ToolTip>
                                    <TextBlock>
                                        <TextBlock.Text>Filter 2 - All filters must match&#x0a;Example: DICOM</TextBlock.Text>
                                    </TextBlock>
                                </ToolTip>
                            </TextBox.ToolTip>
                            <TextBox.Tag>Filter 2...</TextBox.Tag>
                        </TextBox>

                        <TextBlock Text="â†’" VerticalAlignment="Center" Margin="4,0" Opacity="0.5" FontSize="16"/>

                        <!-- Filter 3 -->
                        <TextBox Width="180" 
                                 Text="{Binding Filter3, UpdateSourceTrigger=PropertyChanged}"
                                 VerticalContentAlignment="Center" 
                                 Padding="4"
                                 Margin="0,0,4,0">
                            <TextBox.ToolTip>
                                <ToolTip>
                                    <TextBlock>
                                        <TextBlock.Text>Filter 3 - Chain filters for precision&#x0a;Example: *.dcm</TextBlock.Text>
                                    </TextBlock>
                                </ToolTip>
                            </TextBox.ToolTip>
                            <TextBox.Tag>Filter 3...</TextBox.Tag>
                        </TextBox>

                        <!-- Clear Filters Button -->
                        <Button Command="{Binding ClearFiltersCommand}" 
                                ToolTip="Clear all filters" 
                                Margin="4,0,0,0" 
                                Padding="6,4">
                            <TextBlock Text="âœ–" FontSize="14"/>
                        </Button>

                        <!-- Legacy Search Box (hidden but kept for compatibility) -->
                        <TextBox Text="{Binding SearchText, UpdateSourceTrigger=PropertyChanged}"
                                 Visibility="Collapsed"/>
                    </StackPanel>

                    <!-- Level Filters -->
                    <StackPanel Grid.Column="1" Orientation="Horizontal" Margin="16,0,0,0">
                        <TextBlock Text="Levels:" VerticalAlignment="Center" Margin="0,0,8,0"/>

                        <ToggleButton IsChecked="{Binding ShowDebug}" ToolTip="Debug" Padding="4,2" Margin="2,0">
                            <TextBlock Text="DBG" FontFamily="Consolas" FontWeight="Bold" Foreground="#808080"/>
                        </ToggleButton>

                        <ToggleButton IsChecked="{Binding ShowInformation}" ToolTip="Information" Padding="4,2" Margin="2,0">
                            <TextBlock Text="INF" FontFamily="Consolas" FontWeight="Bold" Foreground="#0078D4"/>
                        </ToggleButton>

                        <ToggleButton IsChecked="{Binding ShowWarning}" ToolTip="Warning" Padding="4,2" Margin="2,0">
                            <TextBlock Text="WRN" FontFamily="Consolas" FontWeight="Bold" Foreground="#FFA500"/>
                        </ToggleButton>

                        <ToggleButton IsChecked="{Binding ShowError}" ToolTip="Error" Padding="4,2" Margin="2,0">
                            <TextBlock Text="ERR" FontFamily="Consolas" FontWeight="Bold" Foreground="#FF0000"/>
                        </ToggleButton>

                        <ToggleButton IsChecked="{Binding ShowCritical}" ToolTip="Critical" Padding="4,2" Margin="2,0">
                            <TextBlock Text="CRT" FontFamily="Consolas" FontWeight="Bold" Foreground="#8B0000"/>
                        </ToggleButton>
                    </StackPanel>

                    <!-- Auto-scroll -->
                    <CheckBox Grid.Column="2" IsChecked="{Binding IsAutoScrollEnabled}" 
                              Content="Auto-scroll" VerticalAlignment="Center" Margin="16,0,0,0"/>
                </Grid>
            </Grid>
        </Border>

        <!-- Progress bar -->
        <ProgressBar DockPanel.Dock="Top" IsIndeterminate="True" Height="2"
                     Visibility="{Binding IsLoading, Converter={StaticResource BoolToVisibility}}"/>

        <!-- Main content area -->
        <Grid>
            <!-- Tree View (when enabled) -->
            <ScrollViewer Visibility="{Binding IsTreeViewEnabled, Converter={StaticResource BoolToVisibility}}"
                          VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto"
                          Padding="8">
                <ScrollViewer.ContextMenu>
                    <StaticResource ResourceKey="TreeContextMenu"/>
                </ScrollViewer.ContextMenu>

                <!-- Show message when no groups available -->
                <Grid>
                    <ItemsControl ItemsSource="{Binding CorrelationGroups}" VirtualizingPanel.IsVirtualizing="True">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type viewmodels:CorrelationGroup}">
                                <Border Margin="0,0,0,8" BorderBrush="#E0E0E0" 
                                        BorderThickness="1" CornerRadius="4">
                                    <!-- Correlation Group Header -->
                                    <StackPanel>
                                        <Border Style="{StaticResource ExpandableGroupHeader}"
                                                MouseLeftButtonDown="CorrelationHeader_Click"
                                                Tag="{Binding}">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>

                                                <TextBlock Grid.Column="0" FontFamily="Consolas">
                                                    <TextBlock.Style>
                                                        <Style TargetType="TextBlock">
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding IsExpanded}" Value="False">
                                                                    <Setter Property="Text" Value="â–¶"/>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding IsExpanded}" Value="True">
                                                                    <Setter Property="Text" Value="â–¼"/>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </TextBlock.Style>
                                                </TextBlock>

                                                <TextBlock Grid.Column="1" Text="{Binding StatusIcon}" 
                                                           FontSize="16" Margin="8,0"/>

                                                <TextBlock Grid.Column="2" FontWeight="Bold">
                                                    <TextBlock.Text>
                                                        <MultiBinding StringFormat="{}{0} - {1}">
                                                            <Binding Path="CorrelationId"/>
                                                            <Binding Path="Pipeline"/>
                                                        </MultiBinding>
                                                    </TextBlock.Text>
                                                </TextBlock>

                                                <TextBlock Grid.Column="3" Text="{Binding StartTime, StringFormat='HH:mm:ss.fff'}" 
                                                           FontFamily="Consolas" Opacity="0.7" Margin="8,0"/>

                                                <TextBlock Grid.Column="4" Text="{Binding DurationText}" 
                                                           FontFamily="Consolas" Foreground="{Binding StatusColor}" 
                                                           FontWeight="Bold" Margin="8,0"/>

                                                <TextBlock Grid.Column="5" Text="{Binding TotalEntries, StringFormat='({0} entries)'}" 
                                                           Opacity="0.7" Margin="8,0"/>
                                            </Grid>
                                        </Border>

                                        <!-- Stages (when expanded) -->
                                        <ItemsControl ItemsSource="{Binding Stages}" 
                                                      Visibility="{Binding IsExpanded, Converter={StaticResource BoolToVisibility}}">
                                            <ItemsControl.ItemTemplate>
                                                <DataTemplate DataType="{x:Type viewmodels:StageGroup}">
                                                    <StackPanel>
                                                        <!-- Stage Header -->
                                                        <Border Style="{StaticResource ExpandableGroupHeader}"
                                                                Margin="16,0,0,0"
                                                                MouseLeftButtonDown="StageHeader_Click"
                                                                Tag="{Binding}">
                                                            <Grid>
                                                                <Grid.ColumnDefinitions>
                                                                    <ColumnDefinition Width="Auto"/>
                                                                    <ColumnDefinition Width="Auto"/>
                                                                    <ColumnDefinition Width="*"/>
                                                                    <ColumnDefinition Width="Auto"/>
                                                                    <ColumnDefinition Width="Auto"/>
                                                                </Grid.ColumnDefinitions>

                                                                <TextBlock Grid.Column="0" FontFamily="Consolas" Width="16">
                                                                    <TextBlock.Style>
                                                                        <Style TargetType="TextBlock">
                                                                            <Style.Triggers>
                                                                                <DataTrigger Binding="{Binding IsExpanded}" Value="False">
                                                                                    <Setter Property="Text" Value="â–¶"/>
                                                                                </DataTrigger>
                                                                                <DataTrigger Binding="{Binding IsExpanded}" Value="True">
                                                                                    <Setter Property="Text" Value="â–¼"/>
                                                                                </DataTrigger>
                                                                            </Style.Triggers>
                                                                        </Style>
                                                                    </TextBlock.Style>
                                                                </TextBlock>

                                                                <TextBlock Grid.Column="1" Text="{Binding StageIcon}" 
                                                                           FontSize="14" Margin="4,0"/>

                                                                <TextBlock Grid.Column="2" Text="{Binding Stage}" 
                                                                           FontWeight="SemiBold"/>

                                                                <TextBlock Grid.Column="3" Text="{Binding DurationText}" 
                                                                           FontFamily="Consolas" FontSize="11" 
                                                                           Opacity="0.7" Margin="8,0"/>

                                                                <TextBlock Grid.Column="4" Text="{Binding Entries.Count, StringFormat='({0})'}" 
                                                                           FontSize="11" Opacity="0.7"/>
                                                            </Grid>
                                                        </Border>

                                                        <!-- Stage Entries (when expanded) -->
                                                        <ItemsControl ItemsSource="{Binding Entries}" 
                                                                      Visibility="{Binding IsExpanded, Converter={StaticResource BoolToVisibility}}"
                                                                      Margin="32,0,0,0"
                                                                      ItemTemplate="{StaticResource LogEntryTemplate}"/>
                                                    </StackPanel>
                                                </DataTemplate>
                                            </ItemsControl.ItemTemplate>
                                        </ItemsControl>

                                        <!-- Ungrouped Entries -->
                                        <ItemsControl ItemsSource="{Binding UngroupedEntries}" 
                                                      Visibility="{Binding IsExpanded, Converter={StaticResource BoolToVisibility}}"
                                                      Margin="16,0,0,0"
                                                      ItemTemplate="{StaticResource LogEntryTemplate}"/>
                                    </StackPanel>
                                </Border>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>

                    <!-- Empty state message -->
                    <TextBlock Text="No correlation groups to display. Process some files to see hierarchical logs!" 
                               HorizontalAlignment="Center" VerticalAlignment="Center"
                               FontSize="14" Opacity="0.5" Margin="20">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding CorrelationGroups.Count}" Value="0">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </Grid>
            </ScrollViewer>

            <!-- Flat View (when tree view disabled) -->
            <DataGrid ItemsSource="{Binding FilteredCombinedEntries}"
                      Visibility="{Binding IsTreeViewEnabled, Converter={StaticResource InverseBoolToVisibility}}"
                      AutoGenerateColumns="False"
                      CanUserAddRows="False"
                      CanUserDeleteRows="False"
                      GridLinesVisibility="Horizontal"
                      HeadersVisibility="Column"
                      IsReadOnly="True"
                      VirtualizingPanel.IsVirtualizing="True"
                      VirtualizingPanel.VirtualizationMode="Recycling"
                      ScrollViewer.CanContentScroll="True">
                <DataGrid.Resources>
                    <Style TargetType="DataGridCell">
                        <Setter Property="BorderThickness" Value="0"/>
                    </Style>
                </DataGrid.Resources>

                <DataGrid.ContextMenu>
                    <StaticResource ResourceKey="TreeContextMenu"/>
                </DataGrid.ContextMenu>

                <DataGrid.Columns>
                    <DataGridTextColumn Header="Time" Binding="{Binding Timestamp, StringFormat='HH:mm:ss.fff'}" 
                                        Width="100" FontFamily="Consolas"/>

                    <DataGridTextColumn Header="Level" Binding="{Binding LevelText}" Width="60">
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="TextBlock">
                                <Setter Property="Foreground" Value="{Binding LevelColor}"/>
                                <Setter Property="FontWeight" Value="Bold"/>
                                <Setter Property="FontFamily" Value="Consolas"/>
                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>

                    <DataGridTextColumn Header="Pipeline" Binding="{Binding Source}" Width="120"/>

                    <DataGridTextColumn Header="Correlation" Binding="{Binding CorrelationId}" Width="140" 
                                        FontFamily="Consolas" FontSize="11"/>

                    <DataGridTextColumn Header="Stage" Binding="{Binding Stage}" Width="120"/>

                    <DataGridTextColumn Header="Message" Binding="{Binding Message}" Width="*">
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="TextBlock">
                                <Setter Property="TextWrapping" Value="Wrap"/>
                                <Setter Property="VerticalAlignment" Value="Center"/>
                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>

                    <DataGridTextColumn Header="Duration" Binding="{Binding FormattedDuration}" 
                                        Width="80" FontFamily="Consolas" FontSize="11"/>
                </DataGrid.Columns>
            </DataGrid>
        </Grid>
    </DockPanel>
</Page>



=== src\CamBridge.Config\ViewModels\LogViewerViewModel.cs ===
// src\CamBridge.Config\ViewModels\LogViewerViewModel.cs
// Version: 0.8.9
// Description: Enhanced log viewer with Triple Filter and Default Expanded
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using CamBridge.Config.Services;
using CamBridge.Core;
using CamBridge.Core.Enums;
using CamBridge.Core.Infrastructure;
using CamBridge.Core.Logging;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Abstractions;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Media;


namespace CamBridge.Config.ViewModels
{
    /// <summary>
    /// Tracks file position for incremental reading
    /// </summary>
    public class FilePositionInfo
    {
        public long Position { get; set; }
        public DateTime LastRead { get; set; }
    }

    /// <summary>
    /// Represents a selectable pipeline in the multi-select dropdown
    /// </summary>
    public class PipelineSelection : ViewModelBase
    {
        private bool _isSelected;

        public string Name { get; set; } = string.Empty;
        public string SanitizedName { get; set; } = string.Empty;

        public bool IsSelected
        {
            get => _isSelected;
            set => SetProperty(ref _isSelected, value);
        }
    }

    /// <summary>
    /// Enhanced ViewModel for the log viewer with correlation ID support
    /// </summary>
    public partial class LogViewerViewModel : ViewModelBase
    {
        private readonly ILogger<LogViewerViewModel> _logger;
        private readonly IConfigurationService _configurationService;
        private readonly Dictionary<string, string> _pipelineNameMapping;
        private readonly Timer _refreshTimer;
        private readonly Dictionary<string, long> _filePositions;
        private CancellationTokenSource? _watcherCancellation;
        private FileSystemWatcher? _logWatcher;

        // Constants
        private const int MaxDisplayedEntries = 10000;
        private const int TailLineCount = 1000;
        private const int RefreshIntervalMs = 1000;

        public LogViewerViewModel(
            ILogger<LogViewerViewModel> logger,
            IConfigurationService configurationService)
        {
            _logger = logger;
            _configurationService = configurationService;
            _pipelineNameMapping = new Dictionary<string, string>();
            _filePositions = new Dictionary<string, long>();

            // Initialize collections
            LogEntries = new ObservableCollection<LogEntry>();
            FilteredCombinedEntries = new ObservableCollection<LogEntry>();
            CombinedLogEntries = new ObservableCollection<LogEntry>();
            CorrelationGroups = new ObservableCollection<CorrelationGroup>();
            AvailablePipelines = new ObservableCollection<string>();
            PipelineSelections = new ObservableCollection<PipelineSelection>();

            // Initialize commands
            RefreshCommand = new AsyncRelayCommand(RefreshLogsAsync);
            ClearLogCommand = new RelayCommand(ClearLogs);
            ExportLogCommand = new AsyncRelayCommand(ExportLogsAsync);
            ToggleTreeViewCommand = new RelayCommand(() => IsTreeViewEnabled = !IsTreeViewEnabled);
            ExpandAllCommand = new RelayCommand(ExpandAll);
            CollapseAllCommand = new RelayCommand(CollapseAll);
            CopySelectedCommand = new RelayCommand(CopySelected);
            OpenLogFolderCommand = new RelayCommand(OpenLogFolder);
            ClearFiltersCommand = new RelayCommand(ClearFilters);

            // Initialize timer for auto-refresh
            _refreshTimer = new Timer(OnRefreshTimer, null, Timeout.Infinite, Timeout.Infinite);

            // Set default filter values
            ShowDebug = false;  // Debug meist zu viel
            ShowInformation = true;
            ShowWarning = true;
            ShowError = true;
            ShowCritical = true;
            IsAutoScrollEnabled = false; // Default OFF to prevent flicker
            IsTreeViewEnabled = true; // Default to tree view for correlation
        }

        #region Properties

        [ObservableProperty]
        private ObservableCollection<LogEntry> logEntries;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(DisplayedLineCount))]
        private ObservableCollection<LogEntry> filteredCombinedEntries;

        [ObservableProperty]
        private ObservableCollection<LogEntry> combinedLogEntries;

        [ObservableProperty]
        private ObservableCollection<CorrelationGroup> correlationGroups;

        [ObservableProperty]
        private ObservableCollection<string> availablePipelines;

        [ObservableProperty]
        private ObservableCollection<PipelineSelection> pipelineSelections;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FilteredCombinedEntries))]
        [NotifyPropertyChangedFor(nameof(CorrelationGroups))]
        private string? searchText;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FilteredCombinedEntries))]
        [NotifyPropertyChangedFor(nameof(CorrelationGroups))]
        private string filter1 = string.Empty;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FilteredCombinedEntries))]
        [NotifyPropertyChangedFor(nameof(CorrelationGroups))]
        private string filter2 = string.Empty;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FilteredCombinedEntries))]
        [NotifyPropertyChangedFor(nameof(CorrelationGroups))]
        private string filter3 = string.Empty;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FilteredCombinedEntries))]
        [NotifyPropertyChangedFor(nameof(CorrelationGroups))]
        private bool showDebug;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FilteredCombinedEntries))]
        [NotifyPropertyChangedFor(nameof(CorrelationGroups))]
        private bool showInformation;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FilteredCombinedEntries))]
        [NotifyPropertyChangedFor(nameof(CorrelationGroups))]
        private bool showWarning;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FilteredCombinedEntries))]
        [NotifyPropertyChangedFor(nameof(CorrelationGroups))]
        private bool showError;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FilteredCombinedEntries))]
        [NotifyPropertyChangedFor(nameof(CorrelationGroups))]
        private bool showCritical;

        [ObservableProperty]
        private bool isAutoScrollEnabled;

        [ObservableProperty]
        private bool isTreeViewEnabled;

        [ObservableProperty]
        private bool isLoading;

        [ObservableProperty]
        private string currentLogFile = "No log file loaded";

        [ObservableProperty]
        private string currentLogFiles = "No files selected";

        [ObservableProperty]
        private int totalLineCount;

        [ObservableProperty]
        private DateTime lastUpdateTime = DateTime.Now;

        public int DisplayedLineCount =>
            IsTreeViewEnabled
                ? CorrelationGroups?.Sum(g => g.TotalEntries) ?? 0
                : FilteredCombinedEntries?.Count ?? 0;

        public int SelectedPipelineCount => PipelineSelections?.Count(p => p.IsSelected) ?? 0;

        public int SelectedLevelCount
        {
            get
            {
                var count = 0;
                if (ShowDebug) count++;
                if (ShowInformation) count++;
                if (ShowWarning) count++;
                if (ShowError) count++;
                if (ShowCritical) count++;
                return count;
            }
        }

        #endregion

        #region Commands

        public IAsyncRelayCommand RefreshCommand { get; }
        public IRelayCommand ClearLogCommand { get; }
        public IAsyncRelayCommand ExportLogCommand { get; }
        public IRelayCommand ToggleTreeViewCommand { get; }
        public IRelayCommand ExpandAllCommand { get; }
        public IRelayCommand CollapseAllCommand { get; }
        public IRelayCommand CopySelectedCommand { get; }
        public IRelayCommand OpenLogFolderCommand { get; }
        public IRelayCommand ClearFiltersCommand { get; }

        #endregion

        #region Public Methods

        public async Task InitializeAsync()
        {
            try
            {
                _logger.LogInformation("Initializing Enhanced LogViewerViewModel");

                // Load available pipelines
                await LoadAvailablePipelinesAsync();

                // Update count display
                OnPropertyChanged(nameof(SelectedPipelineCount));
                OnPropertyChanged(nameof(SelectedLevelCount));

                // Log initial filter state
                _logger.LogInformation("Initial filter state: Debug={Debug}, Info={Info}, Warn={Warn}, Error={Error}, Critical={Critical}",
                    ShowDebug, ShowInformation, ShowWarning, ShowError, ShowCritical);

                // Log selected pipelines
                var selected = PipelineSelections.Where(p => p.IsSelected).Select(p => p.Name).ToList();
                _logger.LogInformation("Selected pipelines: {Pipelines}", string.Join(", ", selected));

                // Load initial logs
                await RefreshLogsAsync();

                // Start auto-refresh if enabled
                if (IsAutoScrollEnabled)
                {
                    _refreshTimer.Change(RefreshIntervalMs, RefreshIntervalMs);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to initialize LogViewerViewModel");
            }
        }

        public void Cleanup()
        {
            try
            {
                _refreshTimer?.Change(Timeout.Infinite, Timeout.Infinite);
                _refreshTimer?.Dispose();
                _watcherCancellation?.Cancel();
                _watcherCancellation?.Dispose();
                _logWatcher?.Dispose();

                // Unsubscribe from selection changes
                foreach (var selection in PipelineSelections)
                {
                    selection.PropertyChanged -= OnPipelineSelectionChanged;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error during cleanup");
            }
        }

        #endregion

        private void ApplyFilters()
        {
            // WICHTIG: Muss auf dem UI Thread laufen!
            if (!Application.Current.Dispatcher.CheckAccess())
            {
                Application.Current.Dispatcher.Invoke(() => ApplyFilters());
                return;
            }

            _logger.LogDebug("ApplyFilters: Starting with {Count} combined entries", CombinedLogEntries.Count);

            var filtered = CombinedLogEntries.AsEnumerable();

            // Apply level filters
            var anyLevelSelected = ShowDebug || ShowInformation || ShowWarning || ShowError || ShowCritical;

            if (anyLevelSelected)
            {
                filtered = filtered.Where(e =>
                    (ShowDebug && e.Level == LogLevel.Debug) ||
                    (ShowInformation && e.Level == LogLevel.Information) ||
                    (ShowWarning && e.Level == LogLevel.Warning) ||
                    (ShowError && e.Level == LogLevel.Error) ||
                    (ShowCritical && e.Level == LogLevel.Critical));
            }

            // Apply search filter (legacy single search)
            if (!string.IsNullOrWhiteSpace(SearchText))
            {
                var searchLower = SearchText.ToLowerInvariant();
                filtered = filtered.Where(e =>
                    e.Message.ToLowerInvariant().Contains(searchLower) ||
                    e.LevelText.ToLowerInvariant().Contains(searchLower) ||
                    e.Source.ToLowerInvariant().Contains(searchLower) ||
                    (e.CorrelationId?.ToLowerInvariant().Contains(searchLower) ?? false) ||
                    (e.Stage?.ToString().ToLowerInvariant().Contains(searchLower) ?? false));
            }

            // Update filtered collection
            var filteredList = filtered.ToList();

            // NEW: Apply Triple Text Filter if tree view is enabled
            if (IsTreeViewEnabled && (!string.IsNullOrWhiteSpace(Filter1) || !string.IsNullOrWhiteSpace(Filter2) || !string.IsNullOrWhiteSpace(Filter3)))
            {
                filteredList = ApplyTripleTextFilter(filteredList);
            }

            _logger.LogDebug("After filtering: {Count} entries remain", filteredList.Count);

            FilteredCombinedEntries.Clear();
            foreach (var entry in filteredList)
            {
                FilteredCombinedEntries.Add(entry);
            }

            // Update correlation groups if tree view is enabled
            if (IsTreeViewEnabled)
            {
                UpdateCorrelationGroups(filteredList);
            }
        }

        private List<LogEntry> ApplyTripleTextFilter(List<LogEntry> entries)
        {
            // For tree-aware filtering, we need to check groups
            var groups = entries
                .Where(e => !string.IsNullOrEmpty(e.CorrelationId))
                .GroupBy(e => e.CorrelationId!)
                .ToList();

            var matchingEntries = new List<LogEntry>();

            foreach (var group in groups)
            {
                // Check if ANY entry in the group matches ALL active filters
                bool groupMatches = group.Any(entry =>
                {
                    var fullText = $"{entry.Timestamp:HH:mm:ss.fff} {entry.LevelText} {entry.CorrelationId} {entry.Stage} {entry.Message} {entry.Pipeline}";

                    return MatchesWildcard(fullText, Filter1) &&
                           MatchesWildcard(fullText, Filter2) &&
                           MatchesWildcard(fullText, Filter3);
                });

                if (groupMatches)
                {
                    // Include ALL entries from matching groups (tree-aware!)
                    matchingEntries.AddRange(group);
                }
            }

            // Also check uncorrelated entries individually
            var uncorrelated = entries.Where(e => string.IsNullOrEmpty(e.CorrelationId)).ToList();
            foreach (var entry in uncorrelated)
            {
                var fullText = $"{entry.Timestamp:HH:mm:ss.fff} {entry.LevelText} {entry.Message} {entry.Pipeline}";

                if (MatchesWildcard(fullText, Filter1) &&
                    MatchesWildcard(fullText, Filter2) &&
                    MatchesWildcard(fullText, Filter3))
                {
                    matchingEntries.Add(entry);
                }
            }

            return matchingEntries;
        }

        private bool MatchesWildcard(string text, string pattern)
        {
            if (string.IsNullOrWhiteSpace(pattern)) return true;

            // Convert wildcard pattern to regex
            var regexPattern = "^" + Regex.Escape(pattern)
                .Replace("\\*", ".*")    // * = any number of chars
                .Replace("\\?", ".")     // ? = exactly one char
                + "$";

            return Regex.IsMatch(text, regexPattern, RegexOptions.IgnoreCase);
        }

        private void ClearFilters()
        {
            SearchText = string.Empty;
            Filter1 = string.Empty;
            Filter2 = string.Empty;
            Filter3 = string.Empty;
        }

        private void UpdateCorrelationGroups(List<LogEntry> entries)
        {
            // DEBUG OUTPUT
            Console.WriteLine($"[DEBUG] UpdateCorrelationGroups called with {entries.Count} entries");

            CorrelationGroups.Clear();

            // Group by correlation ID
            var groups = entries
                .Where(e => !string.IsNullOrEmpty(e.CorrelationId))
                .GroupBy(e => e.CorrelationId!)
                .OrderByDescending(g => g.Max(e => e.Timestamp));

            Console.WriteLine($"[DEBUG] Found {groups.Count()} correlation groups");

            foreach (var group in groups)
            {
                Console.WriteLine($"[DEBUG] Processing group {group.Key} with {group.Count()} entries");

                var correlationGroup = new CorrelationGroup
                {
                    CorrelationId = group.Key,
                    StartTime = group.Min(e => e.Timestamp),
                    EndTime = group.Max(e => e.Timestamp),
                    Pipeline = group.FirstOrDefault(e => !string.IsNullOrEmpty(e.Pipeline))?.Pipeline ?? "Unknown",
                    IsExpanded = true // Default expanded!
                };

                // Build stage hierarchy
                var stages = new Dictionary<ProcessingStage, StageGroup>();

                foreach (var entry in group.OrderBy(e => e.Timestamp))
                {
                    if (entry.Stage.HasValue)
                    {
                        if (!stages.ContainsKey(entry.Stage.Value))
                        {
                            stages[entry.Stage.Value] = new StageGroup
                            {
                                Stage = entry.Stage.Value,
                                StartTime = entry.Timestamp,
                                IsExpanded = true // Default expanded!
                            };
                        }

                        stages[entry.Stage.Value].Entries.Add(entry);
                        stages[entry.Stage.Value].EndTime = entry.Timestamp;
                    }
                    else
                    {
                        // Add entries without stage directly to correlation group
                        correlationGroup.UngroupedEntries.Add(entry);
                    }
                }

                // Add stages to correlation group
                foreach (var stage in stages.Values.OrderBy(s => s.StartTime))
                {
                    correlationGroup.Stages.Add(stage);
                }

                // Determine overall status
                if (stages.ContainsKey(ProcessingStage.Error))
                {
                    correlationGroup.Status = ProcessingStatus.Failed;
                }
                else if (stages.ContainsKey(ProcessingStage.Complete))
                {
                    correlationGroup.Status = ProcessingStatus.Completed;
                }
                else
                {
                    correlationGroup.Status = ProcessingStatus.InProgress;
                }

                CorrelationGroups.Add(correlationGroup);
            }

            // Add entries without correlation ID
            var uncorrelatedEntries = entries.Where(e => string.IsNullOrEmpty(e.CorrelationId)).ToList();
            Console.WriteLine($"[DEBUG] Found {uncorrelatedEntries.Count} uncorrelated entries");

            if (uncorrelatedEntries.Any())
            {
                var uncorrelatedGroup = new CorrelationGroup
                {
                    CorrelationId = "Uncorrelated",
                    StartTime = uncorrelatedEntries.Min(e => e.Timestamp),
                    EndTime = uncorrelatedEntries.Max(e => e.Timestamp),
                    Pipeline = "Various",
                    IsExpanded = true, // Default expanded!
                    Status = ProcessingStatus.Unknown
                };

                foreach (var entry in uncorrelatedEntries.OrderBy(e => e.Timestamp))
                {
                    uncorrelatedGroup.UngroupedEntries.Add(entry);
                }

                CorrelationGroups.Add(uncorrelatedGroup);
            }

            Console.WriteLine($"[DEBUG] Total CorrelationGroups: {CorrelationGroups.Count}");
        }

        private void ExpandAll()
        {
            foreach (var group in CorrelationGroups)
            {
                group.IsExpanded = true;
                foreach (var stage in group.Stages)
                {
                    stage.IsExpanded = true;
                }
            }
        }

        private void CollapseAll()
        {
            foreach (var group in CorrelationGroups)
            {
                group.IsExpanded = false;
                foreach (var stage in group.Stages)
                {
                    stage.IsExpanded = false;
                }
            }
        }

        private void CopySelected()
        {
            // Copy all visible log entries to clipboard
            var sb = new StringBuilder();

            if (IsTreeViewEnabled)
            {
                // Copy tree structure
                foreach (var group in CorrelationGroups)
                {
                    sb.AppendLine($"=== {group.CorrelationId} - {group.Pipeline} [{group.DurationText}] ===");

                    foreach (var stage in group.Stages)
                    {
                        sb.AppendLine($"  {stage.Stage} [{stage.DurationText}]");
                        foreach (var entry in stage.Entries)
                        {
                            sb.AppendLine($"    {entry.Timestamp:HH:mm:ss.fff} {entry.LevelText} {entry.Message}");
                        }
                    }

                    if (group.UngroupedEntries.Any())
                    {
                        sb.AppendLine("  [Ungrouped]");
                        foreach (var entry in group.UngroupedEntries)
                        {
                            sb.AppendLine($"    {entry.Timestamp:HH:mm:ss.fff} {entry.LevelText} {entry.Message}");
                        }
                    }

                    sb.AppendLine();
                }
            }
            else
            {
                // Copy flat list
                foreach (var entry in FilteredCombinedEntries)
                {
                    sb.AppendLine($"{entry.Timestamp:HH:mm:ss.fff} {entry.LevelText} [{entry.CorrelationId}] [{entry.Stage}] {entry.Message}");
                }
            }

            if (sb.Length > 0)
            {
                Clipboard.SetText(sb.ToString());
                _logger.LogInformation("Copied {Count} entries to clipboard",
                    IsTreeViewEnabled ? CorrelationGroups.Sum(g => g.TotalEntries) : FilteredCombinedEntries.Count);
            }
        }

        private void OpenLogFolder()
        {
            try
            {
                var logPath = ConfigurationPaths.GetLogsDirectory();
                if (Directory.Exists(logPath))
                {
                    Process.Start(new ProcessStartInfo
                    {
                        FileName = logPath,
                        UseShellExecute = true,
                        Verb = "open"
                    });
                    _logger.LogInformation("Opened log folder: {Path}", logPath);
                }
                else
                {
                    _logger.LogWarning("Log folder does not exist: {Path}", logPath);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to open log folder");
            }
        }
        private async Task LoadAvailablePipelinesAsync()
        {
            try
            {
                AvailablePipelines.Clear();
                PipelineSelections.Clear();
                _pipelineNameMapping.Clear();

                // Always add Service (Global) log
                AvailablePipelines.Add("Service (Global)");
                PipelineSelections.Add(new PipelineSelection
                {
                    Name = "Service (Global)",
                    SanitizedName = "service",
                    IsSelected = true // Default selected
                });

                // Get configured pipelines
                var settings = await _configurationService.LoadConfigurationAsync<CamBridgeSettingsV2>();
                if (settings?.Pipelines != null)
                {
                    foreach (var pipeline in settings.Pipelines)
                    {
                        var displayName = $"{pipeline.Name}";
                        var sanitizedName = SanitizeForFileName(pipeline.Name);

                        AvailablePipelines.Add(displayName);
                        _pipelineNameMapping[displayName] = sanitizedName;

                        PipelineSelections.Add(new PipelineSelection
                        {
                            Name = displayName,
                            SanitizedName = sanitizedName,
                            IsSelected = false
                        });
                    }
                }

                // Also check for existing log files that might not be in config
                var logPath = ConfigurationPaths.GetLogsDirectory();
                if (Directory.Exists(logPath))
                {
                    var pipelineLogFiles = Directory.GetFiles(logPath, "pipeline_*.log")
                        .Select(Path.GetFileNameWithoutExtension)
                        .Where(f => f != null && f.StartsWith("pipeline_"))
                        .Select(f => f!.Substring("pipeline_".Length))
                        .Distinct();

                    foreach (var logName in pipelineLogFiles)
                    {
                        if (!_pipelineNameMapping.Values.Contains(logName))
                        {
                            var displayName = $"{logName} (Archived)";
                            AvailablePipelines.Add(displayName);
                            _pipelineNameMapping[displayName] = logName;

                            PipelineSelections.Add(new PipelineSelection
                            {
                                Name = displayName,
                                SanitizedName = logName,
                                IsSelected = false
                            });
                        }
                    }
                }

                // Listen for selection changes
                foreach (var selection in PipelineSelections)
                {
                    selection.PropertyChanged += OnPipelineSelectionChanged;
                }

                // Update initial count
                OnPropertyChanged(nameof(SelectedPipelineCount));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to load available pipelines");
            }
        }

        private async Task RefreshLogsAsync()
        {
            try
            {
                IsLoading = true;

                // Get selected pipelines
                var selectedPipelines = PipelineSelections.Where(p => p.IsSelected).ToList();
                if (!selectedPipelines.Any())
                {
                    CombinedLogEntries.Clear();
                    CorrelationGroups.Clear();
                    CurrentLogFiles = "No pipelines selected";
                    return;
                }

                // Update current files display
                CurrentLogFiles = string.Join(", ", selectedPipelines.Select(p => p.Name));

                // Collect all log entries from selected pipelines
                var allEntries = new List<LogEntry>();

                foreach (var pipeline in selectedPipelines)
                {
                    var logFileName = GetLogFileName(pipeline.Name);
                    var logPath = Path.Combine(ConfigurationPaths.GetLogsDirectory(), logFileName);

                    if (File.Exists(logPath))
                    {
                        // Read entries from this pipeline
                        var entries = await ReadLogFileAsync(logPath, pipeline.Name);
                        allEntries.AddRange(entries);
                    }
                }

                // Sort all entries by timestamp (millisecond precision)
                var sortedEntries = allEntries
                    .OrderBy(e => e.Timestamp)
                    .TakeLast(MaxDisplayedEntries)
                    .ToList();

                // Update collection efficiently (minimize UI updates)
                await Application.Current.Dispatcher.InvokeAsync(() =>
                {
                    // For auto-scroll, append only new entries to prevent flicker
                    if (IsAutoScrollEnabled && CombinedLogEntries.Count > 0)
                    {
                        // Find the last timestamp we have
                        var lastTimestamp = CombinedLogEntries.Last().Timestamp;

                        // Add only newer entries
                        var newEntries = sortedEntries
                            .Where(e => e.Timestamp > lastTimestamp)
                            .ToList();

                        foreach (var entry in newEntries)
                        {
                            CombinedLogEntries.Add(entry);

                            // Maintain max entries
                            if (CombinedLogEntries.Count > MaxDisplayedEntries)
                                CombinedLogEntries.RemoveAt(0);
                        }
                    }
                    else
                    {
                        // Full refresh when not auto-scrolling
                        CombinedLogEntries.Clear();
                        foreach (var entry in sortedEntries)
                        {
                            CombinedLogEntries.Add(entry);
                        }
                    }
                });

                TotalLineCount = CombinedLogEntries.Count;
                LastUpdateTime = DateTime.Now;
                ApplyFilters();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to refresh logs");
            }
            finally
            {
                IsLoading = false;
            }
        }

        private async Task<List<LogEntry>> ReadLogFileAsync(string logPath, string sourcePipeline)
        {
            var entries = new List<LogEntry>();

            try
            {
                _logger.LogInformation("Reading log file: {Path} for pipeline: {Pipeline}", logPath, sourcePipeline);

                using (var fs = new FileStream(logPath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
                using (var reader = new StreamReader(fs, Encoding.UTF8))
                {
                    string? line;
                    int lineCount = 0;
                    int parsedCount = 0;

                    while ((line = await reader.ReadLineAsync()) != null)
                    {
                        lineCount++;
                        var entry = ParseLogLine(line);
                        if (entry != null)
                        {
                            entry.Source = sourcePipeline; // Tag with source
                            entries.Add(entry);
                            parsedCount++;
                        }
                    }

                    _logger.LogInformation("Read {Lines} lines, parsed {Parsed} entries from {File}",
                        lineCount, parsedCount, Path.GetFileName(logPath));
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to read log file: {LogPath}", logPath);
            }

            return entries;
        }

        private LogEntry? ParseLogLine(string line)
        {
            if (string.IsNullOrWhiteSpace(line))
                return null;

            try
            {
                // DEBUG output for first few lines
                if (TotalLineCount < 10)
                {
                    Console.WriteLine($"[DEBUG] Parsing line: {line}");
                }

                // Try the REAL format from actual logs!
                // Format: [HH:mm:ss LEVEL] [CorrelationId] ["Stage"] Message [Duplicate]
                // Example: [23:56:28 INF] [F23562879-R0010168] ["FileDetected"] Processing file: R0010168.JPG [Processing file: R0010168.JPG]
                var realLogFormatMatch = Regex.Match(line,
                    @"^\[(\d{2}:\d{2}:\d{2})\s+(\w+)\]\s+\[([^\]]+)\]\s+\[""([^""]+)""\]\s+([^[]+)(?:\[.*\])?");

                if (realLogFormatMatch.Success)
                {
                    var timeStr = realLogFormatMatch.Groups[1].Value;
                    var levelStr = realLogFormatMatch.Groups[2].Value;
                    var correlationId = realLogFormatMatch.Groups[3].Value;
                    var stageStr = realLogFormatMatch.Groups[4].Value;
                    var message = realLogFormatMatch.Groups[5].Value.Trim();

                    // Parse timestamp (add today's date)
                    var timestamp = DateTime.ParseExact(timeStr, "HH:mm:ss", CultureInfo.InvariantCulture);
                    timestamp = DateTime.Today.Add(timestamp.TimeOfDay);

                    // Parse log level
                    var level = ParseLogLevel(levelStr);

                    // Parse stage
                    ProcessingStage? stage = null;
                    if (Enum.TryParse<ProcessingStage>(stageStr, true, out var parsedStage))
                    {
                        stage = parsedStage;
                    }

                    // Extract pipeline name if present at end of message
                    string? pipeline = null;
                    var pipelineMatch = Regex.Match(message, @"\[([^\]]+)\]\s*$");
                    if (pipelineMatch.Success)
                    {
                        pipeline = pipelineMatch.Groups[1].Value;
                        message = message.Substring(0, message.Length - pipelineMatch.Value.Length).Trim();
                    }

                    // Extract duration if present
                    int? durationMs = null;
                    var durationMatch = Regex.Match(message, @"\[(\d+)ms\]");
                    if (durationMatch.Success)
                    {
                        durationMs = int.Parse(durationMatch.Groups[1].Value);
                        message = message.Replace(durationMatch.Value, "").Trim();
                    }

                    // DEBUG output
                    if (TotalLineCount < 10)
                    {
                        Console.WriteLine($"[DEBUG] MATCHED REAL FORMAT: CorrelationId={correlationId}, Stage={stage}, Pipeline={pipeline}");
                    }

                    return new LogEntry
                    {
                        Timestamp = timestamp,
                        Level = level,
                        Message = message,
                        RawLine = line,
                        CorrelationId = correlationId,
                        Stage = stage,
                        Pipeline = pipeline,
                        DurationMs = durationMs
                    };
                }

                // First try the ACTUAL format from the logs
                // Example: [F00044243-R0010168] ["ExifExtraction"] Extracting EXIF metadata [Extracting EXIF metadata]
                // Note: Last part in brackets might be duplicated message - ignore it
                var actualFormatMatch = Regex.Match(line,
                    @"^\[([^\]]+)\]\s+\[""?([^\]""]+)""?\]\s+([^[]+)(?:\[.*\])?$");

                if (actualFormatMatch.Success)
                {
                    var correlationId = actualFormatMatch.Groups[1].Value;
                    var stageStr = actualFormatMatch.Groups[2].Value;
                    var message = actualFormatMatch.Groups[3].Value.Trim();

                    // Check if this is a real correlation ID (starts with letter + numbers)
                    if (Regex.IsMatch(correlationId, @"^[A-Z]\d{8,}"))
                    {
                        // Use current time since no timestamp in this format
                        var timestamp = DateTime.Now;

                        // Parse stage
                        ProcessingStage? stage = null;
                        if (Enum.TryParse<ProcessingStage>(stageStr, true, out var parsedStage))
                        {
                            stage = parsedStage;
                        }

                        // Determine log level from content
                        var level = DetermineLogLevel(stage, message);

                        // Extract pipeline name if present
                        string? pipeline = null;
                        var pipelineMatch = Regex.Match(message, @"\[([^\]]+)\]$");
                        if (pipelineMatch.Success)
                        {
                            pipeline = pipelineMatch.Groups[1].Value;
                            message = message.Substring(0, message.Length - pipelineMatch.Value.Length).Trim();
                        }

                        // DEBUG output
                        if (TotalLineCount < 10)
                        {
                            Console.WriteLine($"[DEBUG] Parsed NEW FORMAT: CorrelationId={correlationId}, Stage={stage}, Pipeline={pipeline}");
                        }

                        return new LogEntry
                        {
                            Timestamp = timestamp,
                            Level = level,
                            Message = message,
                            RawLine = line,
                            CorrelationId = correlationId,
                            Stage = stage,
                            Pipeline = pipeline
                        };
                    }
                }

                // ALSO try the timestamp format we expected
                // Example: 23:01:37.000 INF [F23013594-R0010168] ["ExifExtraction"] Extracting EXIF metadata completed
                var timestampFormatMatch = Regex.Match(line,
                    @"^(\d{2}:\d{2}:\d{2}\.\d{3})\s+(\w+)\s+\[([^\]]+)\]\s+\[""?([^\]""]+)""?\]\s+(.+)$");

                if (timestampFormatMatch.Success)
                {
                    var timeStr = timestampFormatMatch.Groups[1].Value;
                    var levelStr = timestampFormatMatch.Groups[2].Value;
                    var correlationId = timestampFormatMatch.Groups[3].Value;
                    var stageStr = timestampFormatMatch.Groups[4].Value;
                    var message = timestampFormatMatch.Groups[5].Value;

                    // Parse timestamp (add today's date)
                    var timestamp = DateTime.ParseExact(timeStr, "HH:mm:ss.fff", CultureInfo.InvariantCulture);
                    timestamp = DateTime.Today.Add(timestamp.TimeOfDay);

                    // Parse log level
                    var level = ParseLogLevel(levelStr);

                    // Parse stage
                    ProcessingStage? stage = null;
                    if (Enum.TryParse<ProcessingStage>(stageStr, true, out var parsedStage))
                    {
                        stage = parsedStage;
                    }

                    // Extract pipeline name from message if present
                    string? pipeline = null;
                    var pipelineMatch = Regex.Match(message, @"\[([\w\s]+)\]$");
                    if (pipelineMatch.Success)
                    {
                        pipeline = pipelineMatch.Groups[1].Value;
                        message = message.Substring(0, message.Length - pipelineMatch.Value.Length).Trim();
                    }

                    // Extract duration if present
                    int? durationMs = null;
                    var durationMatch = Regex.Match(message, @"\[(\d+)ms\]");
                    if (durationMatch.Success)
                    {
                        durationMs = int.Parse(durationMatch.Groups[1].Value);
                        message = message.Replace(durationMatch.Value, "").Trim();
                    }

                    return new LogEntry
                    {
                        Timestamp = timestamp,
                        Level = level,
                        Message = message,
                        RawLine = line,
                        CorrelationId = correlationId,
                        Stage = stage,
                        Pipeline = pipeline,
                        DurationMs = durationMs
                    };
                }

                // Try simpler correlation format without stage
                // Example: 23:01:37.000 DBG [F23013594-R0010168] Found barcode data in Barcode field
                var simpleCorrelationMatch = Regex.Match(line,
                    @"^(\d{2}:\d{2}:\d{2}\.\d{3})\s+(\w+)\s+\[([^\]]+)\]\s+(.+)$");

                if (simpleCorrelationMatch.Success)
                {
                    var timeStr = simpleCorrelationMatch.Groups[1].Value;
                    var levelStr = simpleCorrelationMatch.Groups[2].Value;
                    var correlationIdOrMessage = simpleCorrelationMatch.Groups[3].Value;
                    var remainingMessage = simpleCorrelationMatch.Groups[4].Value;

                    // Check if this looks like a correlation ID (starts with F followed by digits)
                    if (Regex.IsMatch(correlationIdOrMessage, @"^F\d{8,}"))
                    {
                        var timestamp = DateTime.ParseExact(timeStr, "HH:mm:ss.fff", CultureInfo.InvariantCulture);
                        timestamp = DateTime.Today.Add(timestamp.TimeOfDay);

                        return new LogEntry
                        {
                            Timestamp = timestamp,
                            Level = ParseLogLevel(levelStr),
                            Message = remainingMessage,
                            RawLine = line,
                            CorrelationId = correlationIdOrMessage
                        };
                    }
                }

                // Fallback to standard Serilog format WITHOUT correlation
                // Example: [14:23:45 INF] Pipeline Radiology started
                var standardMatch = Regex.Match(line, @"^\[?(\d{2}:\d{2}:\d{2}(?:\.\d{3})?)\s+(\w+)\]?\s+(.+)$");

                if (standardMatch.Success)
                {
                    var timeStr = standardMatch.Groups[1].Value;
                    var levelStr = standardMatch.Groups[2].Value;
                    var message = standardMatch.Groups[3].Value;

                    // Parse timestamp
                    DateTime timestamp;
                    if (timeStr.Contains('.'))
                    {
                        timestamp = DateTime.ParseExact(timeStr, "HH:mm:ss.fff", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        timestamp = DateTime.ParseExact(timeStr, "HH:mm:ss", CultureInfo.InvariantCulture);
                    }

                    // Add today's date
                    timestamp = DateTime.Today.Add(timestamp.TimeOfDay);

                    var level = ParseLogLevel(levelStr);

                    return new LogEntry
                    {
                        Timestamp = timestamp,
                        Level = level,
                        Message = message,
                        RawLine = line
                    };
                }

                // Last resort - just treat as info message
                return new LogEntry
                {
                    Timestamp = DateTime.Now,
                    Level = LogLevel.Information,
                    Message = line,
                    RawLine = line
                };
            }
            catch (Exception ex)
            {
                _logger.LogDebug(ex, "Failed to parse log line: {Line}", line);
                // Return the line as-is
                return new LogEntry
                {
                    Timestamp = DateTime.Now,
                    Level = LogLevel.Information,
                    Message = line,
                    RawLine = line
                };
            }
        }

        private LogLevel DetermineLogLevel(ProcessingStage? stage, string message)
        {
            // Check stage first
            if (stage == ProcessingStage.Error)
                return LogLevel.Error;

            // Check message content
            var messageLower = message.ToLowerInvariant();
            if (messageLower.Contains("error") || messageLower.Contains("failed"))
                return LogLevel.Error;

            if (messageLower.Contains("warning") || messageLower.Contains("warn") || messageLower.Contains("slow"))
                return LogLevel.Warning;

            if (messageLower.Contains("debug"))
                return LogLevel.Debug;

            // Default to Information
            return LogLevel.Information;
        }

        private LogLevel ParseLogLevel(string levelStr)
        {
            return levelStr.ToUpperInvariant() switch
            {
                "DBG" or "DEB" or "DEBUG" => LogLevel.Debug,
                "INF" or "INFO" or "INFORMATION" => LogLevel.Information,
                "WRN" or "WARN" or "WARNING" => LogLevel.Warning,
                "ERR" or "ERROR" => LogLevel.Error,
                "CRT" or "CRIT" or "CRITICAL" or "FTL" or "FATAL" => LogLevel.Critical,
                _ => LogLevel.Information  // Default to Information instead of failing
            };
        }

        private void ClearLogs()
        {
            LogEntries.Clear();
            CombinedLogEntries.Clear();
            FilteredCombinedEntries.Clear();
            CorrelationGroups.Clear();
            TotalLineCount = 0;
            _filePositions.Clear();
        }

        private async Task ExportLogsAsync()
        {
            try
            {
                // Create export dialog
                var dialog = new Microsoft.Win32.SaveFileDialog
                {
                    Filter = "Log files (*.log)|*.log|Text files (*.txt)|*.txt|All files (*.*)|*.*",
                    DefaultExt = ".log",
                    FileName = $"CamBridge_Export_{DateTime.Now:yyyyMMdd_HHmmss}.log"
                };

                if (dialog.ShowDialog() == true)
                {
                    var sb = new StringBuilder();

                    if (IsTreeViewEnabled)
                    {
                        // Export tree structure
                        foreach (var group in CorrelationGroups)
                        {
                            sb.AppendLine($"=== Correlation: {group.CorrelationId} ===");
                            sb.AppendLine($"Pipeline: {group.Pipeline}");
                            sb.AppendLine($"Duration: {group.DurationText}");
                            sb.AppendLine($"Status: {group.Status}");
                            sb.AppendLine();

                            foreach (var stage in group.Stages)
                            {
                                sb.AppendLine($"  Stage: {stage.Stage} [{stage.DurationText}]");
                                foreach (var entry in stage.Entries)
                                {
                                    sb.AppendLine($"    {entry.Timestamp:yyyy-MM-dd HH:mm:ss.fff} {entry.LevelText} {entry.Message}");
                                }
                                sb.AppendLine();
                            }

                            if (group.UngroupedEntries.Any())
                            {
                                sb.AppendLine("  [Ungrouped Entries]");
                                foreach (var entry in group.UngroupedEntries)
                                {
                                    sb.AppendLine($"    {entry.Timestamp:yyyy-MM-dd HH:mm:ss.fff} {entry.LevelText} {entry.Message}");
                                }
                                sb.AppendLine();
                            }

                            sb.AppendLine(new string('=', 50));
                            sb.AppendLine();
                        }
                    }
                    else
                    {
                        // Export flat list
                        var lines = FilteredCombinedEntries.Select(e => e.RawLine ??
                            $"{e.Timestamp:yyyy-MM-dd HH:mm:ss.fff} {e.LevelText} [{e.CorrelationId}] [{e.Stage}] {e.Message}");
                        foreach (var line in lines)
                        {
                            sb.AppendLine(line);
                        }
                    }

                    await File.WriteAllTextAsync(dialog.FileName, sb.ToString(), Encoding.UTF8);

                    _logger.LogInformation("Exported {Count} log entries to {FileName}",
                        IsTreeViewEnabled ? CorrelationGroups.Sum(g => g.TotalEntries) : FilteredCombinedEntries.Count,
                        dialog.FileName);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to export logs");
            }
        }

        private string GetLogFileName(string pipelineSelection)
        {
            var today = DateTime.Now.ToString("yyyyMMdd");

            if (pipelineSelection == "Service (Global)")
            {
                return $"service_{today}.log";
            }

            if (pipelineSelection == "All Pipelines (Legacy)")
            {
                return $"pipelines_{today}.log";
            }

            // Get sanitized name from mapping
            if (_pipelineNameMapping.TryGetValue(pipelineSelection, out var sanitizedName))
            {
                return $"pipeline_{sanitizedName}_{today}.log";
            }

            // Fallback - sanitize the selection directly
            var safeName = SanitizeForFileName(pipelineSelection.Replace(" (Archived)", ""));
            return $"pipeline_{safeName}_{today}.log";
        }

        private string SanitizeForFileName(string pipelineName)
        {
            // Replace invalid filename characters and common separators
            var invalid = Path.GetInvalidFileNameChars()
                .Concat(new[] { ' ', '.', ',', '/', '\\', ':', '-' })
                .Distinct()
                .ToArray();

            var sanitized = string.Join("_", pipelineName.Split(invalid, StringSplitOptions.RemoveEmptyEntries));

            // Limit length
            if (sanitized.Length > 100)
            {
                sanitized = sanitized.Substring(0, 97) + "...";
            }

            return sanitized;
        }

        private void OnRefreshTimer(object? state)
        {
            if (IsAutoScrollEnabled && !IsLoading)
            {
                _ = RefreshLogsAsync();
            }
        }

        private void OnPipelineSelectionChanged(object? sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(PipelineSelection.IsSelected))
            {
                // Update count
                OnPropertyChanged(nameof(SelectedPipelineCount));

                // Update current files display
                var selectedNames = PipelineSelections.Where(p => p.IsSelected).Select(p => p.Name).ToList();
                CurrentLogFiles = selectedNames.Any()
                    ? string.Join(", ", selectedNames)
                    : "No pipelines selected";

                // Refresh logs with new selection
                _ = RefreshLogsAsync();
            }
        }

        partial void OnSearchTextChanged(string? value)
        {
            // Debounce search to avoid too many updates
            ApplyFilters();
        }

        partial void OnShowDebugChanged(bool value)
        {
            ApplyFilters();
            OnPropertyChanged(nameof(SelectedLevelCount));
        }

        partial void OnShowInformationChanged(bool value)
        {
            ApplyFilters();
            OnPropertyChanged(nameof(SelectedLevelCount));
        }

        partial void OnShowWarningChanged(bool value)
        {
            ApplyFilters();
            OnPropertyChanged(nameof(SelectedLevelCount));
        }

        partial void OnShowErrorChanged(bool value)
        {
            ApplyFilters();
            OnPropertyChanged(nameof(SelectedLevelCount));
        }

        partial void OnShowCriticalChanged(bool value)
        {
            ApplyFilters();
            OnPropertyChanged(nameof(SelectedLevelCount));
        }

        partial void OnIsTreeViewEnabledChanged(bool value)
        {
            ApplyFilters();
        }

        partial void OnFilter1Changed(string value)
        {
            ApplyFilters();
        }

        partial void OnFilter2Changed(string value)
        {
            ApplyFilters();
        }

        partial void OnFilter3Changed(string value)
        {
            ApplyFilters();
        }
    }

    /// <summary>
    /// Enhanced log entry with correlation support
    /// </summary>
    public class LogEntry
    {
        public DateTime Timestamp { get; set; }
        public LogLevel Level { get; set; }
        public string Message { get; set; } = string.Empty;
        public string? RawLine { get; set; }
        public string Source { get; set; } = string.Empty; // Which log file this came from

        // Enhanced properties for correlation
        public string? CorrelationId { get; set; }
        public ProcessingStage? Stage { get; set; }
        public string? Pipeline { get; set; }
        public int? DurationMs { get; set; }

        // UI Helper Properties
        public string LevelText => Level switch
        {
            LogLevel.Debug => "DBG",
            LogLevel.Information => "INF",
            LogLevel.Warning => "WRN",
            LogLevel.Error => "ERR",
            LogLevel.Critical => "CRT",
            _ => "???"
        };

        public string LevelColor => Level switch
        {
            LogLevel.Debug => "#808080",      // Gray
            LogLevel.Information => "#0078D4", // Blue
            LogLevel.Warning => "#FFA500",     // Orange
            LogLevel.Error => "#FF0000",       // Red
            LogLevel.Critical => "#8B0000",    // Dark Red
            _ => "#000000"
        };

        // FIXED emoji icons!
        public string StageIcon => Stage switch
        {
            ProcessingStage.ServiceStartup => "ðŸš€",
            ProcessingStage.ConfigurationLoading => "âš™ï¸",
            ProcessingStage.PipelineInitialization => "ðŸ”§",
            ProcessingStage.ServiceShutdown => "ðŸ›‘",
            ProcessingStage.FileDetected => "ðŸ“„",
            ProcessingStage.ExifExtraction => "ðŸ“·",
            ProcessingStage.TagMapping => "ðŸ”„",
            ProcessingStage.DicomConversion => "ðŸ¥",
            ProcessingStage.PostProcessing => "ðŸ“‹",
            ProcessingStage.PacsUpload => "â˜ï¸",
            ProcessingStage.Complete => "âœ…",
            ProcessingStage.Error => "âŒ",
            _ => "ðŸ“"
        };

        public string FormattedDuration => DurationMs.HasValue ? $"{DurationMs}ms" : "";
    }

    /// <summary>
    /// Represents a group of log entries with the same correlation ID
    /// </summary>
    public class CorrelationGroup : ObservableObject
    {
        private bool _isExpanded;

        public string CorrelationId { get; set; } = string.Empty;
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Pipeline { get; set; } = string.Empty;
        public ProcessingStatus Status { get; set; }
        public ObservableCollection<StageGroup> Stages { get; } = new();
        public ObservableCollection<LogEntry> UngroupedEntries { get; } = new();

        public bool IsExpanded
        {
            get => _isExpanded;
            set => SetProperty(ref _isExpanded, value);
        }

        public TimeSpan Duration => EndTime - StartTime;
        public string DurationText => $"{Duration.TotalMilliseconds:0}ms";
        public int TotalEntries => Stages.Sum(s => s.Entries.Count) + UngroupedEntries.Count;

        // FIXED emoji icons!
        public string StatusIcon => Status switch
        {
            ProcessingStatus.Completed => "âœ…",
            ProcessingStatus.Failed => "âŒ",
            ProcessingStatus.InProgress => "â³",
            _ => "â“"
        };

        public string StatusColor => Status switch
        {
            ProcessingStatus.Completed => "#4CAF50",
            ProcessingStatus.Failed => "#F44336",
            ProcessingStatus.InProgress => "#FFA500",
            _ => "#808080"
        };
    }

    /// <summary>
    /// Represents a group of log entries for a specific processing stage
    /// </summary>
    public class StageGroup : ObservableObject
    {
        private bool _isExpanded;

        public ProcessingStage Stage { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public ObservableCollection<LogEntry> Entries { get; } = new();

        public bool IsExpanded
        {
            get => _isExpanded;
            set => SetProperty(ref _isExpanded, value);
        }

        public TimeSpan Duration => EndTime - StartTime;
        public string DurationText => $"{Duration.TotalMilliseconds:0}ms";

        public string StageIcon => Entries.FirstOrDefault()?.StageIcon ?? "ðŸ“";
    }

    /// <summary>
    /// Processing status for correlation groups
    /// </summary>
    public enum ProcessingStatus
    {
        Unknown,
        InProgress,
        Completed,
        Failed
    }
}



=== src\CamBridge.Infrastructure\Services\FileProcessor.cs ===
// src/CamBridge.Infrastructure/Services/FileProcessor.cs
// Version: 0.8.6
// Description: Pipeline-aware file processor with LogContext integration
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using CamBridge.Core;
using CamBridge.Core.Entities;
using CamBridge.Core.Interfaces;
using CamBridge.Core.ValueObjects;
using CamBridge.Core.Logging;
using CamBridge.Core.Enums; // FIXED: Import LogVerbosity from correct namespace
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;

namespace CamBridge.Infrastructure.Services
{
    /// <summary>
    /// Orchestrates the complete JPEG to DICOM conversion process for a specific pipeline
    /// ENHANCED: Now uses LogContext for structured hierarchical logging
    /// </summary>
    public class FileProcessor
    {
        private readonly ILogger _logger;
        private readonly ExifToolReader _exifToolReader;
        private readonly DicomConverter _dicomConverter;
        private readonly PipelineConfiguration _pipelineConfig;
        private readonly DicomSettings _dicomSettings;
        private readonly IDicomTagMapper? _tagMapper;
        private readonly IMappingConfiguration? _mappingConfiguration;
        private readonly PacsUploadQueue? _pacsUploadQueue;
        private readonly LogVerbosity _logVerbosity;

        public event EventHandler<FileProcessingEventArgs>? ProcessingStarted;
        public event EventHandler<FileProcessingEventArgs>? ProcessingCompleted;
        public event EventHandler<FileProcessingErrorEventArgs>? ProcessingError;

        /// <summary>
        /// Creates a FileProcessor for a specific pipeline with optional PACS upload support
        /// </summary>
        public FileProcessor(
            ILogger logger,
            ExifToolReader exifToolReader,
            DicomConverter dicomConverter,
            PipelineConfiguration pipelineConfig,
            DicomSettings globalDicomSettings,
            IDicomTagMapper? tagMapper = null,
            IMappingConfiguration? mappingConfiguration = null,
            PacsUploadQueue? pacsUploadQueue = null,
            LogVerbosity logVerbosity = LogVerbosity.Detailed)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            _exifToolReader = exifToolReader ?? throw new ArgumentNullException(nameof(exifToolReader));
            _dicomConverter = dicomConverter ?? throw new ArgumentNullException(nameof(dicomConverter));
            _pipelineConfig = pipelineConfig ?? throw new ArgumentNullException(nameof(pipelineConfig));
            _dicomSettings = ApplyDicomOverrides(globalDicomSettings, pipelineConfig.DicomOverrides);
            _tagMapper = tagMapper;
            _mappingConfiguration = mappingConfiguration;
            _pacsUploadQueue = pacsUploadQueue;
            _logVerbosity = logVerbosity;

            _logger.LogDebug("Created FileProcessor for pipeline: {PipelineName} (\"{PipelineId}\")",
                pipelineConfig.Name, pipelineConfig.Id);

            if (_pacsUploadQueue != null)
            {
                _logger.LogInformation("PACS upload queue attached to pipeline: {PipelineName}",
                    pipelineConfig.Name);
            }
        }

        /// <summary>
        /// Processes a single JPEG file through the pipeline using LogContext
        /// </summary>
        public async Task<FileProcessingResult> ProcessFileAsync(string filePath)
        {
            // Generate correlation ID and create LogContext
            var correlationId = GenerateCorrelationId(filePath);
            var logContext = _logger.CreateContext(correlationId, _pipelineConfig.Name, _logVerbosity);

            var result = new FileProcessingResult
            {
                SourceFile = filePath,
                StartTime = DateTime.UtcNow,
                PipelineId = _pipelineConfig.Id,
                CorrelationId = correlationId
            };

            try
            {
                using (logContext.BeginStage(ProcessingStage.FileDetected, $"Processing file: {Path.GetFileName(filePath)}"))
                {
                    ProcessingStarted?.Invoke(this, new FileProcessingEventArgs
                    {
                        FilePath = filePath,
                        CorrelationId = correlationId,
                        PipelineName = _pipelineConfig.Name,
                        Stage = ProcessingStage.FileDetected
                    });

                    // Validate input file
                    ValidateInputFile(filePath);
                }

                // Extract EXIF data with timing
                ImageMetadata? metadata;
                using (logContext.BeginStage(ProcessingStage.ExifExtraction, "Extracting EXIF metadata"))
                {
                    metadata = await _exifToolReader.ExtractMetadataAsync(filePath);

                    if (metadata == null)
                    {
                        logContext.LogWarning("Failed to extract metadata, creating default DICOM with minimal tags");
                        metadata = CreateDefaultMetadata(filePath);
                    }
                    else if (metadata.Patient != null)
                    {
                        logContext.LogInformation($"Patient: {metadata.Patient.PatientName}");
                    }
                }

                // Apply tag mapping if configured
                if (_tagMapper != null && _mappingConfiguration != null)
                {
                    using (logContext.BeginStage(ProcessingStage.TagMapping, "Applying tag mapping rules"))
                    {
                        var mappingRules = _mappingConfiguration.GetMappingRules();
                        if (mappingRules.Any())
                        {
                            logContext.LogDebug($"Applying {mappingRules.Count()} mapping rules");
                        }
                    }
                }

                // Determine output path based on pipeline configuration
                var outputPath = DetermineOutputPath(metadata, filePath);

                // Ensure output directory exists
                var outputDir = Path.GetDirectoryName(outputPath);
                if (!string.IsNullOrEmpty(outputDir))
                {
                    Directory.CreateDirectory(outputDir);
                }

                // Convert to DICOM with timing
                ConversionResult conversionResult;
                using (logContext.BeginStage(ProcessingStage.DicomConversion, $"Converting to DICOM: {Path.GetFileName(outputPath)}"))
                {
                    // Create converter with mapper if available
                    var converterWithMapping = new DicomConverter(
                        _logger as ILogger<DicomConverter> ?? Microsoft.Extensions.Logging.Abstractions.NullLogger<DicomConverter>.Instance,
                        _tagMapper,
                        _mappingConfiguration);

                    conversionResult = await converterWithMapping.ConvertToDicomAsync(
                        filePath,
                        outputPath,
                        metadata);
                }

                result.Success = conversionResult.Success;
                result.OutputFile = outputPath;
                result.DicomFile = outputPath;
                result.EndTime = DateTime.UtcNow;
                result.ProcessingTimeMs = (long)(result.EndTime - result.StartTime).TotalMilliseconds;

                if (result.Success)
                {
                    // Queue for PACS upload if enabled
                    if (_pacsUploadQueue != null && _pipelineConfig.PacsConfiguration?.Enabled == true)
                    {
                        using (logContext.BeginStage(ProcessingStage.PacsUpload, $"Queueing for PACS upload to {_pipelineConfig.PacsConfiguration.Host}:{_pipelineConfig.PacsConfiguration.Port}"))
                        {
                            try
                            {
                                await _pacsUploadQueue.EnqueueAsync(conversionResult.DicomFilePath!, correlationId);
                            }
                            catch (Exception ex)
                            {
                                logContext.LogError(ex, "Failed to queue DICOM for PACS upload");
                                // Don't fail the overall processing if PACS queue fails
                            }
                        }
                    }

                    // Handle post-processing
                    using (logContext.BeginStage(ProcessingStage.PostProcessing, "Performing post-processing"))
                    {
                        await HandlePostProcessingAsync(filePath, outputPath, result.Success, logContext);
                    }

                    // Final success log
                    using (logContext.BeginStage(ProcessingStage.Complete, $"Successfully processed {Path.GetFileName(filePath)}"))
                    {
                        // Performance warning for slow processing
                        if (result.ProcessingTimeMs > 5000)
                        {
                            logContext.LogWarning($"Slow processing detected: {result.ProcessingTimeMs}ms");
                        }

                        ProcessingCompleted?.Invoke(this, new FileProcessingEventArgs
                        {
                            FilePath = filePath,
                            OutputPath = outputPath,
                            CorrelationId = correlationId,
                            PipelineName = _pipelineConfig.Name,
                            Stage = ProcessingStage.Complete
                        });
                    }
                }
                else
                {
                    throw new InvalidOperationException(
                        $"DICOM conversion failed: {conversionResult.ErrorMessage}");
                }
            }
            catch (Exception ex)
            {
                result.Success = false;
                result.ErrorMessage = ex.Message;
                result.EndTime = DateTime.UtcNow;
                result.ProcessingTimeMs = (long)(result.EndTime - result.StartTime).TotalMilliseconds;

                using (logContext.BeginStage(ProcessingStage.Error, $"Processing failed: {ex.Message}"))
                {
                    logContext.LogError(ex, $"Failed to process {Path.GetFileName(filePath)}");

                    // Critical error detection
                    if (ex is UnauthorizedAccessException && filePath.StartsWith(_pipelineConfig.WatchSettings.Path))
                    {
                        _logger.LogCritical(ex, "[{CorrelationId}] [Error] Cannot access watch folder {Path} - pipeline will fail! [{Pipeline}]",
                            correlationId, _pipelineConfig.WatchSettings.Path, _pipelineConfig.Name);
                    }

                    // Handle failure post-processing
                    await HandlePostProcessingAsync(filePath, null, false, logContext);

                    ProcessingError?.Invoke(this, new FileProcessingErrorEventArgs
                    {
                        FilePath = filePath,
                        Error = ex,
                        CorrelationId = correlationId,
                        PipelineName = _pipelineConfig.Name,
                        Stage = ProcessingStage.Error
                    });
                }
            }

            return result;
        }

        /// <summary>
        /// Handles post-processing with LogContext
        /// </summary>
        private async Task HandlePostProcessingAsync(string sourceFilePath, string? dicomFilePath, bool success, LogContext logContext)
        {
            var action = success
                ? _pipelineConfig.ProcessingOptions.SuccessAction
                : _pipelineConfig.ProcessingOptions.FailureAction;

            try
            {
                logContext.LogDebug($"Performing {action} on source file");

                switch (action)
                {
                    case PostProcessingAction.Delete:
                        // Delete only the source file
                        if (File.Exists(sourceFilePath))
                        {
                            File.Delete(sourceFilePath);
                            logContext.LogDebug("Deleted source file");
                        }
                        break;

                    case PostProcessingAction.Archive:
                        var jpegArchiveFolder = _pipelineConfig.ProcessingOptions.BackupFolder
                            ?? Path.Combine(_pipelineConfig.ProcessingOptions.ArchiveFolder, "ProcessedJPEGs");

                        var archivePath = Path.Combine(
                            jpegArchiveFolder,
                            Path.GetFileName(sourceFilePath));

                        Directory.CreateDirectory(Path.GetDirectoryName(archivePath)!);

                        if (File.Exists(sourceFilePath))
                        {
                            File.Move(sourceFilePath, archivePath, true);
                            logContext.LogDebug($"Archived source JPEG to {Path.GetFullPath(archivePath)}");
                        }

                        // DICOM file stays in output folder
                        if (success && !string.IsNullOrEmpty(dicomFilePath))
                        {
                            logContext.LogInformation($"DICOM file created at: {Path.GetFullPath(dicomFilePath)}");
                        }
                        break;

                    case PostProcessingAction.MoveToError:
                        // Move source file to error folder (typically for failures)
                        if (!success)
                        {
                            await MoveToErrorFolderAsync(sourceFilePath, "Processing failed", logContext);

                            // If DICOM was partially created, clean it up
                            if (!string.IsNullOrEmpty(dicomFilePath) && File.Exists(dicomFilePath))
                            {
                                try
                                {
                                    File.Delete(dicomFilePath);
                                    logContext.LogDebug("Cleaned up partial DICOM file");
                                }
                                catch (Exception ex)
                                {
                                    logContext.LogWarning($"Failed to clean up partial DICOM: {ex.Message}");
                                }
                            }
                        }
                        break;

                    default:
                        // Leave files as-is
                        logContext.LogDebug("No post-processing action");
                        break;
                }
            }
            catch (Exception ex)
            {
                logContext.LogWarning($"Failed to perform {action}: {ex.Message}");
                // Don't fail the overall processing for post-processing errors
            }
        }

        private async Task MoveToErrorFolderAsync(string filePath, string errorMessage, LogContext logContext)
        {
            try
            {
                var errorFolder = _pipelineConfig.ProcessingOptions.ErrorFolder;
                Directory.CreateDirectory(errorFolder);

                var errorFileName = $"{Path.GetFileNameWithoutExtension(filePath)}" +
                                   $"_{DateTime.Now:yyyyMMdd_HHmmss}" +
                                   $"{Path.GetExtension(filePath)}";

                var errorPath = Path.Combine(errorFolder, errorFileName);

                // Write error info file
                var errorInfoPath = Path.ChangeExtension(errorPath, ".error.txt");
                await File.WriteAllTextAsync(errorInfoPath,
                    $"Error Time: {DateTime.Now:yyyy-MM-dd HH:mm:ss}\n" +
                    $"Pipeline: {_pipelineConfig.Name}\n" +
                    $"Source File: {filePath}\n" +
                    $"Correlation ID: {logContext.CorrelationId}\n" +
                    $"Error: {errorMessage}");

                // Move the file
                if (File.Exists(filePath))
                {
                    File.Move(filePath, errorPath, true);
                    logContext.LogDebug("Moved failed file to error folder");
                }
            }
            catch (Exception ex)
            {
                logContext.LogError(ex, "Failed to move file to error folder");
            }
        }

        // Rest of the methods remain the same...

        /// <summary>
        /// Determines if a file should be processed based on pipeline configuration
        /// </summary>
        public bool ShouldProcessFile(string filePath)
        {
            try
            {
                var fileInfo = new FileInfo(filePath);
                var extension = fileInfo.Extension.ToLowerInvariant();

                // Check file extension
                var filePattern = _pipelineConfig.WatchSettings.FilePattern;
                var patterns = string.IsNullOrEmpty(filePattern)
                    ? new[] { "*.jpg", "*.jpeg" }
                    : filePattern.Split(';', StringSplitOptions.RemoveEmptyEntries);

                var isValidExtension = patterns.Any(pattern =>
                {
                    var patternExt = Path.GetExtension(pattern).ToLowerInvariant();
                    return patternExt == extension || patternExt == ".*";
                });

                if (!isValidExtension)
                {
                    return false;
                }

                // Check file age
                if (_pipelineConfig.ProcessingOptions.MaxFileAge.HasValue)
                {
                    var age = DateTime.UtcNow - fileInfo.CreationTimeUtc;
                    if (age > _pipelineConfig.ProcessingOptions.MaxFileAge.Value)
                    {
                        _logger.LogDebug("File {FileName} is too old ({Age} days)",
                            fileInfo.Name, age.TotalDays);
                        return false;
                    }
                }

                // Check file size
                if (_pipelineConfig.ProcessingOptions.MinimumFileSizeBytes.HasValue &&
                    fileInfo.Length < _pipelineConfig.ProcessingOptions.MinimumFileSizeBytes.Value)
                {
                    _logger.LogDebug("File {FileName} is too small ({Size} bytes)",
                        fileInfo.Name, fileInfo.Length);
                    return false;
                }

                if (_pipelineConfig.ProcessingOptions.MaximumFileSizeBytes.HasValue &&
                    fileInfo.Length > _pipelineConfig.ProcessingOptions.MaximumFileSizeBytes.Value)
                {
                    _logger.LogDebug("File {FileName} is too large ({Size} bytes)",
                        fileInfo.Name, fileInfo.Length);
                    return false;
                }

                return true;
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Error checking file {FilePath}", filePath);
                return false;
            }
        }

        private string GenerateCorrelationId(string filePath)
        {
            // Format: F{HHmmssff}-{FilePrefix8}
            // Example: F10234512-IMG_1234
            var timestamp = DateTime.Now.ToString("HHmmssff");
            var fileNameWithoutExt = Path.GetFileNameWithoutExtension(filePath);
            var filePrefix = fileNameWithoutExt.Length > 8
                ? fileNameWithoutExt.Substring(0, 8)
                : fileNameWithoutExt;

            return $"F{timestamp}-{filePrefix}";
        }

        private void ValidateInputFile(string filePath)
        {
            if (!File.Exists(filePath))
            {
                throw new FileNotFoundException($"Source file not found: {filePath}");
            }

            var extension = Path.GetExtension(filePath).ToLowerInvariant();
            if (extension != ".jpg" && extension != ".jpeg")
            {
                throw new InvalidOperationException($"Invalid file type: {extension}. Expected JPEG file.");
            }
        }

        private string DetermineOutputPath(ImageMetadata metadata, string sourceFile)
        {
            // FIXED: Use ArchiveFolder as DICOM output if no OutputPath configured
            var baseOutputPath = _pipelineConfig.WatchSettings.OutputPath;

            if (string.IsNullOrEmpty(baseOutputPath))
            {
                // Fallback to ArchiveFolder if no OutputPath (current config behavior)
                baseOutputPath = _pipelineConfig.ProcessingOptions.ArchiveFolder;
                _logger.LogWarning("No OutputPath in WatchSettings, using ArchiveFolder as output: {Path}",
                    Path.GetFullPath(baseOutputPath));
            }

            // ALWAYS make path absolute!
            if (!Path.IsPathRooted(baseOutputPath))
            {
                // If relative path, make it relative to service executable location
                var serviceDir = AppDomain.CurrentDomain.BaseDirectory;
                baseOutputPath = Path.Combine(serviceDir, baseOutputPath);
                _logger.LogWarning("OutputPath was relative, converted to absolute: {Path}",
                    Path.GetFullPath(baseOutputPath));
            }

            _logger.LogDebug("Base output path for pipeline {Pipeline}: {Path}",
                _pipelineConfig.Name, Path.GetFullPath(baseOutputPath));

            var organization = _pipelineConfig.ProcessingOptions.OutputOrganization;
            var fileName = Path.GetFileNameWithoutExtension(sourceFile);

            // Build organized path based on configuration
            var outputDir = baseOutputPath;

            switch (organization)
            {
                case OutputOrganization.ByPatient:
                    if (!string.IsNullOrEmpty(metadata.Patient?.PatientName))
                    {
                        var safeName = SanitizeForPath(metadata.Patient.PatientName);
                        outputDir = Path.Combine(baseOutputPath, safeName);
                        _logger.LogDebug("Output organized by patient: {PatientName} -> {SafeName}",
                            metadata.Patient.PatientName, safeName);
                    }
                    else
                    {
                        outputDir = Path.Combine(baseOutputPath, "Unknown Patient");
                        _logger.LogWarning("No patient name found, using 'Unknown Patient' folder");
                    }
                    break;

                case OutputOrganization.ByDate:
                    // ALWAYS use current date for organization
                    var dateFolder = DateTime.Now.ToString("yyyy-MM-dd");
                    outputDir = Path.Combine(baseOutputPath, dateFolder);
                    _logger.LogDebug("Output organized by date: {Date}", dateFolder);
                    break;

                case OutputOrganization.ByPatientAndDate:
                    if (!string.IsNullOrEmpty(metadata.Patient?.PatientName))
                    {
                        var safeName = SanitizeForPath(metadata.Patient.PatientName);
                        // ALWAYS use current date for organization
                        var dateFolder2 = DateTime.Now.ToString("yyyy-MM-dd");
                        outputDir = Path.Combine(baseOutputPath, safeName, dateFolder2);
                        _logger.LogDebug("Output organized by patient/date: {PatientName}/{Date}",
                            safeName, dateFolder2);
                    }
                    else
                    {
                        var dateFolder3 = DateTime.Now.ToString("yyyy-MM-dd");
                        outputDir = Path.Combine(baseOutputPath, "Unknown Patient", dateFolder3);
                        _logger.LogWarning("No patient name found, using 'Unknown Patient/{Date}' folder", dateFolder3);
                    }
                    break;

                case OutputOrganization.None:
                default:
                    // Use base output path as-is
                    break;
            }

            // Add DICOM extension
            var dicomPath = Path.Combine(outputDir, $"{fileName}.dcm");

            // CRITICAL: ALWAYS return ABSOLUTE path!
            var absolutePath = Path.GetFullPath(dicomPath);
            _logger.LogInformation("Determined DICOM output path: {FullPath}", absolutePath);
            return absolutePath;
        }

        private string SanitizeForPath(string input)
        {
            var invalid = Path.GetInvalidFileNameChars()
                .Concat(Path.GetInvalidPathChars())
                .Distinct()
                .ToArray();

            return string.Join("_", input.Split(invalid, StringSplitOptions.RemoveEmptyEntries));
        }

        private DicomSettings ApplyDicomOverrides(DicomSettings global, DicomOverrides? overrides)
        {
            if (overrides == null)
                return global;

            // Create a copy of global settings with overrides applied
            var settings = new DicomSettings
            {
                InstitutionName = overrides.InstitutionName ?? global.InstitutionName,
                InstitutionDepartment = overrides.InstitutionDepartment ?? global.InstitutionDepartment,
                StationName = global.StationName,
                SourceApplicationEntityTitle = global.SourceApplicationEntityTitle,
                ImplementationVersionName = global.ImplementationVersionName,
                ImplementationClassUid = global.ImplementationClassUid,
                Modality = global.Modality,
                ValidateAfterCreation = global.ValidateAfterCreation
            };

            _logger.LogDebug("Applied DICOM overrides for pipeline: {PipelineName}", _pipelineConfig.Name);
            return settings;
        }

        /// <summary>
        /// Creates minimal default metadata when extraction fails
        /// </summary>
        private ImageMetadata CreateDefaultMetadata(string sourceFile)
        {
            var fileName = Path.GetFileNameWithoutExtension(sourceFile);
            var now = DateTime.Now;

            _logger.LogWarning("Creating default metadata for {FileName} with date {Date}",
                fileName, now.ToString("yyyy-MM-dd"));

            // Create default patient info with constructor
            var patientId = new PatientId($"DEFAULT_{now:yyyyMMddHHmmss}");
            var patient = new PatientInfo(
                id: patientId,
                name: "Unknown Patient",
                birthDate: null,
                gender: Gender.Other
            );

            // Create default study info with constructor
            var studyId = new StudyId(Guid.NewGuid().ToString().Substring(0, 16)); // Max 16 chars
            var study = new StudyInfo(
                studyId: studyId,
                examId: null,
                description: "CamBridge JPEG to DICOM Conversion",
                modality: "XC",  // Photographic Image
                studyDate: now,
                accessionNumber: $"ACC{now:yyyyMMddHHmmss}",
                referringPhysician: null,
                comment: null
            );

            // Create technical data (minimal)
            var technicalData = new ImageTechnicalData
            {
                Manufacturer = "Unknown",
                Model = "Unknown"
            };

            // Create EXIF data dictionary
            var exifData = new Dictionary<string, string>
            {
                ["FileName"] = fileName,
                ["FileDate"] = now.ToString("yyyy-MM-dd HH:mm:ss"),
                ["Source"] = "CamBridge Default"
            };

            // Create metadata with full constructor
            var metadata = new ImageMetadata(
                sourceFilePath: sourceFile,
                captureDateTime: now,
                patient: patient,
                study: study,
                technicalData: technicalData,
                userComment: null,
                barcodeData: null,
                instanceNumber: 1,
                instanceUid: null,
                exifData: exifData
            );

            return metadata;
        }
    }

    /// <summary>
    /// Event arguments for file processing events with correlation support
    /// </summary>
    public class FileProcessingEventArgs : EventArgs
    {
        public string FilePath { get; set; } = string.Empty;
        public string? OutputPath { get; set; }
        public string CorrelationId { get; set; } = string.Empty;
        public string PipelineName { get; set; } = string.Empty;
        public ProcessingStage Stage { get; set; } = ProcessingStage.FileDetected;
    }

    /// <summary>
    /// Event arguments for file processing errors with correlation support
    /// </summary>
    public class FileProcessingErrorEventArgs : EventArgs
    {
        public string FilePath { get; set; } = string.Empty;
        public Exception Error { get; set; } = null!;
        public string CorrelationId { get; set; } = string.Empty;
        public string PipelineName { get; set; } = string.Empty;
        public ProcessingStage Stage { get; set; } = ProcessingStage.Error;
    }

    /// <summary>
    /// Result of file processing operation with correlation tracking
    /// </summary>
    public class FileProcessingResult
    {
        public string SourceFile { get; set; } = string.Empty;
        public string? OutputFile { get; set; }
        public string? DicomFile { get; set; }
        public bool Success { get; set; }
        public string? ErrorMessage { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public long ProcessingTimeMs { get; set; }
        public Guid PipelineId { get; set; }
        public string CorrelationId { get; set; } = string.Empty;
    }
}



=== src\CamBridge.Infrastructure\Services\PipelineManager.cs ===
// src/CamBridge.Infrastructure/Services/PipelineManager.cs
// Version: 0.8.8
// Last Modified: 2025-06-30
// Description: Manages multiple processing pipelines with hierarchical logging
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using CamBridge.Core;
using CamBridge.Core.Enums;
using CamBridge.Core.Logging;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace CamBridge.Infrastructure.Services
{
    /// <summary>
    /// Manages multiple file processing pipelines
    /// </summary>
    public class PipelineManager : IHostedService, IDisposable
    {
        private readonly ILogger<PipelineManager> _logger;
        private readonly ILoggerFactory _loggerFactory;
        private readonly IOptionsMonitor<CamBridgeSettingsV2> _settingsMonitor;  // FIXED: Use IOptionsMonitor
        private readonly MappingConfigurationLoader _mappingLoader;
        private readonly NotificationService _notificationService;
        private readonly DicomStoreService? _dicomStoreService;

        private readonly ConcurrentDictionary<string, PipelineStatus> _pipelines;
        private readonly SemaphoreSlim _startupSemaphore;
        private CancellationTokenSource? _shutdownTokenSource;

        public PipelineManager(
            ILogger<PipelineManager> logger,
            ILoggerFactory loggerFactory,
            IOptionsMonitor<CamBridgeSettingsV2> settingsMonitor,  // FIXED: Accept IOptionsMonitor
            MappingConfigurationLoader mappingLoader,
            NotificationService notificationService,
            DicomStoreService? dicomStoreService = null)
        {
            _logger = logger;
            _loggerFactory = loggerFactory;
            _settingsMonitor = settingsMonitor;  // FIXED: Store IOptionsMonitor
            _mappingLoader = mappingLoader;
            _notificationService = notificationService;
            _dicomStoreService = dicomStoreService;

            _pipelines = new ConcurrentDictionary<string, PipelineStatus>();
            _startupSemaphore = new SemaphoreSlim(1, 1);
        }

        /// <summary>
        /// Starts all configured pipelines
        /// </summary>
        public async Task StartAsync(CancellationToken cancellationToken)
        {
            await _startupSemaphore.WaitAsync(cancellationToken);
            try
            {
                _logger.LogInformation("Starting PipelineManager");
                _shutdownTokenSource = new CancellationTokenSource();

                // FIXED: Get current settings value
                var settings = _settingsMonitor.CurrentValue;

                // Validate settings
                if (settings?.Pipelines == null || !settings.Pipelines.Any())
                {
                    _logger.LogWarning("No pipelines configured");
                    return;
                }

                // DEBUG: Log what we actually loaded
                foreach (var pipeline in settings.Pipelines)
                {
                    _logger.LogDebug("Pipeline {Name}: Enabled={Enabled}, WatchPath={Watch}, ArchiveFolder={Archive}",
                        pipeline.Name,
                        pipeline.Enabled,
                        pipeline.WatchSettings?.Path ?? "(null)",
                        pipeline.ProcessingOptions?.ArchiveFolder ?? "(null)");
                }

                // Start each pipeline
                var startTasks = settings.Pipelines
                    .Where(p => p.Enabled)
                    .Select(p => CreateAndStartPipelineAsync(p, _shutdownTokenSource.Token));

                await Task.WhenAll(startTasks);

                _logger.LogInformation("Started {Count} pipelines", _pipelines.Count);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to start pipelines");
                await _notificationService.NotifyErrorAsync($"Failed to start pipelines: {ex.Message}", ex);
                throw;
            }
            finally
            {
                _startupSemaphore.Release();
            }
        }

        /// <summary>
        /// Stops all running pipelines
        /// </summary>
        public async Task StopAsync(CancellationToken cancellationToken)
        {
            _logger.LogInformation("Stopping PipelineManager");

            // Signal shutdown to all pipelines
            _shutdownTokenSource?.Cancel();

            // Stop all pipelines
            var stopTasks = _pipelines.Values.Select(p => StopPipelineAsync(p, cancellationToken));
            await Task.WhenAll(stopTasks);

            // Clear pipeline dictionary
            _pipelines.Clear();

            _logger.LogInformation("PipelineManager stopped");
        }

        /// <summary>
        /// Creates and starts a single pipeline
        /// </summary>
        private async Task CreateAndStartPipelineAsync(PipelineConfiguration config, CancellationToken cancellationToken)
        {
            try
            {
                // Generate correlation ID for this pipeline session
                var pipelineCorrelationId = $"P{DateTime.Now:yyyyMMddHHmmss}-{SanitizeForFileName(config.Name)}";

                // FIXED: Get current settings value
                var settings = _settingsMonitor.CurrentValue;
                var logVerbosity = settings.Service?.LogVerbosity ?? LogVerbosity.Detailed;  // Add null check with default

                // Create named logger for this pipeline
                var pipelineLogger = _loggerFactory.CreateLogger($"Pipeline.{config.Name}");
                var logContext = pipelineLogger.CreateContext(pipelineCorrelationId, config.Name, logVerbosity);

                // Note: LogContext is not IDisposable, use BeginStage for timing
                var stageContext = logContext.BeginStage(ProcessingStage.PipelineInitialization, $"Starting pipeline {config.Name}");
                try
                {
                    // Validate configuration
                    ValidatePipelineConfiguration(config);

                    // Extra validation logging
                    if (config.ProcessingOptions == null)
                    {
                        var ex = new InvalidOperationException($"ProcessingOptions is null for pipeline {config.Name}");
                        logContext.LogError(ex, "ProcessingOptions is NULL for pipeline {Pipeline}!", config.Name);
                        throw ex;
                    }

                    // Log pipeline configuration
                    logContext.LogInformation("Watch folder: {WatchFolder}", config.WatchSettings.Path);

                    // Debug output path resolution
                    var outputPath = config.WatchSettings.OutputPath ?? config.ProcessingOptions.ArchiveFolder;
                    logContext.LogInformation("Output path resolution: WatchSettings.OutputPath={OutputPath}, ArchiveFolder={ArchiveFolder}, Final={Final}",
                        config.WatchSettings.OutputPath ?? "(null)",
                        config.ProcessingOptions.ArchiveFolder ?? "(null)",
                        outputPath ?? "(null)");

                    logContext.LogInformation("Output folder: {OutputFolder}", outputPath);
                    logContext.LogInformation("File pattern: {Pattern}", config.WatchSettings.FilePattern);
                    logContext.LogInformation("Max concurrent: {MaxConcurrent}", config.ProcessingOptions.MaxConcurrentProcessing);

                    if (config.PacsConfiguration?.Enabled == true)
                    {
                        logContext.LogInformation("PACS upload enabled for pipeline {Pipeline} -> {Host}:{Port}",
                            config.Name, config.PacsConfiguration.Host, config.PacsConfiguration.Port);
                    }

                    // Create output directory structure
                    // EXTRA VALIDATION: Make sure we have a valid path
                    if (string.IsNullOrWhiteSpace(outputPath))
                    {
                        outputPath = Path.Combine(
                            Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData),
                            "CamBridge",
                            "Output",
                            config.Name
                        );
                        logContext.LogWarning("Neither OutputPath nor ArchiveFolder configured for pipeline {Pipeline}, using default: {Path}",
                            config.Name, outputPath);
                    }

                    CreateOutputDirectoryStructure(outputPath, config.ProcessingOptions, logContext);

                    // Load mapping configuration from the mapping set
                    var mappingConfigPath = GetMappingConfigPath(config);

                    try
                    {
                        // Load mapping configuration - returns bool
                        var loadSuccess = await _mappingLoader.LoadConfigurationAsync(mappingConfigPath);
                        if (loadSuccess)
                        {
                            logContext.LogInformation("Mapping configuration loaded successfully");
                        }
                        else
                        {
                            logContext.LogWarning("Failed to load mapping configuration, using defaults");
                        }
                    }
                    catch (Exception ex)
                    {
                        logContext.LogWarning("Error loading mapping configuration, using defaults: {Message}", ex.Message);
                    }

                    // Create processing components
                    var components = CreateProcessingComponents(config, pipelineLogger);

                    // Create PACS upload queue if enabled
                    PacsUploadQueue? pacsQueue = null;
                    if (config.PacsConfiguration?.Enabled == true && _dicomStoreService != null)
                    {
                        pacsQueue = new PacsUploadQueue(config, _dicomStoreService,
                            _loggerFactory.CreateLogger<PacsUploadQueue>());
                        logContext.LogInformation("PACS upload queue created for {AeTitle}",
                            config.PacsConfiguration.CallingAeTitle);
                    }

                    // Create file processor with all components
                    // FIXED: Use _mappingLoader which implements IMappingConfiguration
                    var fileProcessor = new FileProcessor(
                        pipelineLogger,
                        components.ExifTool,
                        components.DicomConverter,
                        config,
                        settings.GlobalDicomSettings,  // FIXED: Use settings from IOptionsMonitor
                        components.TagMapper,
                        _mappingLoader,  // FIXED: _mappingLoader implements IMappingConfiguration
                        pacsQueue,
                        logVerbosity);

                    // Create processing queue with options wrapper
                    var processingOptions = Options.Create(config.ProcessingOptions);
                    var queue = new ProcessingQueue(
                        _loggerFactory.CreateLogger<ProcessingQueue>(),
                        fileProcessor,
                        processingOptions);

                    logContext.LogInformation("Created processing queue with max concurrent: {MaxConcurrent}",
                        config.ProcessingOptions.MaxConcurrentProcessing);

                    // Create file watcher
                    var watcher = CreateFileWatcher(config, queue);
                    logContext.LogInformation("Created file watcher for pattern {Pattern}",
                        config.WatchSettings.FilePattern);

                    // Start queue processing
                    var queueProcessingTask = queue.ProcessQueueAsync(cancellationToken);

                    // Create pipeline status
                    var status = new PipelineStatus
                    {
                        Configuration = config,
                        Queue = queue,
                        Watcher = watcher,
                        ProcessingTask = queueProcessingTask,
                        StartTime = DateTime.UtcNow,
                        LastActivityTime = DateTime.UtcNow,
                        IsRunning = true,
                        PacsQueue = pacsQueue
                    };

                    // Register pipeline
                    if (!_pipelines.TryAdd(config.Name, status))
                    {
                        throw new InvalidOperationException($"Pipeline {config.Name} already exists");
                    }

                    // Start watching for files
                    watcher.EnableRaisingEvents = true;
                    logContext.LogInformation("Pipeline {Name} started successfully", config.Name);
                }
                finally
                {
                    stageContext?.Dispose();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to start pipeline {Name}", config.Name);
                await _notificationService.NotifyErrorAsync($"Pipeline {config.Name} failed to start: {ex.Message}", ex);
                throw;
            }
        }

        /// <summary>
        /// Gets the mapping configuration path for a pipeline
        /// </summary>
        private string GetMappingConfigPath(PipelineConfiguration config)
        {
            // For now, use a default path - later this will use MappingSetId
            return Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "mappings.json");
        }

        /// <summary>
        /// Creates the output directory structure for a pipeline
        /// </summary>
        private void CreateOutputDirectoryStructure(string outputFolder, ProcessingOptions options, LogContext logContext)
        {
            // FIXED: Validate outputFolder and provide sensible default
            if (string.IsNullOrWhiteSpace(outputFolder))
            {
                // Don't crash - use a default instead!
                outputFolder = Path.Combine(
                    Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData),
                    "CamBridge",
                    "Output"
                );
                logContext.LogWarning("No output folder configured, using default: {Path}", outputFolder);
            }

            // Create main output directory
            if (!Directory.Exists(outputFolder))
            {
                Directory.CreateDirectory(outputFolder);
                logContext.LogDebug("Created output directory: {Path}", outputFolder);
            }

            // FIXED: Create subdirectories based on actual configured paths
            // NOTE: BackupFolder has no UI control in PipelineConfigPage!
            // This is documented in WISDOM_DEBT.md as missing GUI element
            var subdirectories = new Dictionary<string, string?>
            {
                { "Archive", options.ArchiveFolder },
                { "Error", options.ErrorFolder }
                // Don't create Backup subdirectory - BackupFolder should be absolute path
            };

            // Handle BackupFolder separately if configured
            if (!string.IsNullOrWhiteSpace(options.BackupFolder))
            {
                try
                {
                    if (!Directory.Exists(options.BackupFolder))
                    {
                        Directory.CreateDirectory(options.BackupFolder);
                        logContext.LogDebug("Created backup directory: {Path}", options.BackupFolder);
                    }
                }
                catch (Exception ex)
                {
                    logContext.LogWarning("Failed to create backup directory at {Path}: {Error}",
                        options.BackupFolder, ex.Message);
                }
            }

            // Create other directories (these are absolute paths, not subdirectories!)
            foreach (var kvp in subdirectories)
            {
                if (!string.IsNullOrWhiteSpace(kvp.Value))
                {
                    try
                    {
                        if (!Directory.Exists(kvp.Value))
                        {
                            Directory.CreateDirectory(kvp.Value);
                            logContext.LogDebug("Created {Type} directory: {Path}", kvp.Key, kvp.Value);
                        }
                    }
                    catch (Exception ex)
                    {
                        logContext.LogWarning("Failed to create {Type} directory at {Path}: {Error}",
                            kvp.Key, kvp.Value, ex.Message);
                    }
                }
            }
        }

        /// <summary>
        /// Creates processing components for a pipeline
        /// </summary>
        private (ExifToolReader ExifTool, DicomConverter DicomConverter, DicomTagMapper TagMapper)
            CreateProcessingComponents(PipelineConfiguration config, ILogger pipelineLogger)
        {
            // Create DICOM converter
            var dicomConverter = new DicomConverter(_loggerFactory.CreateLogger<DicomConverter>());

            // Create tag mapper
            var tagMapper = new DicomTagMapper(_loggerFactory.CreateLogger<DicomTagMapper>());

            // Create ExifTool reader - get path from configuration
            var exifToolPath = Path.Combine(
                AppDomain.CurrentDomain.BaseDirectory,
                "Tools",
                "exiftool.exe");

            var exifTool = new ExifToolReader(
                _loggerFactory.CreateLogger<ExifToolReader>(),
                exifToolPath);

            return (exifTool, dicomConverter, tagMapper);
        }

        /// <summary>
        /// Validates pipeline configuration
        /// </summary>
        private void ValidatePipelineConfiguration(PipelineConfiguration config)
        {
            if (string.IsNullOrWhiteSpace(config.Name))
                throw new ArgumentException("Pipeline name is required");

            if (config.WatchSettings == null)
                throw new ArgumentException($"Watch settings are required for pipeline {config.Name}");

            if (string.IsNullOrWhiteSpace(config.WatchSettings.Path))
                throw new ArgumentException($"Watch folder is required for pipeline {config.Name}");

            if (!Directory.Exists(config.WatchSettings.Path))
                throw new DirectoryNotFoundException($"Watch folder not found for pipeline {config.Name}: {config.WatchSettings.Path}");

            if (config.ProcessingOptions == null)
                throw new ArgumentException($"Processing options are required for pipeline {config.Name}");

            // Don't require ArchiveFolder if OutputPath is set
            if (string.IsNullOrWhiteSpace(config.WatchSettings.OutputPath) &&
                string.IsNullOrWhiteSpace(config.ProcessingOptions.ArchiveFolder))
            {
                _logger.LogWarning("Pipeline {Name} has no output path configured, will use default", config.Name);
            }

            if (string.IsNullOrWhiteSpace(config.WatchSettings.FilePattern))
                throw new ArgumentException($"File pattern is required for pipeline {config.Name}");

            if (config.ProcessingOptions.MaxConcurrentProcessing <= 0)
                throw new ArgumentException($"Max concurrent processing must be positive for pipeline {config.Name}");
        }

        /// <summary>
        /// Creates a file watcher for the pipeline
        /// </summary>
        private FileSystemWatcher CreateFileWatcher(PipelineConfiguration config, ProcessingQueue queue)
        {
            var watcher = new FileSystemWatcher(config.WatchSettings.Path)
            {
                Filter = GetFirstPattern(config.WatchSettings.FilePattern),
                NotifyFilter = NotifyFilters.FileName | NotifyFilters.LastWrite | NotifyFilters.CreationTime,
                IncludeSubdirectories = config.WatchSettings.IncludeSubdirectories
            };

            // Handle file events
            watcher.Created += async (s, e) => await OnFileDetectedAsync(config.Name, e.FullPath, queue);
            watcher.Changed += async (s, e) => await OnFileDetectedAsync(config.Name, e.FullPath, queue);
            watcher.Error += (s, e) => OnWatcherError(config.Name, e);

            return watcher;
        }

        /// <summary>
        /// Gets the first pattern from a semicolon-separated list
        /// </summary>
        private string GetFirstPattern(string patterns)
        {
            var parts = patterns.Split(';', StringSplitOptions.RemoveEmptyEntries);
            return parts.Length > 0 ? parts[0].Trim() : "*.*";
        }

        /// <summary>
        /// Handles file detection events
        /// </summary>
        private async Task OnFileDetectedAsync(string pipelineName, string filePath, ProcessingQueue queue)
        {
            try
            {
                // Skip temporary files
                if (Path.GetFileName(filePath).StartsWith("~") ||
                    Path.GetFileName(filePath).StartsWith("."))
                {
                    return;
                }

                // Check file pattern (if multiple patterns)
                if (!IsFilePatternMatch(filePath, pipelineName))
                {
                    return;
                }

                // Add to queue
                var added = await queue.EnqueueAsync(filePath);
                if (added)
                {
                    _logger.LogDebug("[{Pipeline}] File queued: {File}", pipelineName, Path.GetFileName(filePath));

                    // Update last activity time
                    if (_pipelines.TryGetValue(pipelineName, out var status))
                    {
                        status.LastActivityTime = DateTime.UtcNow;
                    }
                }
                else
                {
                    _logger.LogWarning("[{Pipeline}] Queue full or duplicate, file skipped: {File}",
                        pipelineName, Path.GetFileName(filePath));
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "[{Pipeline}] Error handling file detection for {File}",
                    pipelineName, filePath);
            }
        }

        /// <summary>
        /// Checks if file matches any of the pipeline's patterns
        /// </summary>
        private bool IsFilePatternMatch(string filePath, string pipelineName)
        {
            if (_pipelines.TryGetValue(pipelineName, out var status))
            {
                var patterns = status.Configuration.WatchSettings.FilePattern
                    .Split(';', StringSplitOptions.RemoveEmptyEntries)
                    .Select(p => p.Trim());

                var fileName = Path.GetFileName(filePath);
                foreach (var pattern in patterns)
                {
                    if (FileMatchesPattern(fileName, pattern))
                        return true;
                }
            }
            return false;
        }

        /// <summary>
        /// Simple pattern matching
        /// </summary>
        private bool FileMatchesPattern(string fileName, string pattern)
        {
            // Simple implementation - can be enhanced
            if (pattern == "*.*") return true;

            var extension = Path.GetExtension(fileName);
            var patternExt = pattern.StartsWith("*.") ? pattern.Substring(1) : pattern;

            return string.Equals(extension, patternExt, StringComparison.OrdinalIgnoreCase);
        }

        /// <summary>
        /// Handles watcher errors
        /// </summary>
        private void OnWatcherError(string pipelineName, ErrorEventArgs e)
        {
            var ex = e.GetException();
            _logger.LogError(ex, "[{Pipeline}] File watcher error", pipelineName);

            // Try to recover by recreating the watcher
            Task.Run(async () =>
            {
                await Task.Delay(5000);
                await RecoverPipelineAsync(pipelineName);
            });
        }

        /// <summary>
        /// Attempts to recover a failed pipeline
        /// </summary>
        private async Task RecoverPipelineAsync(string pipelineName)
        {
            try
            {
                _logger.LogInformation("[{Pipeline}] Attempting to recover pipeline", pipelineName);

                if (_pipelines.TryGetValue(pipelineName, out var status))
                {
                    // Stop the current pipeline
                    await StopPipelineAsync(status, CancellationToken.None);

                    // Remove from dictionary
                    _pipelines.TryRemove(pipelineName, out _);

                    // Restart if we're not shutting down
                    if (_shutdownTokenSource != null && !_shutdownTokenSource.Token.IsCancellationRequested)
                    {
                        await CreateAndStartPipelineAsync(status.Configuration, _shutdownTokenSource.Token);
                        _logger.LogInformation("[{Pipeline}] Pipeline recovered successfully", pipelineName);
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "[{Pipeline}] Failed to recover pipeline", pipelineName);
            }
        }

        /// <summary>
        /// Stops a single pipeline
        /// </summary>
        private async Task StopPipelineAsync(PipelineStatus status, CancellationToken cancellationToken)
        {
            try
            {
                _logger.LogInformation("Stopping pipeline {Name}", status.Configuration.Name);

                // Stop watching for new files
                status.Watcher.EnableRaisingEvents = false;
                status.Watcher.Dispose();

                // Stop queue processing
                await status.Queue.StopAsync(cancellationToken);

                // Wait for processing to complete
                if (status.ProcessingTask != null)
                {
                    try
                    {
                        await status.ProcessingTask.WaitAsync(TimeSpan.FromSeconds(30), cancellationToken);
                    }
                    catch (TimeoutException)
                    {
                        _logger.LogWarning("Pipeline {Name} processing task did not complete in time",
                            status.Configuration.Name);
                    }
                }

                // Stop PACS queue if present
                if (status.PacsQueue != null)
                {
                    status.PacsQueue.Dispose();
                }

                status.IsRunning = false;
                status.StopTime = DateTime.UtcNow;

                _logger.LogInformation("Pipeline {Name} stopped", status.Configuration.Name);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error stopping pipeline {Name}", status.Configuration.Name);
            }
        }

        /// <summary>
        /// Gets the current status of all pipelines
        /// </summary>
        public IReadOnlyDictionary<string, PipelineInfo> GetPipelineStatus()
        {
            var result = new Dictionary<string, PipelineInfo>();

            foreach (var kvp in _pipelines)
            {
                var status = kvp.Value;
                var stats = status.Queue.GetStatistics();

                result[kvp.Key] = new PipelineInfo
                {
                    Name = kvp.Key,
                    IsRunning = status.IsRunning,
                    StartTime = status.StartTime,
                    LastActivityTime = status.LastActivityTime,
                    ProcessedCount = stats.TotalProcessed,
                    ErrorCount = stats.TotalFailed,
                    QueueLength = stats.QueueLength,
                    WatchFolder = status.Configuration.WatchSettings.Path,
                    OutputFolder = status.Configuration.WatchSettings.OutputPath ??
                                   status.Configuration.ProcessingOptions.ArchiveFolder
                };
            }

            return result;
        }

        /// <summary>
        /// Gets detailed information about a specific pipeline
        /// </summary>
        public PipelineInfo? GetPipelineInfo(string pipelineName)
        {
            if (_pipelines.TryGetValue(pipelineName, out var status))
            {
                var stats = status.Queue.GetStatistics();

                return new PipelineInfo
                {
                    Name = pipelineName,
                    IsRunning = status.IsRunning,
                    StartTime = status.StartTime,
                    LastActivityTime = status.LastActivityTime,
                    ProcessedCount = stats.TotalProcessed,
                    ErrorCount = stats.TotalFailed,
                    QueueLength = stats.QueueLength,
                    WatchFolder = status.Configuration.WatchSettings.Path,
                    OutputFolder = status.Configuration.WatchSettings.OutputPath ??
                                   status.Configuration.ProcessingOptions.ArchiveFolder
                };
            }

            return null;
        }

        /// <summary>
        /// Gets pipeline statuses for Worker.cs
        /// </summary>
        public List<PipelineStatusInfo> GetPipelineStatuses()
        {
            var result = new List<PipelineStatusInfo>();

            foreach (var kvp in _pipelines)
            {
                var status = kvp.Value;
                var stats = status.Queue.GetStatistics();

                result.Add(new PipelineStatusInfo
                {
                    Name = kvp.Key,
                    IsActive = status.IsRunning,
                    WatchPath = status.Configuration.WatchSettings.Path,
                    QueueDepth = stats.QueueLength,
                    ProcessedCount = stats.TotalProcessed,
                    ErrorCount = stats.TotalFailed
                });
            }

            return result;
        }

        /// <summary>
        /// Stops all pipelines (called by Worker.cs)
        /// </summary>
        public async Task StopAsync()
        {
            await StopAsync(CancellationToken.None);
        }

        /// <summary>
        /// Sanitizes a string for use in file names
        /// </summary>
        private string SanitizeForFileName(string name)
        {
            var invalid = Path.GetInvalidFileNameChars()
                .Concat(new[] { ' ', '.', ',', '/', '\\', ':', '-' })
                .Distinct()
                .ToArray();

            return string.Join("_", name.Split(invalid, StringSplitOptions.RemoveEmptyEntries));
        }

        public void Dispose()
        {
            _shutdownTokenSource?.Cancel();
            _shutdownTokenSource?.Dispose();
            _startupSemaphore?.Dispose();

            // Dispose all pipeline resources
            foreach (var status in _pipelines.Values)
            {
                status.Watcher?.Dispose();
                status.PacsQueue?.Dispose();
            }

            _pipelines.Clear();
        }
    }

    /// <summary>
    /// Internal class to track pipeline status
    /// </summary>
    internal class PipelineStatus
    {
        public required PipelineConfiguration Configuration { get; init; }
        public required ProcessingQueue Queue { get; init; }
        public required FileSystemWatcher Watcher { get; init; }
        public Task? ProcessingTask { get; init; }
        public DateTime StartTime { get; init; }
        public DateTime? StopTime { get; set; }
        public DateTime LastActivityTime { get; set; }
        public bool IsRunning { get; set; }
        public PacsUploadQueue? PacsQueue { get; init; }
    }

    /// <summary>
    /// Public information about a pipeline
    /// </summary>
    public class PipelineInfo
    {
        public string Name { get; init; } = string.Empty;
        public bool IsRunning { get; init; }
        public DateTime StartTime { get; init; }
        public DateTime LastActivityTime { get; init; }
        public int ProcessedCount { get; init; }
        public int ErrorCount { get; init; }
        public int QueueLength { get; init; }
        public string WatchFolder { get; init; } = string.Empty;
        public string OutputFolder { get; init; } = string.Empty;
    }

    /// <summary>
    /// Status info for Worker.cs compatibility
    /// </summary>
    public class PipelineStatusInfo
    {
        public string Name { get; init; } = string.Empty;
        public bool IsActive { get; init; }
        public string WatchPath { get; init; } = string.Empty;
        public int QueueDepth { get; init; }
        public int ProcessedCount { get; init; }
        public int ErrorCount { get; init; }
    }
}



