// === src\CamBridge.Config\Views\ServiceControlPage.xaml ===

<!-- src/CamBridge.Config/Views/ServiceControlPage.xaml -->
<!-- Version: 0.7.28 -->
<!-- Description: Service Control - Uniform Design without Borders -->

<Page x:Class="CamBridge.Config.Views.ServiceControlPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:ui="http://schemas.modernwpf.com/2019"
      Unloaded="Page_Unloaded">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Header wie Mapping Editor -->
        <Border Grid.Row="0"
                Background="{DynamicResource SystemControlBackgroundChromeMediumBrush}">
            <Grid Height="60">
                <TextBlock Text="Service Control"
                           FontSize="24"
                           FontWeight="SemiBold"
                           VerticalAlignment="Center"
                           Margin="24,0,0,0"/>
            </Grid>
        </Border>

        <!-- Main Content -->
        <ScrollViewer Grid.Row="1">
            <Grid Margin="16,16,16,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <!-- Admin Warning -->
                <Border Grid.Row="0" Margin="0,0,0,16" Padding="12" CornerRadius="2"
                        Background="#FFF3CD" BorderThickness="0"
                        Visibility="{Binding RequiresElevation, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <StackPanel Orientation="Horizontal">
                        <ui:SymbolIcon Symbol="Important" Margin="0,0,8,0"/>
                        <TextBlock Text="Administrator privileges required for service control" 
                                  VerticalAlignment="Center"/>
                    </StackPanel>
                </Border>

                <!-- Service Status Card -->
                <Border Grid.Row="1" CornerRadius="2" Margin="0,0,0,16"
                        Background="{DynamicResource SystemControlBackgroundAltHighBrush}"
                        BorderThickness="0">
                    <Grid Margin="16,12">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <!-- Status Display -->
                        <StackPanel Orientation="Horizontal" Margin="0,0,0,16">
                            <Ellipse Width="16" Height="16" Margin="0,0,12,0">
                                <Ellipse.Style>
                                    <Style TargetType="Ellipse">
                                        <Setter Property="Fill" Value="Gray"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding StatusColor}" Value="Green">
                                                <Setter Property="Fill" Value="#28A745"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding StatusColor}" Value="Orange">
                                                <Setter Property="Fill" Value="#FFC107"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding StatusColor}" Value="Red">
                                                <Setter Property="Fill" Value="#DC3545"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Ellipse.Style>
                            </Ellipse>
                            <TextBlock Text="CamBridge Service Status:" FontSize="16" Margin="0,0,8,0"/>
                            <TextBlock Text="{Binding StatusText}" FontSize="16" FontWeight="SemiBold"/>
                        </StackPanel>

                        <!-- Uptime Display -->
                        <TextBlock Grid.Row="1" Margin="28,0,0,16" FontSize="14" Opacity="0.7"
                                  Visibility="{Binding Uptime, Converter={StaticResource NullToVisibilityConverter}}">
                            <Run Text="Uptime:"/>
                            <Run Text="{Binding Uptime}"/>
                        </TextBlock>

                        <!-- Control Buttons -->
                        <StackPanel Grid.Row="2" Orientation="Horizontal" Margin="0,8,0,0">
                            <!-- Install Service Button âœ… VORHANDEN! -->
                            <Button Command="{Binding InstallServiceCommand}" 
                                    Visibility="{Binding IsServiceInstalled, 
                                               Converter={StaticResource InverseBooleanToVisibilityConverter}}"
                                    Margin="0,0,8,0" MinWidth="140"
                                    Style="{StaticResource AccentButtonStyle}">
                                <StackPanel Orientation="Horizontal">
                                    <ui:SymbolIcon Symbol="Add" Margin="0,0,8,0"/>
                                    <TextBlock Text="Install Service"/>
                                </StackPanel>
                            </Button>

                            <Button Command="{Binding StartServiceCommand}" 
                                    IsEnabled="{Binding CanStart}"
                                    Margin="0,0,8,0" MinWidth="120">
                                <StackPanel Orientation="Horizontal">
                                    <ui:SymbolIcon Symbol="Play" Margin="0,0,8,0"/>
                                    <TextBlock Text="Start Service"/>
                                </StackPanel>
                            </Button>

                            <Button Command="{Binding StopServiceCommand}"
                                    IsEnabled="{Binding CanStop}"
                                    Margin="0,0,8,0" MinWidth="120">
                                <StackPanel Orientation="Horizontal">
                                    <ui:SymbolIcon Symbol="Stop" Margin="0,0,8,0"/>
                                    <TextBlock Text="Stop Service"/>
                                </StackPanel>
                            </Button>

                            <Button Command="{Binding RestartServiceCommand}"
                                    IsEnabled="{Binding CanRestart}"
                                    MinWidth="120">
                                <StackPanel Orientation="Horizontal">
                                    <ui:SymbolIcon Symbol="Refresh" Margin="0,0,8,0"/>
                                    <TextBlock Text="Restart Service"/>
                                </StackPanel>
                            </Button>
                        </StackPanel>

                        <!-- Loading Indicator -->
                        <ui:ProgressRing Grid.Row="2" IsActive="{Binding IsLoading}" 
                                       Width="24" Height="24"
                                       HorizontalAlignment="Right" VerticalAlignment="Center"/>

                        <!-- Not Installed Message -->
                        <TextBlock Grid.Row="3" Margin="0,16,0,0"
                                  Foreground="{DynamicResource SystemControlForegroundBaseMediumBrush}"
                                  Visibility="{Binding IsServiceInstalled, 
                                             Converter={StaticResource InverseBooleanToVisibilityConverter}}">
                            <Run Text="The CamBridge Windows Service is not installed. Click"/>
                            <Run Text="Install Service" FontWeight="SemiBold"/>
                            <Run Text="above to install it."/>
                        </TextBlock>
                    </Grid>
                </Border>

                <!-- Quick Actions -->
                <Border Grid.Row="2" CornerRadius="2"
                        Background="{DynamicResource SystemControlBackgroundAltHighBrush}"
                        BorderThickness="0">
                    <StackPanel Margin="16,12">
                        <TextBlock Text="Quick Actions" FontSize="16" FontWeight="SemiBold" Margin="0,0,0,12"/>

                        <StackPanel Orientation="Horizontal">
                            <Button Command="{Binding OpenServicesCommand}" Margin="0,0,8,0">
                                <StackPanel Orientation="Horizontal">
                                    <ui:SymbolIcon Symbol="Setting" Margin="0,0,8,0"/>
                                    <TextBlock Text="Windows Services"/>
                                </StackPanel>
                            </Button>

                            <Button Command="{Binding OpenEventViewerCommand}" Margin="0,0,8,0">
                                <StackPanel Orientation="Horizontal">
                                    <ui:SymbolIcon Symbol="Document" Margin="0,0,8,0"/>
                                    <TextBlock Text="Event Viewer"/>
                                </StackPanel>
                            </Button>

                            <!-- Uninstall Button âœ… VORHANDEN! -->
                            <Button Command="{Binding UninstallServiceCommand}"
                                    Visibility="{Binding IsServiceInstalled, 
                                               Converter={StaticResource BooleanToVisibilityConverter}}">
                                <StackPanel Orientation="Horizontal">
                                    <ui:SymbolIcon Symbol="Delete" Margin="0,0,8,0"/>
                                    <TextBlock Text="Uninstall Service"/>
                                </StackPanel>
                            </Button>
                        </StackPanel>
                    </StackPanel>
                </Border>
            </Grid>
        </ScrollViewer>
    </Grid>
</Page>


// === END src\CamBridge.Config\Views\ServiceControlPage.xaml ===


// === src\CamBridge.Config\Views\ServiceControlPage.xaml.cs ===

// src\CamBridge.Config\Views\ServiceControlPage.xaml.cs
// Version: 0.5.26 - Fixed: Using Cleanup() instead of Dispose()

using CamBridge.Config.ViewModels;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Windows;
using System.Windows.Controls;

namespace CamBridge.Config.Views
{
    /// <summary>
    /// Service control page for managing the Windows Service
    /// </summary>
    public partial class ServiceControlPage : Page
    {
        private ServiceControlViewModel? _viewModel;

        public ServiceControlPage()
        {
            InitializeComponent();

            // Get ViewModel from DI container
            try
            {
                var app = Application.Current as App;
                if (app?.Host?.Services != null)
                {
                    _viewModel = app.Host.Services.GetRequiredService<ServiceControlViewModel>();
                    DataContext = _viewModel;

                    System.Diagnostics.Debug.WriteLine("ServiceControlViewModel loaded from DI container");
                }
                else
                {
                    // Fallback if DI not available
                    var serviceManager = new Services.ServiceManager();
                    _viewModel = new ServiceControlViewModel(serviceManager);
                    DataContext = _viewModel;

                    System.Diagnostics.Debug.WriteLine("ServiceControlViewModel created manually (fallback)");
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error creating ServiceControlViewModel: {ex.Message}");
            }
        }

        // Fixed: Using Cleanup() instead of Dispose()
        private void Page_Unloaded(object sender, RoutedEventArgs e)
        {
            // Cleanup the ViewModel
            _viewModel?.Cleanup();
            _viewModel = null;

            System.Diagnostics.Debug.WriteLine("ServiceControlPage cleanup completed");
        }
    }
}


// === END src\CamBridge.Config\Views\ServiceControlPage.xaml.cs ===


// === src\CamBridge.Config\ViewModels\ServiceControlViewModel.cs ===

// src/CamBridge.Config/ViewModels/ServiceControlViewModel.cs
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using System;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using CamBridge.Config.Services;

namespace CamBridge.Config.ViewModels
{
    public partial class ServiceControlViewModel : ViewModelBase
    {
        private readonly IServiceManager _serviceManager;
        private Timer? _statusTimer;

        [ObservableProperty]
        private ServiceStatus serviceStatus = ServiceStatus.Unknown;

        [ObservableProperty]
        private string statusText = "Checking...";

        [ObservableProperty]
        private string statusColor = "Gray";

        [ObservableProperty]
        private bool canStart = false;

        [ObservableProperty]
        private bool canStop = false;

        [ObservableProperty]
        private bool canRestart = false;

        [ObservableProperty]
        private bool isServiceInstalled = false;

        [ObservableProperty]
        private string? uptime;

        [ObservableProperty]
        private bool requiresElevation = false;

        public ServiceControlViewModel(IServiceManager serviceManager)
        {
            _serviceManager = serviceManager ?? throw new ArgumentNullException(nameof(serviceManager));

            // Start monitoring
            _ = InitializeAsync();
        }

        private async Task InitializeAsync()
        {
            // Check if running as admin
            RequiresElevation = !_serviceManager.IsRunningAsAdministrator();

            // Initial status check
            await RefreshStatusAsync();

            // Start periodic updates
            _statusTimer = new Timer(
                async _ => await RefreshStatusAsync(),
                null,
                TimeSpan.FromSeconds(1),
                TimeSpan.FromSeconds(2));
        }

        [RelayCommand]
        private async Task RefreshStatusAsync()
        {
            try
            {
                // Check if service is installed
                IsServiceInstalled = await _serviceManager.IsServiceInstalledAsync();

                if (!IsServiceInstalled)
                {
                    ServiceStatus = ServiceStatus.Unknown;
                    StatusText = "Service Not Installed";
                    StatusColor = "Red";
                    UpdateButtons();
                    return;
                }

                // Get current status
                ServiceStatus = await _serviceManager.GetServiceStatusAsync();
                UpdateStatusDisplay();
                UpdateButtons();

                // Get uptime if running
                if (ServiceStatus == ServiceStatus.Running)
                {
                    var startTime = await _serviceManager.GetServiceStartTimeAsync();
                    if (startTime.HasValue)
                    {
                        var uptimeSpan = DateTime.Now - startTime.Value;
                        Uptime = FormatUptime(uptimeSpan);
                    }
                }
                else
                {
                    Uptime = null;
                }
            }
            catch (Exception ex)
            {
                StatusText = $"Error: {ex.Message}";
                StatusColor = "Red";
            }
        }

        [RelayCommand]
        private async Task InstallServiceAsync()
        {
            if (RequiresElevation)
            {
                var result = MessageBox.Show(
                    "Installing the service requires administrator privileges. Restart the application as administrator?",
                    "Administrator Required",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Warning);

                if (result == MessageBoxResult.Yes)
                {
                    RestartAsAdministrator();
                }
                return;
            }

            IsLoading = true;

            try
            {
                StatusText = "Installing service...";
                StatusColor = "Orange";

                var success = await _serviceManager.InstallServiceAsync();

                if (success)
                {
                    StatusText = "Service installed successfully";
                    StatusColor = "Green";

                    // Wait a moment for the service to be fully registered
                    await Task.Delay(1000);

                    // Refresh status to update UI
                    await RefreshStatusAsync();

                    MessageBox.Show(
                        "CamBridge Service has been installed successfully!\n\n" +
                        "You can now start the service using the Start button.",
                        "Installation Complete",
                        MessageBoxButton.OK,
                        MessageBoxImage.Information);
                }
                else
                {
                    StatusText = "Failed to install service";
                    StatusColor = "Red";

                    MessageBox.Show(
                        "Failed to install the CamBridge Service.\n\n" +
                        "Please check the Event Viewer for more details.",
                        "Installation Failed",
                        MessageBoxButton.OK,
                        MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                StatusText = "Installation error";
                StatusColor = "Red";

                MessageBox.Show(
                    $"An error occurred while installing the service:\n\n{ex.Message}",
                    "Installation Error",
                    MessageBoxButton.OK,
                    MessageBoxImage.Error);
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task UninstallServiceAsync()
        {
            if (RequiresElevation)
            {
                var result = MessageBox.Show(
                    "Uninstalling the service requires administrator privileges. Restart the application as administrator?",
                    "Administrator Required",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Warning);

                if (result == MessageBoxResult.Yes)
                {
                    RestartAsAdministrator();
                }
                return;
            }

            var confirmResult = MessageBox.Show(
                "Are you sure you want to uninstall the CamBridge Service?\n\n" +
                "This will permanently remove the service from your system.",
                "Confirm Uninstall",
                MessageBoxButton.YesNo,
                MessageBoxImage.Warning);

            if (confirmResult != MessageBoxResult.Yes)
                return;

            IsLoading = true;

            try
            {
                // Stop service first if running
                if (ServiceStatus == ServiceStatus.Running)
                {
                    StatusText = "Stopping service before uninstall...";
                    StatusColor = "Orange";
                    await _serviceManager.StopServiceAsync();
                    await Task.Delay(2000); // Wait for service to stop
                }

                StatusText = "Uninstalling service...";
                StatusColor = "Orange";

                var success = await _serviceManager.UninstallServiceAsync();

                if (success)
                {
                    StatusText = "Service uninstalled";
                    StatusColor = "Gray";

                    // Wait a moment for the service to be fully removed
                    await Task.Delay(1000);

                    // Refresh status to update UI
                    await RefreshStatusAsync();

                    MessageBox.Show(
                        "CamBridge Service has been uninstalled successfully.",
                        "Uninstall Complete",
                        MessageBoxButton.OK,
                        MessageBoxImage.Information);
                }
                else
                {
                    StatusText = "Failed to uninstall service";
                    StatusColor = "Red";

                    MessageBox.Show(
                        "Failed to uninstall the CamBridge Service.\n\n" +
                        "Please check the Event Viewer for more details.",
                        "Uninstall Failed",
                        MessageBoxButton.OK,
                        MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                StatusText = "Uninstall error";
                StatusColor = "Red";

                MessageBox.Show(
                    $"An error occurred while uninstalling the service:\n\n{ex.Message}",
                    "Uninstall Error",
                    MessageBoxButton.OK,
                    MessageBoxImage.Error);
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task StartServiceAsync()
        {
            if (RequiresElevation)
            {
                var result = MessageBox.Show(
                    "Starting the service requires administrator privileges. Restart the application as administrator?",
                    "Administrator Required",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Warning);

                if (result == MessageBoxResult.Yes)
                {
                    RestartAsAdministrator();
                }
                return;
            }

            IsLoading = true;
            CanStart = false;

            try
            {
                StatusText = "Starting service...";
                StatusColor = "Orange";

                var success = await _serviceManager.StartServiceAsync();

                if (success)
                {
                    StatusText = "Service started successfully";
                    StatusColor = "Green";
                }
                else
                {
                    StatusText = "Failed to start service";
                    StatusColor = "Red";
                }

                await RefreshStatusAsync();
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task StopServiceAsync()
        {
            if (RequiresElevation)
            {
                var result = MessageBox.Show(
                    "Stopping the service requires administrator privileges. Restart the application as administrator?",
                    "Administrator Required",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Warning);

                if (result == MessageBoxResult.Yes)
                {
                    RestartAsAdministrator();
                }
                return;
            }

            var confirmResult = MessageBox.Show(
                "Are you sure you want to stop the CamBridge Service? This will halt all file processing.",
                "Confirm Stop",
                MessageBoxButton.YesNo,
                MessageBoxImage.Question);

            if (confirmResult != MessageBoxResult.Yes)
                return;

            IsLoading = true;
            CanStop = false;

            try
            {
                StatusText = "Stopping service...";
                StatusColor = "Orange";

                var success = await _serviceManager.StopServiceAsync();

                if (success)
                {
                    StatusText = "Service stopped";
                    StatusColor = "Gray";
                }
                else
                {
                    StatusText = "Failed to stop service";
                    StatusColor = "Red";
                }

                await RefreshStatusAsync();
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task RestartServiceAsync()
        {
            if (RequiresElevation)
            {
                var result = MessageBox.Show(
                    "Restarting the service requires administrator privileges. Restart the application as administrator?",
                    "Administrator Required",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Warning);

                if (result == MessageBoxResult.Yes)
                {
                    RestartAsAdministrator();
                }
                return;
            }

            IsLoading = true;
            CanRestart = false;

            try
            {
                StatusText = "Restarting service...";
                StatusColor = "Orange";

                var success = await _serviceManager.RestartServiceAsync();

                if (success)
                {
                    StatusText = "Service restarted successfully";
                    StatusColor = "Green";
                }
                else
                {
                    StatusText = "Failed to restart service";
                    StatusColor = "Red";
                }

                await RefreshStatusAsync();
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private void OpenServices()
        {
            try
            {
                var processInfo = new System.Diagnostics.ProcessStartInfo
                {
                    FileName = "services.msc",
                    UseShellExecute = true
                };
                System.Diagnostics.Process.Start(processInfo);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to open Services: {ex.Message}", "Error",
                    MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        [RelayCommand]
        private void OpenEventViewer()
        {
            try
            {
                var processInfo = new System.Diagnostics.ProcessStartInfo
                {
                    FileName = "eventvwr.msc",
                    UseShellExecute = true
                };
                System.Diagnostics.Process.Start(processInfo);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to open Event Viewer: {ex.Message}", "Error",
                    MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void UpdateStatusDisplay()
        {
            (StatusText, StatusColor) = ServiceStatus switch
            {
                ServiceStatus.Running => ("Running", "Green"),
                ServiceStatus.Stopped => ("Stopped", "Gray"),
                ServiceStatus.Starting => ("Starting...", "Orange"),
                ServiceStatus.Stopping => ("Stopping...", "Orange"),
                _ => ("Unknown", "Red")
            };
        }

        private void UpdateButtons()
        {
            CanStart = IsServiceInstalled && ServiceStatus == ServiceStatus.Stopped && !IsLoading;
            CanStop = IsServiceInstalled && ServiceStatus == ServiceStatus.Running && !IsLoading;
            CanRestart = IsServiceInstalled && ServiceStatus == ServiceStatus.Running && !IsLoading;
        }

        private string FormatUptime(TimeSpan uptime)
        {
            if (uptime.TotalDays >= 1)
                return $"{(int)uptime.TotalDays}d {uptime.Hours}h {uptime.Minutes}m";
            else if (uptime.TotalHours >= 1)
                return $"{uptime.Hours}h {uptime.Minutes}m {uptime.Seconds}s";
            else
                return $"{uptime.Minutes}m {uptime.Seconds}s";
        }

        private void RestartAsAdministrator()
        {
            try
            {
                var currentProcess = System.Diagnostics.Process.GetCurrentProcess();
                var fileName = currentProcess.MainModule?.FileName;

                if (string.IsNullOrEmpty(fileName))
                {
                    MessageBox.Show("Could not determine application path", "Error",
                        MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }

                var startInfo = new System.Diagnostics.ProcessStartInfo
                {
                    FileName = fileName,
                    UseShellExecute = true,
                    Verb = "runas"
                };

                System.Diagnostics.Process.Start(startInfo);
                Application.Current.Shutdown();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to restart as administrator: {ex.Message}", "Error",
                    MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public void Cleanup()
        {
            _statusTimer?.Dispose();
        }
    }
}


// === END src\CamBridge.Config\ViewModels\ServiceControlViewModel.cs ===


// === src\CamBridge.Config\Services\IServiceManager.cs ===

// src/CamBridge.Config/Services/IServiceManager.cs
using System;
using System.Threading.Tasks;

namespace CamBridge.Config.Services
{
    /// <summary>
    /// Interface for managing the CamBridge Windows Service
    /// </summary>
    public interface IServiceManager
    {
        /// <summary>
        /// Checks if the application is running with administrator privileges
        /// </summary>
        bool IsRunningAsAdministrator();

        /// <summary>
        /// Checks if the CamBridge service is installed
        /// </summary>
        Task<bool> IsServiceInstalledAsync();

        /// <summary>
        /// Gets the current status of the CamBridge service
        /// </summary>
        Task<ServiceStatus> GetServiceStatusAsync();

        /// <summary>
        /// Gets the start time of the service if it's running
        /// </summary>
        Task<DateTime?> GetServiceStartTimeAsync();

        /// <summary>
        /// Installs the CamBridge service
        /// </summary>
        Task<bool> InstallServiceAsync();

        /// <summary>
        /// Uninstalls the CamBridge service
        /// </summary>
        Task<bool> UninstallServiceAsync();

        /// <summary>
        /// Starts the CamBridge service
        /// </summary>
        Task<bool> StartServiceAsync();

        /// <summary>
        /// Stops the CamBridge service
        /// </summary>
        Task<bool> StopServiceAsync();

        /// <summary>
        /// Restarts the CamBridge service
        /// </summary>
        Task<bool> RestartServiceAsync();
    }

    /// <summary>
    /// Service status enumeration
    /// </summary>
    public enum ServiceStatus
    {
        Unknown,
        Running,
        Stopped,
        Starting,
        Stopping
    }
}


// === END src\CamBridge.Config\Services\IServiceManager.cs ===


// === src\CamBridge.Config\Services\ServiceManager.cs ===

// src/CamBridge.Config/Services/ServiceManager.cs
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Security.Principal;
using System.ServiceProcess;
using System.Text;
using System.Threading.Tasks;

namespace CamBridge.Config.Services
{
    /// <summary>
    /// Implementation of service management functionality
    /// </summary>
    public class ServiceManager : IServiceManager
    {
        private const string ServiceName = "CamBridgeService";
        private const string ServiceDisplayName = "CamBridge Image Processing Service";
        private const string ServiceDescription = "Monitors folders for JPEG images and converts them to DICOM format.";

        public bool IsRunningAsAdministrator()
        {
            var identity = WindowsIdentity.GetCurrent();
            var principal = new WindowsPrincipal(identity);
            return principal.IsInRole(WindowsBuiltInRole.Administrator);
        }

        public async Task<bool> IsServiceInstalledAsync()
        {
            return await Task.Run(() =>
            {
                try
                {
                    using var controller = ServiceController.GetServices()
                        .FirstOrDefault(s => s.ServiceName == ServiceName);
                    return controller != null;
                }
                catch
                {
                    return false;
                }
            });
        }

        public async Task<ServiceStatus> GetServiceStatusAsync()
        {
            return await Task.Run(() =>
            {
                try
                {
                    using var controller = new ServiceController(ServiceName);
                    controller.Refresh();

                    return controller.Status switch
                    {
                        ServiceControllerStatus.Running => ServiceStatus.Running,
                        ServiceControllerStatus.Stopped => ServiceStatus.Stopped,
                        ServiceControllerStatus.StartPending => ServiceStatus.Starting,
                        ServiceControllerStatus.StopPending => ServiceStatus.Stopping,
                        _ => ServiceStatus.Unknown
                    };
                }
                catch
                {
                    return ServiceStatus.Unknown;
                }
            });
        }

        public async Task<DateTime?> GetServiceStartTimeAsync()
        {
            return await Task.Run(() =>
            {
                try
                {
                    // Try to get start time from Windows Management
                    using var process = Process.GetProcessesByName("CamBridge.Service").FirstOrDefault();
                    return process?.StartTime;
                }
                catch
                {
                    return null;
                }
            });
        }

        public async Task<bool> InstallServiceAsync()
        {
            return await Task.Run(() =>
            {
                try
                {
                    // Find the service executable
                    var serviceExePath = FindServiceExecutable();
                    if (string.IsNullOrEmpty(serviceExePath))
                    {
                        // Log all searched paths for debugging
                        var searchPaths = GetSearchPaths();
                        var pathList = string.Join("\n", searchPaths);

                        // Create a detailed error message
                        var errorMsg = new StringBuilder();
                        errorMsg.AppendLine("Could not find CamBridge.Service.exe");
                        errorMsg.AppendLine("\nSearched in:");
                        foreach (var path in searchPaths)
                        {
                            var exists = File.Exists(path);
                            errorMsg.AppendLine($"  {(exists ? "âœ“" : "âœ—")} {path}");
                        }

                        throw new FileNotFoundException(errorMsg.ToString());
                    }

                    // Log the found path
                    Debug.WriteLine($"Found service executable at: {serviceExePath}");

                    // Use sc.exe to install the service
                    var processInfo = new ProcessStartInfo
                    {
                        FileName = "sc.exe",
                        Arguments = $"create {ServiceName} binPath= \"{serviceExePath}\" DisplayName= \"{ServiceDisplayName}\" start= auto",
                        UseShellExecute = false,
                        RedirectStandardOutput = true,
                        RedirectStandardError = true,
                        CreateNoWindow = true,
                        Verb = "runas"
                    };

                    using var process = Process.Start(processInfo);
                    if (process == null)
                    {
                        throw new InvalidOperationException("Failed to start sc.exe process");
                    }

                    var output = process.StandardOutput.ReadToEnd();
                    var error = process.StandardError.ReadToEnd();
                    process.WaitForExit();

                    Debug.WriteLine($"sc.exe output: {output}");
                    if (!string.IsNullOrEmpty(error))
                    {
                        Debug.WriteLine($"sc.exe error: {error}");
                    }

                    if (process.ExitCode == 0)
                    {
                        // Set service description
                        var descProcessInfo = new ProcessStartInfo
                        {
                            FileName = "sc.exe",
                            Arguments = $"description {ServiceName} \"{ServiceDescription}\"",
                            UseShellExecute = false,
                            CreateNoWindow = true,
                            Verb = "runas"
                        };

                        using var descProcess = Process.Start(descProcessInfo);
                        descProcess?.WaitForExit();

                        // Configure recovery options
                        ConfigureServiceRecovery();

                        return true;
                    }
                    else
                    {
                        var errorMessage = $"sc.exe failed with exit code {process.ExitCode}";
                        if (!string.IsNullOrEmpty(error))
                        {
                            errorMessage += $"\nError: {error}";
                        }
                        if (!string.IsNullOrEmpty(output) && output.Contains("error", StringComparison.OrdinalIgnoreCase))
                        {
                            errorMessage += $"\nOutput: {output}";
                        }

                        throw new InvalidOperationException(errorMessage);
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"Service installation failed: {ex}");
                    throw;
                }
            });
        }

        public async Task<bool> UninstallServiceAsync()
        {
            return await Task.Run(() =>
            {
                try
                {
                    // Use sc.exe to delete the service
                    var processInfo = new ProcessStartInfo
                    {
                        FileName = "sc.exe",
                        Arguments = $"delete {ServiceName}",
                        UseShellExecute = false,
                        RedirectStandardOutput = true,
                        RedirectStandardError = true,
                        CreateNoWindow = true,
                        Verb = "runas"
                    };

                    using var process = Process.Start(processInfo);
                    process?.WaitForExit();

                    return process?.ExitCode == 0;
                }
                catch
                {
                    return false;
                }
            });
        }

        public async Task<bool> StartServiceAsync()
        {
            try
            {
                using var controller = new ServiceController(ServiceName);

                if (controller.Status == ServiceControllerStatus.Running)
                    return true;

                controller.Start();
                await WaitForServiceStatusAsync(controller, ServiceControllerStatus.Running, TimeSpan.FromSeconds(30));

                return controller.Status == ServiceControllerStatus.Running;
            }
            catch
            {
                return false;
            }
        }

        public async Task<bool> StopServiceAsync()
        {
            try
            {
                using var controller = new ServiceController(ServiceName);

                if (controller.Status == ServiceControllerStatus.Stopped)
                    return true;

                controller.Stop();
                await WaitForServiceStatusAsync(controller, ServiceControllerStatus.Stopped, TimeSpan.FromSeconds(30));

                return controller.Status == ServiceControllerStatus.Stopped;
            }
            catch
            {
                return false;
            }
        }

        public async Task<bool> RestartServiceAsync()
        {
            try
            {
                // Stop service
                var stopResult = await StopServiceAsync();
                if (!stopResult)
                    return false;

                // Wait a bit before starting
                await Task.Delay(1000);

                // Start service
                return await StartServiceAsync();
            }
            catch
            {
                return false;
            }
        }

        private async Task WaitForServiceStatusAsync(ServiceController controller, ServiceControllerStatus desiredStatus, TimeSpan timeout)
        {
            await Task.Run(() =>
            {
                try
                {
                    controller.WaitForStatus(desiredStatus, timeout);
                }
                catch (System.ServiceProcess.TimeoutException)
                {
                    // Status change timed out
                }
            });
        }

        private string? FindServiceExecutable()
        {
            var possiblePaths = GetSearchPaths();

            foreach (var path in possiblePaths)
            {
                try
                {
                    var normalizedPath = Path.GetFullPath(path);
                    Debug.WriteLine($"Checking: {normalizedPath}");
                    if (File.Exists(normalizedPath))
                    {
                        Debug.WriteLine($"Found service at: {normalizedPath}");
                        return normalizedPath;
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"Error checking path {path}: {ex.Message}");
                }
            }

            return null;
        }

        private string[] GetSearchPaths()
        {
            var paths = new List<string>
            {
                // Same directory as config app
                Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) ?? "", "CamBridge.Service.exe"),
                // Parent directory (if config is in subfolder)
                Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) ?? "", "..", "CamBridge.Service.exe"),
                // Debug/Release output paths
                Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "CamBridge.Service.exe"),
            };

            // Find solution directory first for more accurate paths
            var solutionDir = FindSolutionDirectory();
            if (!string.IsNullOrEmpty(solutionDir))
            {
                // Add all known locations from PROJECT_WISDOM
                paths.AddRange(new[]
                {
                    // Standard debug/release paths
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "Debug", "net8.0", "CamBridge.Service.exe"),
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "Release", "net8.0", "CamBridge.Service.exe"),
                    
                    // win-x64 specific paths (from PROJECT_WISDOM)
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "Debug", "net8.0", "win-x64", "CamBridge.Service.exe"),
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "Release", "net8.0", "win-x64", "CamBridge.Service.exe"),
                    
                    // x64 configuration paths
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "x64", "Debug", "net8.0", "CamBridge.Service.exe"),
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "x64", "Release", "net8.0", "CamBridge.Service.exe"),
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "x64", "Debug", "net8.0", "win-x64", "CamBridge.Service.exe"),
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "x64", "Release", "net8.0", "win-x64", "CamBridge.Service.exe"),
                    
                    // net8.0-windows paths (this was missing!)
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "Debug", "net8.0-windows", "CamBridge.Service.exe"),
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "Release", "net8.0-windows", "CamBridge.Service.exe"),
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "Debug", "net8.0-windows", "win-x64", "CamBridge.Service.exe"),
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "Release", "net8.0-windows", "win-x64", "CamBridge.Service.exe"),
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "x64", "Debug", "net8.0-windows", "win-x64", "CamBridge.Service.exe"),
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "x64", "Release", "net8.0-windows", "win-x64", "CamBridge.Service.exe"),
                    
                    // Published output
                    Path.Combine(solutionDir, "publish", "CamBridge.Service.exe")
                });
            }
            else
            {
                // Fallback paths relative to current directory
                paths.AddRange(new[]
                {
                    Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..", "..", "..", "CamBridge.Service", "bin", "Debug", "net8.0", "CamBridge.Service.exe"),
                    Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..", "..", "..", "CamBridge.Service", "bin", "Release", "net8.0", "CamBridge.Service.exe"),
                    Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..", "..", "..", "CamBridge.Service", "bin", "Debug", "net8.0", "win-x64", "CamBridge.Service.exe"),
                    Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..", "..", "..", "CamBridge.Service", "bin", "x64", "Debug", "net8.0", "win-x64", "CamBridge.Service.exe"),
                    Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..", "..", "..", "CamBridge.Service", "bin", "x64", "Debug", "net8.0-windows", "win-x64", "CamBridge.Service.exe"),
                    Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..", "..", "..", "publish", "CamBridge.Service.exe")
                });
            }

            return paths.Distinct().ToArray();
        }

        private string? FindSolutionDirectory()
        {
            var directory = new DirectoryInfo(AppDomain.CurrentDomain.BaseDirectory);

            while (directory != null && directory.Parent != null)
            {
                if (directory.GetFiles("CamBridge.sln").Any())
                {
                    return directory.FullName;
                }
                directory = directory.Parent;
            }

            return null;
        }

        private void ConfigureServiceRecovery()
        {
            try
            {
                // Configure service to restart on failure
                var processInfo = new ProcessStartInfo
                {
                    FileName = "sc.exe",
                    Arguments = $"failure {ServiceName} reset= 86400 actions= restart/60000/restart/60000/restart/60000",
                    UseShellExecute = false,
                    CreateNoWindow = true,
                    Verb = "runas"
                };

                using var process = Process.Start(processInfo);
                process?.WaitForExit();
            }
            catch
            {
                // Recovery configuration is optional, so we don't fail the installation
            }
        }
    }
}


// === END src\CamBridge.Config\Services\ServiceManager.cs ===


