// src/CamBridge.Config/Converters/ValueConverters.cs
// Version: 0.7.25
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;
using System.Windows.Media;
using CamBridge.Core;

namespace CamBridge.Config.Converters
{
    /// <summary>
    /// Converts integer to Visibility based on comparison with parameter
    /// NEW in v0.7.28 for LogViewerPage
    /// </summary>
    public class IntToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            int intValue = 0;
            int compareValue = 0;

            // Convert value
            if (value != null)
            {
                try
                {
                    intValue = System.Convert.ToInt32(value);
                }
                catch
                {
                    // Default to 0 if conversion fails
                }
            }

            // Convert parameter
            if (parameter != null)
            {
                try
                {
                    compareValue = System.Convert.ToInt32(parameter);
                }
                catch
                {
                    // Default to 0 if conversion fails
                }
            }

            // Show when value equals compareValue
            return intValue == compareValue ? Visibility.Visible : Visibility.Collapsed;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts boolean values to Visibility
    /// </summary>
    public class BooleanToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool boolValue = value is bool b && b;
            bool invert = parameter as string == "Inverse";

            if (invert)
                return boolValue ? Visibility.Collapsed : Visibility.Visible;
            else
                return boolValue ? Visibility.Visible : Visibility.Collapsed;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Inverts boolean to visibility conversion
    /// </summary>
    public class InverseBooleanToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool boolValue = value is bool b && b;
            return boolValue ? Visibility.Collapsed : Visibility.Visible;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts numeric values greater than zero to true
    /// </summary>
    public class GreaterThanZeroConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value == null) return false;

            try
            {
                double numValue = System.Convert.ToDouble(value);
                return numValue > 0;
            }
            catch
            {
                return false;
            }
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts null values to Visibility
    /// </summary>
    public class NullToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool isNull = value == null;
            bool invert = parameter as string == "Inverse";

            if (invert)
                return isNull ? Visibility.Visible : Visibility.Collapsed;
            else
                return isNull ? Visibility.Collapsed : Visibility.Visible;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts zero values to Visibility
    /// </summary>
    public class ZeroToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool isZero = false;

            if (value != null)
            {
                try
                {
                    double numValue = System.Convert.ToDouble(value);
                    isZero = Math.Abs(numValue) < 0.0001; // Floating point comparison
                }
                catch
                {
                    // If conversion fails, treat as non-zero
                }
            }

            bool invert = parameter as string == "Inverse";

            if (invert)
                return isZero ? Visibility.Collapsed : Visibility.Visible;
            else
                return isZero ? Visibility.Visible : Visibility.Collapsed;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts error count to color brush
    /// </summary>
    public class ErrorCountToColorConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            int errorCount = 0;

            if (value != null)
            {
                try
                {
                    errorCount = System.Convert.ToInt32(value);
                }
                catch
                {
                    // Default to 0 if conversion fails
                }
            }

            // Return red color if errors exist, otherwise default
            if (errorCount > 0)
            {
                return new SolidColorBrush(Color.FromRgb(255, 107, 107)); // Light red
            }

            return DependencyProperty.UnsetValue; // Use default style
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts boolean values to inverse boolean
    /// </summary>
    public class InverseBooleanConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return !(value is bool b && b);
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return !(value is bool b && b);
        }
    }

    /// <summary>
    /// Converts empty string to visibility
    /// </summary>
    public class EmptyStringToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            string? str = value as string;
            bool isEmpty = string.IsNullOrWhiteSpace(str);
            bool invert = parameter as string == "Inverse";

            if (invert)
                return isEmpty ? Visibility.Visible : Visibility.Collapsed;
            else
                return isEmpty ? Visibility.Collapsed : Visibility.Visible;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts service status to color
    /// </summary>
    public class ServiceStatusToColorConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            string status = value as string ?? "";

            return status.ToLower() switch
            {
                "running" => new SolidColorBrush(Colors.Green),
                "stopped" => new SolidColorBrush(Colors.Red),
                "paused" => new SolidColorBrush(Colors.Orange),
                _ => new SolidColorBrush(Colors.Gray)
            };
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts seconds to milliseconds
    /// </summary>
    public class SecondsToMillisecondsConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is double seconds)
                return seconds * 1000;
            if (value is int intSeconds)
                return intSeconds * 1000;
            return 0;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is double milliseconds)
                return milliseconds / 1000;
            if (value is int intMilliseconds)
                return intMilliseconds / 1000;
            return 0;
        }
    }

    /// <summary>
    /// Converts enum value to boolean based on parameter
    /// </summary>
    public class EnumToBooleanConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value == null || parameter == null)
                return false;

            string enumValue = value.ToString();
            string targetValue = parameter.ToString();

            return enumValue.Equals(targetValue, StringComparison.InvariantCultureIgnoreCase);
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is bool isChecked && isChecked)
            {
                if (parameter != null && targetType.IsEnum)
                {
                    return Enum.Parse(targetType, parameter.ToString());
                }
            }

            return Binding.DoNothing;
        }
    }

    /// <summary>
    /// Converter for file selection dialogs
    /// </summary>
    public class FileSelectConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            // Simply pass through the value
            return value;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            // Simply pass through the value
            return value;
        }
    }

    /// <summary>
    /// Multi-value boolean OR converter
    /// </summary>
    public class MultiBooleanOrConverter : IMultiValueConverter
    {
        public object Convert(object[] values, Type targetType, object parameter, CultureInfo culture)
        {
            if (values == null || values.Length == 0)
                return false;

            foreach (var value in values)
            {
                if (value is bool b && b)
                    return true;
            }

            return false;
        }

        public object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts enum types to collection for ComboBox binding
    /// </summary>
    public class EnumToCollectionConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return Enum.GetValues(parameter as Type ?? value?.GetType() ?? typeof(object));
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts file size to human-readable format
    /// </summary>
    public class FileSizeConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value == null) return "0 B";

            long bytes = System.Convert.ToInt64(value);
            string[] sizes = { "B", "KB", "MB", "GB", "TB" };
            int order = 0;
            double size = bytes;

            while (size >= 1024 && order < sizes.Length - 1)
            {
                order++;
                size /= 1024;
            }

            return $"{size:0.##} {sizes[order]}";
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts TimeSpan to readable string
    /// </summary>
    public class TimeSpanToStringConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is TimeSpan timeSpan)
            {
                if (timeSpan.TotalDays >= 1)
                    return $"{(int)timeSpan.TotalDays}d {timeSpan.Hours}h {timeSpan.Minutes}m";
                else if (timeSpan.TotalHours >= 1)
                    return $"{(int)timeSpan.TotalHours}h {timeSpan.Minutes}m";
                else
                    return $"{timeSpan.Minutes}m {timeSpan.Seconds}s";
            }
            return "0s";
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Multi-value boolean AND converter
    /// </summary>
    public class MultiBooleanAndConverter : IMultiValueConverter
    {
        public object Convert(object[] values, Type targetType, object parameter, CultureInfo culture)
        {
            if (values == null || values.Length == 0)
                return false;

            foreach (var value in values)
            {
                if (!(value is bool b) || !b)
                    return false;
            }

            return true;
        }

        public object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Null and boolean AND converter
    /// </summary>
    public class NullBooleanAndConverter : IMultiValueConverter
    {
        public object Convert(object[] values, Type targetType, object parameter, CultureInfo culture)
        {
            if (values == null || values.Length < 2)
                return false;

            // First value should not be null, second should be true
            return values[0] != null && values[1] is bool b && b;
        }

        public object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts boolean to color (Green for true, Red for false)
    /// NEW in v0.7.21 for Dashboard minimal
    /// </summary>
    public class BoolToColorConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is bool isTrue)
            {
                return new SolidColorBrush(isTrue ? Colors.Green : Colors.Red);
            }
            return new SolidColorBrush(Colors.Gray);
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts Transform enum to a visual symbol for display
    /// NEW in v0.7.25 for Mapping Editor Redesign
    /// </summary>
    public class TransformToSymbolConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is ValueTransform transform)
            {
                return transform switch
                {
                    ValueTransform.None => "â†’",
                    ValueTransform.DateToDicom => "ðŸ“…â†’",
                    ValueTransform.TimeToDicom => "â°â†’",
                    ValueTransform.DateTimeToDicom => "ðŸ“…â°â†’",
                    ValueTransform.MapGender => "â™‚â™€â†’",
                    ValueTransform.RemovePrefix => "âœ‚â†’",
                    ValueTransform.ExtractDate => "ðŸ“…â†",
                    ValueTransform.ExtractTime => "â°â†",
                    ValueTransform.ToUpperCase => "Aâ†’",
                    ValueTransform.ToLowerCase => "aâ†’",
                    ValueTransform.Trim => "âŽµâ†’",
                    _ => "â†’"
                };
            }
            return "â†’";
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts Transform enum to a descriptive text
    /// NEW in v0.7.25 for Mapping Editor Redesign
    /// </summary>
    public class TransformToDescriptionConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is ValueTransform transform)
            {
                return transform switch
                {
                    ValueTransform.None => "Direct mapping",
                    ValueTransform.DateToDicom => "Convert date to DICOM format (YYYYMMDD)",
                    ValueTransform.TimeToDicom => "Convert time to DICOM format (HHMMSS)",
                    ValueTransform.DateTimeToDicom => "Convert datetime to DICOM format",
                    ValueTransform.MapGender => "Map gender values (M/F/O)",
                    ValueTransform.RemovePrefix => "Remove prefix from value",
                    ValueTransform.ExtractDate => "Extract date from datetime",
                    ValueTransform.ExtractTime => "Extract time from datetime",
                    ValueTransform.ToUpperCase => "Convert to uppercase",
                    ValueTransform.ToLowerCase => "Convert to lowercase",
                    ValueTransform.Trim => "Remove leading/trailing spaces",
                    _ => "Unknown transformation"
                };
            }
            return "No transformation";
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
// src\CamBridge.Config\ViewModels\DashboardViewModel.cs
// Version: 0.7.21
// Description: MINIMAL Dashboard - Just show if service is running!
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Net.Http;
using System.Text.Json;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Threading;
using CamBridge.Config.Models;
using CamBridge.Config.Services;
using CamBridge.Core;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;

namespace CamBridge.Config.ViewModels
{
    /// <summary>
    /// MINIMAL Dashboard - KISS approach!
    /// </summary>
    public partial class DashboardViewModel : ObservableObject
    {
        private readonly IConfigurationService _configurationService;
        private DispatcherTimer? _refreshTimer;
        private readonly HttpClient _httpClient = new();

        [ObservableProperty]
        private string serviceStatus = "Checking...";

        [ObservableProperty]
        private bool isServiceRunning = false;

        [ObservableProperty]
        private string uptimeText = "";

        [ObservableProperty]
        private string versionText = "";

        [ObservableProperty]
        private DateTime lastUpdate = DateTime.Now;

        [ObservableProperty]
        private bool isLoading;

        // Collections
        public ObservableCollection<PipelineStatusViewModel> PipelineStatuses { get; }

        // Commands
        public IAsyncRelayCommand RefreshCommand { get; }
        public IAsyncRelayCommand StartServiceCommand { get; }

        public DashboardViewModel(IApiService? apiService = null, IConfigurationService? configurationService = null)
        {
            // We ignore IApiService - go direct!
            _configurationService = configurationService ?? new ConfigurationService();

            PipelineStatuses = new ObservableCollection<PipelineStatusViewModel>();

            RefreshCommand = new AsyncRelayCommand(RefreshAsync);
            StartServiceCommand = new AsyncRelayCommand(StartServiceAsync);

            // Setup timer
            _refreshTimer = new DispatcherTimer
            {
                Interval = TimeSpan.FromSeconds(5)
            };
            _refreshTimer.Tick += async (s, e) => await RefreshAsync();
            _refreshTimer.Start();

            // Initial load
            Task.Run(async () => await RefreshAsync());
        }

        private async Task RefreshAsync()
        {
            try
            {
                IsLoading = true;
                Debug.WriteLine($"[{DateTime.Now:HH:mm:ss}] Dashboard refresh...");

                // MINIMAL: Direct HTTP call!
                var response = await _httpClient.GetAsync("http://localhost:5111/api/status");

                if (response.IsSuccessStatusCode)
                {
                    var json = await response.Content.ReadAsStringAsync();
                    var status = JsonSerializer.Deserialize<ServiceStatusModel>(json, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                    if (status != null)
                    {
                        // Update UI on dispatcher
                        await Application.Current.Dispatcher.InvokeAsync(() =>
                        {
                            IsServiceRunning = true;
                            ServiceStatus = status.Service.Status;
                            UptimeText = $"Uptime: {status.Service.Uptime}";
                            VersionText = $"Version: {status.Service.Version}";

                            Debug.WriteLine($"Service is {status.ServiceStatus}!");

                            // Update pipelines
                            if (status.Pipelines != null)
                            {
                                UpdatePipelines(status.Pipelines);
                            }
                        });
                    }
                }
                else
                {
                    // Service offline
                    await Application.Current.Dispatcher.InvokeAsync(() =>
                    {
                        IsServiceRunning = false;
                        ServiceStatus = "Offline";
                        UptimeText = "";
                        VersionText = "";
                        Debug.WriteLine("Service is offline!");
                    });
                }

                LastUpdate = DateTime.Now;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Dashboard refresh error: {ex.Message}");

                await Application.Current.Dispatcher.InvokeAsync(() =>
                {
                    IsServiceRunning = false;
                    ServiceStatus = "Offline";
                    UptimeText = "";
                    VersionText = "Cannot connect to service";
                });
            }
            finally
            {
                IsLoading = false;
            }
        }

private void UpdatePipelines(List<PipelineStatusData> pipelines)
{
    PipelineStatuses.Clear();

    foreach (var p in pipelines)
    {
        PipelineStatuses.Add(new PipelineStatusViewModel
        {
            PipelineName = p.Name,
            Status = p.IsActive ? "Active" : "Inactive",
            IsEnabled = p.IsActive,
            QueueLength = p.QueueDepth,           // Changed from QueueLength
            ProcessedToday = p.ProcessedCount,    // Changed from TotalProcessed
            ErrorsToday = p.ErrorCount,           // Changed from TotalFailed
            WatchFolder = p.WatchPath             // Changed from WatchedFolders[0]
        });
    }
}

        private async Task StartServiceAsync()
        {
            try
            {
                var startInfo = new ProcessStartInfo
                {
                    FileName = "net.exe",
                    Arguments = "start CamBridgeService",
                    UseShellExecute = false,
                    CreateNoWindow = true,
                    Verb = "runas"
                };

                var process = Process.Start(startInfo);
                await process!.WaitForExitAsync();

                // Wait and refresh
                await Task.Delay(2000);
                await RefreshAsync();
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Failed to start service: {ex.Message}");
            }
        }

        public void Cleanup()
        {
            _refreshTimer?.Stop();
            _httpClient?.Dispose();
        }
    }
}
<!-- src\CamBridge.Config\Views\DashboardPage.xaml -->
<!-- Version: 0.7.28 - Uniform Design with Perfect Edges -->
<Page x:Class="CamBridge.Config.Views.DashboardPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:ui="http://schemas.modernwpf.com/2019"
      Title="Dashboard">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Header -->
        <Border Grid.Row="0"
                Background="{DynamicResource SystemControlBackgroundChromeMediumBrush}">
            <Grid Height="60">
                <TextBlock Text="Dashboard"
                           FontSize="24"
                           FontWeight="SemiBold"
                           VerticalAlignment="Center"
                           Margin="24,0,0,0"/>
                <Button Content="Refresh" 
                        Command="{Binding RefreshCommand}"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Center"
                        Margin="0,0,24,0"
                        MinWidth="80"/>
            </Grid>
        </Border>

        <!-- Content with margins on all sides -->
        <ScrollViewer Grid.Row="1" 
                      VerticalScrollBarVisibility="Auto"
                      HorizontalScrollBarVisibility="Disabled">
            <StackPanel Margin="16,16,16,0">
                <!-- Service Status Card -->
                <Border Background="{DynamicResource SystemControlBackgroundAltHighBrush}"
                            BorderThickness="0"
                            CornerRadius="2"
                            Margin="0,0,0,16">
                    <Grid Margin="16,12">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <!-- Status Icon -->
                        <Ellipse Grid.Column="0"
                                 Width="16" Height="16"
                                 Margin="0,0,12,0"
                                 VerticalAlignment="Center">
                            <Ellipse.Fill>
                                <Binding Path="ServiceStatus" Converter="{StaticResource ServiceStatusToColorConverter}"/>
                            </Ellipse.Fill>
                        </Ellipse>

                        <!-- Status Text -->
                        <StackPanel Grid.Column="1" VerticalAlignment="Center">
                            <TextBlock Text="{Binding ServiceStatus, StringFormat='Service: {0}'}" 
                                       FontSize="16" 
                                       FontWeight="SemiBold"/>
                            <StackPanel Orientation="Horizontal" Opacity="0.7">
                                <TextBlock Text="{Binding UptimeText}" Margin="0,0,16,0"/>
                                <TextBlock Text="{Binding VersionText}"/>
                            </StackPanel>
                            <TextBlock Text="{Binding LastUpdate, StringFormat='Last update: {0:HH:mm:ss}'}" 
                                       FontSize="11" 
                                       Opacity="0.5"/>
                        </StackPanel>

                        <!-- Start Button -->
                        <Button Grid.Column="2"
                                Content="Start Service"
                                Command="{Binding StartServiceCommand}"
                                VerticalAlignment="Center"
                                MinWidth="100"
                                Visibility="{Binding IsServiceRunning, Converter={StaticResource InverseBooleanToVisibilityConverter}}"/>
                    </Grid>
                </Border>

                <!-- Pipelines Section -->
                <TextBlock Text="Pipelines"
                           FontSize="18"
                           FontWeight="SemiBold"
                           Margin="0,0,0,8"/>

                <!-- Pipeline List -->
                <Border Background="{DynamicResource SystemControlBackgroundAltHighBrush}"
                        BorderThickness="0"
                        CornerRadius="2">
                    <ItemsControl ItemsSource="{Binding PipelineStatuses}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <Border BorderThickness="0,0,0,1"
                                        BorderBrush="{DynamicResource SystemControlForegroundBaseMediumLowBrush}">
                                    <Grid Margin="16,12">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>

                                        <!-- Status -->
                                        <Ellipse Grid.Column="0"
                                                 Width="10" Height="10"
                                                 Margin="0,0,12,0"
                                                 VerticalAlignment="Center">
                                            <Ellipse.Style>
                                                <Style TargetType="Ellipse">
                                                    <Setter Property="Fill" Value="#999"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding IsEnabled}" Value="True">
                                                            <Setter Property="Fill" Value="#28A745"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Ellipse.Style>
                                        </Ellipse>

                                        <!-- Name & Path -->
                                        <StackPanel Grid.Column="1" VerticalAlignment="Center">
                                            <TextBlock Text="{Binding PipelineName}" 
                                                       FontWeight="SemiBold"
                                                       FontSize="14"/>
                                            <TextBlock Text="{Binding WatchFolder}" 
                                                       FontSize="12" 
                                                       Opacity="0.7"
                                                       TextTrimming="CharacterEllipsis"/>
                                        </StackPanel>

                                        <!-- Stats -->
                                        <StackPanel Grid.Column="2" 
                                                    Orientation="Horizontal"
                                                    VerticalAlignment="Center">
                                            <TextBlock Margin="0,0,16,0"
                                                       FontSize="13"
                                                       Opacity="0.8">
                                                <Run Text="Processed: "/>
                                                <Run Text="{Binding ProcessedToday}"/>
                                            </TextBlock>
                                            <TextBlock Margin="0,0,16,0"
                                                       FontSize="13"
                                                       Opacity="0.8">
                                                <Run Text="Queue: "/>
                                                <Run Text="{Binding QueueLength}"/>
                                            </TextBlock>
                                            <StackPanel Orientation="Horizontal"
                                                        Visibility="{Binding ErrorsToday, Converter={StaticResource GreaterThanZeroConverter}}">
                                                <TextBlock Text="Errors: " Opacity="0.7" FontSize="13"/>
                                                <TextBlock Text="{Binding ErrorsToday}" Foreground="OrangeRed" FontWeight="SemiBold" FontSize="13"/>
                                            </StackPanel>
                                        </StackPanel>
                                    </Grid>
                                </Border>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </Border>
            </StackPanel>
        </ScrollViewer>

        <!-- Loading Overlay -->
        <ui:ProgressBar Grid.RowSpan="2"
                        IsIndeterminate="True"
                        Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}}"
                        VerticalAlignment="Top"/>
    </Grid>
</Page>
<!-- src\CamBridge.Config\Views\PipelineConfigPage.xaml -->
<!-- Version: 0.8.1 -->
<!-- Description: Pipeline Configuration - With PACS Upload Tab -->

<Page x:Class="CamBridge.Config.Views.PipelineConfigPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:ui="http://schemas.modernwpf.com/2019"
      xmlns:conv="clr-namespace:CamBridge.Config.Converters"
      xmlns:core="clr-namespace:CamBridge.Core;assembly=CamBridge.Core">

    <Page.Resources>
        <!-- Converters -->
        <conv:BooleanToVisibilityConverter x:Key="BoolToVisibility"/>
        <conv:InverseBooleanToVisibilityConverter x:Key="InverseBoolToVisibility"/>
        <conv:NullToVisibilityConverter x:Key="NullToVisibility"/>

        <!-- Styles -->
        <Style x:Key="SettingHeaderStyle" TargetType="TextBlock">
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Margin" Value="0,16,0,8"/>
        </Style>

        <Style x:Key="SettingLabelStyle" TargetType="TextBlock">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Margin" Value="0,0,12,0"/>
            <Setter Property="Width" Value="150"/>
        </Style>

        <Style x:Key="TabHeaderStyle" TargetType="TextBlock">
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Margin" Value="0,0,0,12"/>
        </Style>
    </Page.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Header -->
        <Border Grid.Row="0"
                Background="{DynamicResource SystemControlBackgroundChromeMediumBrush}">
            <Grid Height="60">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <TextBlock Text="Pipeline Configuration"
                           FontSize="24"
                           FontWeight="SemiBold"
                           VerticalAlignment="Center"
                           Margin="24,0,0,0"/>

                <StackPanel Grid.Column="1" 
                            Orientation="Horizontal"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Margin="0,0,24,0">
                    <StackPanel Margin="0,0,16,0" 
                                VerticalAlignment="Center">
                        <TextBlock Text="{Binding Pipelines.Count, StringFormat='{}{0} pipelines configured'}"
                                   HorizontalAlignment="Right"
                                   FontSize="11"
                                   Opacity="0.7"/>
                        <TextBlock HorizontalAlignment="Right"
                                   FontSize="11"
                                   Opacity="0.7">
                            <Run Text="âœ“" Foreground="Green" FontSize="10"/>
                            <Run Text=" Auto-backup enabled"/>
                        </TextBlock>
                    </StackPanel>

                    <Button Command="{Binding SaveAllCommand}"
                            Style="{StaticResource AccentButtonStyle}"
                            MinWidth="140">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Save All Pipelines" Margin="0,0,8,0"/>
                            <TextBlock Text="(Ctrl+S)" Opacity="0.7" FontSize="11"/>
                        </StackPanel>
                    </Button>
                </StackPanel>
            </Grid>
        </Border>

        <!-- Main Content -->
        <Grid Grid.Row="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <!-- Pipeline Area -->
            <Grid Grid.Row="0" Margin="16,16,16,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="320" MinWidth="280"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <!-- Pipeline List -->
                <Border Grid.Column="0"
                    Background="{DynamicResource SystemControlBackgroundAltHighBrush}"
                    BorderBrush="{DynamicResource SystemControlForegroundBaseMediumLowBrush}"
                    BorderThickness="1"
                    CornerRadius="2">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <!-- List Header -->
                        <Border Grid.Row="0"
                            Background="{DynamicResource SystemControlBackgroundChromeMediumBrush}"
                            BorderBrush="{DynamicResource SystemControlForegroundBaseMediumLowBrush}"
                            BorderThickness="0,0,0,1"
                            Padding="12,8">
                            <TextBlock Text="Pipelines"
                                   FontSize="14"
                                   FontWeight="SemiBold"/>
                        </Border>

                        <!-- Pipeline Items -->
                        <ListBox Grid.Row="1"
                             ItemsSource="{Binding Pipelines}"
                             SelectedItem="{Binding SelectedPipeline}"
                             BorderThickness="0"
                             ScrollViewer.HorizontalScrollBarVisibility="Disabled">
                            <ListBox.Style>
                                <Style TargetType="ListBox" BasedOn="{StaticResource {x:Type ListBox}}">
                                    <Setter Property="BorderThickness" Value="0"/>
                                </Style>
                            </ListBox.Style>
                            <ListBox.ItemContainerStyle>
                                <Style TargetType="ListBoxItem" BasedOn="{StaticResource DefaultListBoxItemStyle}">
                                    <Setter Property="Padding" Value="10,6"/>
                                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                    <Setter Property="BorderThickness" Value="0"/>
                                </Style>
                            </ListBox.ItemContainerStyle>
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>

                                        <CheckBox Grid.Column="0"
                                              IsChecked="{Binding Enabled}"
                                              Margin="0,0,8,0"
                                              VerticalAlignment="Center"/>

                                        <StackPanel Grid.Column="1">
                                            <TextBlock Text="{Binding Name}"
                                                   FontWeight="SemiBold"
                                                   TextTrimming="CharacterEllipsis"/>
                                            <TextBlock Text="{Binding WatchSettings.Path}"
                                                   FontSize="11"
                                                   Opacity="0.7"
                                                   TextTrimming="CharacterEllipsis"
                                                   ToolTip="{Binding WatchSettings.Path}"/>
                                        </StackPanel>
                                    </Grid>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>

                        <!-- Add Button -->
                        <Border Grid.Row="2"
                            Background="{DynamicResource SystemControlBackgroundChromeMediumBrush}"
                            BorderBrush="{DynamicResource SystemControlForegroundBaseMediumLowBrush}"
                            BorderThickness="0,1,0,0"
                            Padding="10">
                            <Button Command="{Binding AddPipelineCommand}"
                                HorizontalAlignment="Stretch">
                                <TextBlock Text="+ Add Pipeline"/>
                            </Button>
                        </Border>
                    </Grid>
                </Border>

                <!-- Splitter -->
                <GridSplitter Grid.Column="1"
                          Width="2"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Stretch"
                          Background="{DynamicResource SystemControlBackgroundChromeMediumBrush}"
                          Margin="8,0"/>

                <!-- Pipeline Details -->
                <Grid Grid.Column="2"
                  Margin="8,0,0,0"
                  Visibility="{Binding SelectedPipeline, Converter={StaticResource NullToVisibility}}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <!-- Pipeline Header -->
                    <Grid Grid.Row="0" Margin="0,0,0,16">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <TextBlock Text="{Binding SelectedPipeline.Name}"
                               FontSize="20"
                               FontWeight="SemiBold"/>

                        <Button Grid.Column="1"
                            Content="Delete Pipeline"
                            Command="{Binding DeletePipelineCommand}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Foreground="{DynamicResource SystemControlErrorTextForegroundBrush}"/>
                    </Grid>

                    <!-- Configuration Tabs -->
                    <TabControl Grid.Row="1"
                                ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                                Padding="0">

                        <!-- General Tab -->
                        <TabItem Header="General">
                            <ScrollViewer Padding="12">
                                <StackPanel>
                                    <TextBlock Text="Basic Configuration" Style="{StaticResource TabHeaderStyle}"/>

                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>

                                        <TextBlock Grid.Row="0" Grid.Column="0"
                                                   Text="Pipeline Name:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <TextBox Grid.Row="0" Grid.Column="1"
                                                 Text="{Binding SelectedPipeline.Name, UpdateSourceTrigger=PropertyChanged}"
                                                 Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="1" Grid.Column="0"
                                                   Text="Description:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <TextBox Grid.Row="1" Grid.Column="1"
                                                 Text="{Binding SelectedPipeline.Description}"
                                                 TextWrapping="Wrap"
                                                 AcceptsReturn="True"
                                                 Height="60"
                                                 Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="2" Grid.Column="0"
                                                   Text="Active:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <CheckBox Grid.Row="2" Grid.Column="1"
                                                  IsChecked="{Binding SelectedPipeline.Enabled}"
                                                  Content="Enable this pipeline"
                                                  Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="3" Grid.Column="0"
                                                   Text="Mapping Set:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <ComboBox Grid.Row="3" Grid.Column="1"
                                                  ItemsSource="{Binding MappingSets}"
                                                  SelectedValue="{Binding SelectedPipeline.MappingSetId}"
                                                  SelectedValuePath="Id"
                                                  DisplayMemberPath="Name"
                                                  HorizontalAlignment="Stretch"/>
                                    </Grid>
                                </StackPanel>
                            </ScrollViewer>
                        </TabItem>

                        <!-- Folders Tab -->
                        <TabItem Header="Folders">
                            <ScrollViewer Padding="16">
                                <StackPanel>
                                    <TextBlock Text="Folder Configuration" Style="{StaticResource TabHeaderStyle}"/>

                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>

                                        <TextBlock Grid.Row="0" Grid.Column="0"
                                                   Text="Watch Folder:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <Grid Grid.Row="0" Grid.Column="1" Margin="0,0,0,8">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <TextBox Grid.Column="0"
                                                     Text="{Binding SelectedPipeline.WatchSettings.Path, UpdateSourceTrigger=PropertyChanged}"/>
                                            <Button Grid.Column="1"
                                                    Content="Browse..."
                                                    Width="80"
                                                    Margin="8,0,0,0"
                                                    Click="BrowseWatchFolder_Click"/>
                                        </Grid>

                                        <TextBlock Grid.Row="1" Grid.Column="0"
                                                   Text="File Pattern:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <TextBox Grid.Row="1" Grid.Column="1"
                                                 Text="{Binding SelectedPipeline.WatchSettings.FilePattern}"
                                                 Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="2" Grid.Column="0"
                                                   Text="Subdirectories:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <CheckBox Grid.Row="2" Grid.Column="1"
                                                  IsChecked="{Binding SelectedPipeline.WatchSettings.IncludeSubdirectories}"
                                                  Content="Include subdirectories"
                                                  Margin="0,0,0,16"/>

                                        <TextBlock Grid.Row="3" Grid.Column="0"
                                                   Text="Output Folder:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <Grid Grid.Row="3" Grid.Column="1" Margin="0,0,0,8">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <TextBox Grid.Column="0"
                                                     Text="{Binding SelectedPipeline.ProcessingOptions.ArchiveFolder, UpdateSourceTrigger=PropertyChanged}"/>
                                            <Button Grid.Column="1"
                                                    Content="Browse..."
                                                    Width="80"
                                                    Margin="8,0,0,0"
                                                    Click="BrowseOutputFolder_Click"/>
                                        </Grid>

                                        <TextBlock Grid.Row="4" Grid.Column="0"
                                                   Text="Error Folder:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <Grid Grid.Row="4" Grid.Column="1" Margin="0,0,0,8">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <TextBox Grid.Column="0"
                                                     Text="{Binding SelectedPipeline.ProcessingOptions.ErrorFolder}"/>
                                            <Button Grid.Column="1"
                                                    Content="Browse..."
                                                    Width="80"
                                                    Margin="8,0,0,0"
                                                    Click="BrowseErrorFolder_Click"/>
                                        </Grid>

                                        <TextBlock Grid.Row="5" Grid.Column="0"
                                                   Text="Dead Letter Folder:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <Grid Grid.Row="5" Grid.Column="1" Margin="0,0,0,8">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <TextBox Grid.Column="0"
                                                     Text="{Binding SelectedPipeline.ProcessingOptions.DeadLetterFolder}"/>
                                            <Button Grid.Column="1"
                                                    Content="Browse..."
                                                    Width="80"
                                                    Margin="8,0,0,0"
                                                    Click="BrowseDeadLetterFolder_Click"/>
                                        </Grid>

                                        <TextBlock Grid.Row="6" Grid.Column="0"
                                                   Text="Output Organization:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <ComboBox Grid.Row="6" Grid.Column="1"
                                                  ItemsSource="{Binding OutputOrganizations}"
                                                  SelectedItem="{Binding SelectedPipeline.ProcessingOptions.OutputOrganization}"/>
                                    </Grid>
                                </StackPanel>
                            </ScrollViewer>
                        </TabItem>

                        <!-- PACS Upload Tab -->
                        <TabItem Header="PACS Upload">
                            <ScrollViewer Padding="16">
                                <StackPanel>
                                    <TextBlock Text="PACS Upload Configuration" Style="{StaticResource TabHeaderStyle}"/>
                                    <TextBlock Text="Automatically upload DICOM files to PACS after creation"
                                               FontSize="12"
                                               Opacity="0.7"
                                               Margin="0,0,0,16"/>

                                    <!-- Enable PACS -->
                                    <CheckBox IsChecked="{Binding SelectedPipeline.PacsConfiguration.Enabled}"
                                              Content="Enable automatic PACS upload after DICOM creation"
                                              FontSize="14" FontWeight="SemiBold"
                                              Margin="0,0,0,20"/>

                                    <!-- Server Settings -->
                                    <GroupBox Header="PACS Server Configuration" 
                                              IsEnabled="{Binding SelectedPipeline.PacsConfiguration.Enabled}"
                                              Margin="0,0,0,15">
                                        <Grid Margin="10">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="150"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>

                                            <TextBlock Grid.Row="0" Grid.Column="0" 
                                                       Text="Host/IP:" 
                                                       Style="{StaticResource SettingLabelStyle}"/>
                                            <TextBox Grid.Row="0" Grid.Column="1" 
                                                     Text="{Binding SelectedPipeline.PacsConfiguration.Host}"
                                                     ui:ControlHelper.PlaceholderText="192.168.1.100 or pacs.hospital.local"
                                                     Margin="0,0,0,8"/>

                                            <TextBlock Grid.Row="1" Grid.Column="0" 
                                                       Text="Port:" 
                                                       Style="{StaticResource SettingLabelStyle}"/>
                                            <TextBox Grid.Row="1" Grid.Column="1" 
                                                     Text="{Binding SelectedPipeline.PacsConfiguration.Port}"
                                                     ui:ControlHelper.PlaceholderText="104"
                                                     HorizontalAlignment="Left"
                                                     Width="100"
                                                     Margin="0,0,0,8"/>

                                            <TextBlock Grid.Row="2" Grid.Column="0" 
                                                       Text="Called AE Title:" 
                                                       Style="{StaticResource SettingLabelStyle}"/>
                                            <TextBox Grid.Row="2" Grid.Column="1" 
                                                     Text="{Binding SelectedPipeline.PacsConfiguration.CalledAeTitle}"
                                                     ui:ControlHelper.PlaceholderText="PACS_SERVER"
                                                     CharacterCasing="Upper"
                                                     MaxLength="16"
                                                     Margin="0,0,0,8"/>

                                            <TextBlock Grid.Row="3" Grid.Column="0" 
                                                       Text="Calling AE Title:" 
                                                       Style="{StaticResource SettingLabelStyle}"/>
                                            <TextBox Grid.Row="3" Grid.Column="1" 
                                                     Text="{Binding SelectedPipeline.PacsConfiguration.CallingAeTitle}"
                                                     ui:ControlHelper.PlaceholderText="CAMBRIDGE"
                                                     CharacterCasing="Upper"
                                                     MaxLength="16"
                                                     Margin="0,0,0,8"/>

                                            <TextBlock Grid.Row="4" Grid.Column="0" 
                                                       Text="Timeout (seconds):" 
                                                       Style="{StaticResource SettingLabelStyle}"/>
                                            <TextBox Grid.Row="4" Grid.Column="1" 
                                                     Text="{Binding SelectedPipeline.PacsConfiguration.TimeoutSeconds}"
                                                     HorizontalAlignment="Left"
                                                     Width="100"/>
                                        </Grid>
                                    </GroupBox>

                                    <!-- Retry Settings -->
                                    <GroupBox Header="Retry Configuration" 
                                              IsEnabled="{Binding SelectedPipeline.PacsConfiguration.Enabled}"
                                              Margin="0,0,0,15">
                                        <Grid Margin="10">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="150"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>

                                            <TextBlock Grid.Row="0" Grid.Column="0" 
                                                       Text="Max Retry Attempts:" 
                                                       Style="{StaticResource SettingLabelStyle}"/>
                                            <TextBox Grid.Row="0" Grid.Column="1" 
                                                     Text="{Binding SelectedPipeline.PacsConfiguration.MaxRetryAttempts}"
                                                     HorizontalAlignment="Left"
                                                     Width="100"
                                                     Margin="0,0,0,8"/>

                                            <TextBlock Grid.Row="1" Grid.Column="0" 
                                                       Text="Retry Delay (seconds):" 
                                                       Style="{StaticResource SettingLabelStyle}"/>
                                            <TextBox Grid.Row="1" Grid.Column="1" 
                                                     Text="{Binding SelectedPipeline.PacsConfiguration.RetryDelaySeconds}"
                                                     HorizontalAlignment="Left"
                                                     Width="100"
                                                     Margin="0,0,0,8"/>

                                            <TextBlock Grid.Row="2" Grid.Column="0" 
                                                       Text="Concurrent Uploads:" 
                                                       Style="{StaticResource SettingLabelStyle}"/>
                                            <TextBox Grid.Row="2" Grid.Column="1" 
                                                     Text="{Binding SelectedPipeline.PacsConfiguration.MaxConcurrentUploads}"
                                                     HorizontalAlignment="Left"
                                                     Width="100"/>
                                        </Grid>
                                    </GroupBox>

                                    <!-- Test Connection -->
                                    <Button Content="Test Connection (C-ECHO)"
                                            Command="{Binding TestPacsConnectionCommand}"
                                            IsEnabled="{Binding SelectedPipeline.PacsConfiguration.Enabled}"
                                            HorizontalAlignment="Left"
                                            Padding="20,8"
                                            Margin="0,0,0,10"/>

                                    <TextBlock Text="{Binding PacsTestResult}"
                                               Foreground="{Binding PacsTestResultColor}"
                                               FontWeight="SemiBold"
                                               Margin="0,5,0,0"/>

                                    <!-- Info Box -->
                                    <Border Background="{DynamicResource SystemControlBackgroundListLowBrush}"
                                            BorderBrush="{DynamicResource SystemControlForegroundBaseMediumLowBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4"
                                            Padding="12"
                                            Margin="0,20,0,0">
                                        <StackPanel>
                                            <TextBlock Text="â„¹ PACS Upload Information" 
                                                       FontWeight="SemiBold"
                                                       Margin="0,0,0,8"/>
                                            <TextBlock TextWrapping="Wrap" FontSize="12">
                                                â€¢ DICOM files are uploaded immediately after successful creation<LineBreak/>
                                                â€¢ Failed uploads are retried automatically based on retry settings<LineBreak/>
                                                â€¢ AE Titles must be configured on the PACS server<LineBreak/>
                                                â€¢ Standard DICOM port is 104 (may vary by installation)<LineBreak/>
                                                â€¢ Test connection uses C-ECHO to verify connectivity
                                            </TextBlock>
                                        </StackPanel>
                                    </Border>
                                </StackPanel>
                            </ScrollViewer>
                        </TabItem>

                        <!-- DICOM Tab -->
                        <TabItem Header="DICOM">
                            <ScrollViewer Padding="16">
                                <StackPanel>
                                    <TextBlock Text="DICOM Overrides (Optional)" Style="{StaticResource TabHeaderStyle}"/>
                                    <TextBlock Text="Leave empty to use global DICOM settings"
                                               FontSize="12"
                                               Opacity="0.7"
                                               Margin="0,0,0,16"/>

                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>

                                        <TextBlock Grid.Row="0" Grid.Column="0"
                                                   Text="Institution Name:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <TextBox Grid.Row="0" Grid.Column="1"
                                                 Text="{Binding SelectedPipelineDicomOverrides.InstitutionName}"
                                                 ui:ControlHelper.PlaceholderText="e.g. Radiology Department"
                                                 Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="1" Grid.Column="0"
                                                   Text="Department:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <TextBox Grid.Row="1" Grid.Column="1"
                                                 Text="{Binding SelectedPipelineDicomOverrides.InstitutionDepartment}"
                                                 ui:ControlHelper.PlaceholderText="e.g. Emergency Room"
                                                 Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="2" Grid.Column="0"
                                                   Text="Station Name:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <TextBox Grid.Row="2" Grid.Column="1"
                                                 Text="{Binding SelectedPipelineDicomOverrides.StationName}"
                                                 ui:ControlHelper.PlaceholderText="e.g. ER_WORKSTATION_01"/>
                                    </Grid>
                                </StackPanel>
                            </ScrollViewer>
                        </TabItem>

                        <!-- Processing Tab -->
                        <TabItem Header="Processing">
                            <ScrollViewer Padding="16">
                                <StackPanel>
                                    <TextBlock Text="Processing Options" Style="{StaticResource TabHeaderStyle}"/>

                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>

                                        <TextBlock Grid.Row="0" Grid.Column="0"
                                                   Text="File Delay (seconds):"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <TextBox Grid.Row="0" Grid.Column="1"
                                                 Text="{Binding SelectedPipeline.WatchSettings.MinimumFileAgeSeconds}"
                                                 HorizontalAlignment="Left"
                                                 Width="120"
                                                 Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="1" Grid.Column="0"
                                                   Text="Max Concurrent:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <TextBox Grid.Row="1" Grid.Column="1"
                                                 Text="{Binding SelectedPipeline.ProcessingOptions.MaxConcurrentProcessing}"
                                                 HorizontalAlignment="Left"
                                                 Width="120"
                                                 Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="2" Grid.Column="0"
                                                   Text="On Success:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <ComboBox Grid.Row="2" Grid.Column="1"
                                                  ItemsSource="{Binding ProcessingActions}"
                                                  SelectedItem="{Binding SelectedPipeline.ProcessingOptions.SuccessAction}"
                                                  Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="3" Grid.Column="0"
                                                   Text="On Failure:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <ComboBox Grid.Row="3" Grid.Column="1"
                                                  ItemsSource="{Binding ProcessingActions}"
                                                  SelectedItem="{Binding SelectedPipeline.ProcessingOptions.FailureAction}"
                                                  Margin="0,0,0,16"/>

                                        <TextBlock Grid.Row="4" Grid.Column="0"
                                                   Text="Retry Options:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <CheckBox Grid.Row="4" Grid.Column="1"
                                                  IsChecked="{Binding SelectedPipeline.ProcessingOptions.RetryOnFailure}"
                                                  Content="Enable retry on failure"
                                                  Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="5" Grid.Column="0"
                                                   Text="Max Retries:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <TextBox Grid.Row="5" Grid.Column="1"
                                                 Text="{Binding SelectedPipeline.ProcessingOptions.MaxRetryAttempts}"
                                                 HorizontalAlignment="Left"
                                                 Width="120"
                                                 IsEnabled="{Binding SelectedPipeline.ProcessingOptions.RetryOnFailure}"
                                                 Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="6" Grid.Column="0"
                                                   Text="Backup Files:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <CheckBox Grid.Row="6" Grid.Column="1"
                                                  IsChecked="{Binding SelectedPipeline.ProcessingOptions.CreateBackup}"
                                                  Content="Create backup before processing"
                                                  Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="7" Grid.Column="0"
                                                   Text="Process Existing:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <CheckBox Grid.Row="7" Grid.Column="1"
                                                  IsChecked="{Binding SelectedPipeline.ProcessingOptions.ProcessExistingOnStartup}"
                                                  Content="Process existing files on startup"/>
                                    </Grid>
                                </StackPanel>
                            </ScrollViewer>
                        </TabItem>

                        <!-- Logging Tab -->
                        <TabItem Header="Logging">
                            <ScrollViewer Padding="16">
                                <StackPanel>
                                    <TextBlock Text="Pipeline-specific Logging" Style="{StaticResource TabHeaderStyle}"/>
                                    <TextBlock Text="Override global logging settings for this pipeline"
                                               FontSize="12"
                                               Opacity="0.7"
                                               Margin="0,0,0,16"/>

                                    <CheckBox Content="Use custom logging for this pipeline"
                                              IsChecked="{Binding UseCustomLogging}"
                                              Margin="0,0,0,16"/>

                                    <Grid IsEnabled="{Binding UseCustomLogging}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>

                                        <TextBlock Grid.Row="0" Grid.Column="0"
                                                   Text="Log Level:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <ComboBox Grid.Row="0" Grid.Column="1"
                                                  ItemsSource="{Binding LogLevels}"
                                                  SelectedItem="{Binding PipelineLogLevel}"
                                                  HorizontalAlignment="Left"
                                                  Width="200"
                                                  Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="1" Grid.Column="0"
                                                   Text="Log Folder:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <Grid Grid.Row="1" Grid.Column="1" Margin="0,0,0,8">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <TextBox Grid.Column="0"
                                                     Text="{Binding PipelineLogFolder}"/>
                                            <Button Grid.Column="1"
                                                    Content="Browse..."
                                                    Width="80"
                                                    Margin="8,0,0,0"
                                                    Click="BrowseLogFolder_Click"/>
                                        </Grid>

                                        <TextBlock Grid.Row="2" Grid.Column="0"
                                                   Text="Retention Days:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <TextBox Grid.Row="2" Grid.Column="1"
                                                 Text="{Binding PipelineLogRetentionDays}"
                                                 HorizontalAlignment="Left"
                                                 Width="120"/>
                                    </Grid>
                                </StackPanel>
                            </ScrollViewer>
                        </TabItem>

                        <!-- Notifications Tab -->
                        <TabItem Header="Notifications">
                            <ScrollViewer Padding="16">
                                <StackPanel>
                                    <TextBlock Text="Pipeline-specific Notifications" Style="{StaticResource TabHeaderStyle}"/>
                                    <TextBlock Text="Configure alerts and notifications for this pipeline"
                                               FontSize="12"
                                               Opacity="0.7"
                                               Margin="0,0,0,16"/>

                                    <CheckBox Content="Override global notification settings"
                                              IsChecked="{Binding UseCustomNotifications}"
                                              Margin="0,0,0,16"/>

                                    <Grid IsEnabled="{Binding UseCustomNotifications}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>

                                        <TextBlock Grid.Row="0" Grid.Column="0"
                                                   Text="Email To:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <TextBox Grid.Row="0" Grid.Column="1"
                                                 Text="{Binding PipelineEmailTo}"
                                                 ui:ControlHelper.PlaceholderText="dept@hospital.com;manager@hospital.com"
                                                 Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="1" Grid.Column="0"
                                                   Text="Alert Level:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <ComboBox Grid.Row="1" Grid.Column="1"
                                                  ItemsSource="{Binding NotificationLevels}"
                                                  SelectedItem="{Binding PipelineAlertLevel}"
                                                  HorizontalAlignment="Left"
                                                  Width="200"
                                                  Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="2" Grid.Column="0"
                                                   Text="Daily Summary:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <CheckBox Grid.Row="2" Grid.Column="1"
                                                  IsChecked="{Binding PipelineSendDailySummary}"
                                                  Content="Send daily processing summary"
                                                  Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="3" Grid.Column="0"
                                                   Text="Alert on Errors:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <CheckBox Grid.Row="3" Grid.Column="1"
                                                  IsChecked="{Binding PipelineAlertOnErrors}"
                                                  Content="Send immediate alerts for errors"/>
                                    </Grid>
                                </StackPanel>
                            </ScrollViewer>
                        </TabItem>

                    </TabControl>
                </Grid>

                <!-- No Selection Message -->
                <Grid Grid.Column="2"
                  Margin="8,0,0,0"
                  Visibility="{Binding SelectedPipeline, Converter={StaticResource NullToVisibility}, ConverterParameter=Inverse}"
                  VerticalAlignment="Center"
                  HorizontalAlignment="Center">
                    <StackPanel MaxWidth="400">
                        <TextBlock Text="No Pipeline Selected"
                               FontSize="18"
                               Opacity="0.5"
                               HorizontalAlignment="Center"/>
                        <TextBlock Text="Select a pipeline from the list or create a new one"
                               FontSize="13"
                               Opacity="0.5"
                               Margin="0,8,0,0"
                               HorizontalAlignment="Center"
                               TextWrapping="Wrap"
                               TextAlignment="Center"/>
                    </StackPanel>
                </Grid>
            </Grid>

            <!-- Status Bar -->
            <Border Grid.Row="1"
                Background="{DynamicResource SystemControlBackgroundChromeMediumBrush}"
                Height="28">
                <Grid Margin="16,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <!-- Loading -->
                    <ui:ProgressRing Grid.Column="0"
                                 IsActive="{Binding IsLoading}"
                                 Width="12"
                                 Height="12"
                                 Margin="0,0,8,0"
                                 Visibility="{Binding IsLoading, Converter={StaticResource BoolToVisibility}}"/>

                    <!-- Status -->
                    <TextBlock Grid.Column="1"
                           Text="{Binding StatusMessage}"
                           VerticalAlignment="Center"
                           FontSize="11"
                           Opacity="0.8"
                           Visibility="{Binding StatusMessage, Converter={StaticResource NullToVisibility}}"/>

                    <!-- Changes -->
                    <TextBlock Grid.Column="2"
                           FontSize="11"
                           Opacity="0.8"
                           VerticalAlignment="Center"
                           Visibility="{Binding HasUnsavedChanges, Converter={StaticResource BoolToVisibility}}">
                    <Run Text="â€¢" Foreground="Orange" FontSize="8"/>
                    <Run Text=" Unsaved changes"/>
                    </TextBlock>
                </Grid>
            </Border>
        </Grid>
    </Grid>
</Page>
// src\CamBridge.Config\Views\PipelineConfigPage.xaml.cs
// Version: 0.7.27
// Description: Pipeline Configuration page - Code Behind

using System;
using System.Runtime.Versioning;
using System.Windows;
using System.Windows.Controls;
using CamBridge.Config.ViewModels;
using Microsoft.Extensions.DependencyInjection;
using System.Diagnostics;

namespace CamBridge.Config.Views
{
    /// <summary>
    /// Pipeline Configuration page - Zero Global Settings!
    /// NavigationService ALREADY injects the ViewModel, so we just need to initialize it
    /// </summary>
    [SupportedOSPlatform("windows")]
    public partial class PipelineConfigPage : Page
    {
        public PipelineConfigPage()
        {
            InitializeComponent();

            // Use Loaded event instead of OnInitialized to ensure NavigationService has done its job
            this.Loaded += Page_Loaded;
        }

        private async void Page_Loaded(object sender, RoutedEventArgs e)
        {
            // Only run once
            this.Loaded -= Page_Loaded;

            Debug.WriteLine("=== PipelineConfigPage Loaded ===");

            // NavigationService should have already set our DataContext
            if (DataContext is PipelineConfigViewModel vm)
            {
                Debug.WriteLine("ViewModel found! Initializing...");
                try
                {
                    await vm.InitializeAsync();
                    Debug.WriteLine($"Initialization complete. Pipelines: {vm.Pipelines.Count}");
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"Initialization failed: {ex.Message}");
                    MessageBox.Show(
                        $"Failed to load pipeline configuration:\n{ex.Message}",
                        "Error",
                        MessageBoxButton.OK,
                        MessageBoxImage.Warning);
                }
            }
            else
            {
                Debug.WriteLine($"ERROR: DataContext is {DataContext?.GetType().Name ?? "null"} - expected PipelineConfigViewModel");

                // Fallback - try to get it ourselves
                var app = Application.Current as App;
                if (app?.Host?.Services != null)
                {
                    var viewModel = app.Host.Services.GetRequiredService<PipelineConfigViewModel>();
                    DataContext = viewModel;
                    await viewModel.InitializeAsync();
                }
            }
        }

        // Browse button handlers
        private void BrowseWatchFolder_Click(object sender, RoutedEventArgs e)
        {
            BrowseFolder("Select Watch Folder", path =>
            {
                if (DataContext is PipelineConfigViewModel vm && vm.SelectedPipeline != null)
                {
                    vm.SelectedPipeline.WatchSettings.Path = path;
                }
            });
        }

        private void BrowseOutputFolder_Click(object sender, RoutedEventArgs e)
        {
            BrowseFolder("Select Output Folder", path =>
            {
                if (DataContext is PipelineConfigViewModel vm && vm.SelectedPipeline != null)
                {
                    vm.SelectedPipeline.ProcessingOptions.ArchiveFolder = path;
                }
            });
        }

        private void BrowseErrorFolder_Click(object sender, RoutedEventArgs e)
        {
            BrowseFolder("Select Error Folder", path =>
            {
                if (DataContext is PipelineConfigViewModel vm && vm.SelectedPipeline != null)
                {
                    vm.SelectedPipeline.ProcessingOptions.ErrorFolder = path;
                }
            });
        }

        private void BrowseDeadLetterFolder_Click(object sender, RoutedEventArgs e)
        {
            BrowseFolder("Select Dead Letter Folder", path =>
            {
                if (DataContext is PipelineConfigViewModel vm && vm.SelectedPipeline != null)
                {
                    vm.SelectedPipeline.ProcessingOptions.DeadLetterFolder = path;
                }
            });
        }

        private void BrowseLogFolder_Click(object sender, RoutedEventArgs e)
        {
            BrowseFolder("Select Log Folder", path =>
            {
                if (DataContext is PipelineConfigViewModel vm)
                {
                    vm.PipelineLogFolder = path;
                }
            });
        }

        private void BrowseFolder(string description, Action<string> setPath)
        {
            var dialog = new System.Windows.Forms.FolderBrowserDialog
            {
                Description = description,
                ShowNewFolderButton = true
            };

            if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                setPath(dialog.SelectedPath);
            }
        }
    }
}
