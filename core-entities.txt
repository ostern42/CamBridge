===== FILE: Entities\PatientInfo.cs =====
using System;
using System.Collections.Generic;
using CamBridge.Core.ValueObjects;

namespace CamBridge.Core.Entities
{
    /// <summary>
    /// Patient information extracted from image metadata
    /// </summary>
    public class PatientInfo
    {
        public PatientId Id { get; }
        public string Name { get; }
        public string PatientName => Name; // Alias for compatibility
        public string PatientId => Id.Value; // Alias for compatibility
        public string? StudyId { get; set; }
        public DateTime? BirthDate { get; }
        public Gender Gender { get; }

        public PatientInfo(PatientId id, string name, DateTime? birthDate, Gender gender)
        {
            Id = id ?? throw new ArgumentNullException(nameof(id));
            Name = name ?? throw new ArgumentNullException(nameof(name));
            BirthDate = birthDate;
            Gender = gender;
        }

        /// <summary>
        /// Creates PatientInfo from EXIF/QRBridge data
        /// </summary>
        public static PatientInfo FromExifData(Dictionary<string, string> exifData)
        {
            // Extract patient ID - try multiple possible field names
            var patientIdValue = exifData.GetValueOrDefault("patientid") ??
                                exifData.GetValueOrDefault("id") ??
                                exifData.GetValueOrDefault("examid") ??
                                $"AUTO_{DateTime.UtcNow:yyyyMMddHHmmss}";

            var patientId = new PatientId(patientIdValue);

            // Extract name
            var name = exifData.GetValueOrDefault("name") ??
                      exifData.GetValueOrDefault("patientname") ??
                      "Unknown";

            // Extract birth date
            DateTime? birthDate = null;
            var birthDateStr = exifData.GetValueOrDefault("birthdate") ??
                              exifData.GetValueOrDefault("dateofbirth");

            if (!string.IsNullOrWhiteSpace(birthDateStr))
            {
                // Try various date formats
                var formats = new[] {
                    "yyyy-MM-dd",
                    "yyyyMMdd",
                    "dd.MM.yyyy",
                    "dd/MM/yyyy",
                    "MM/dd/yyyy"
                };

                foreach (var format in formats)
                {
                    if (DateTime.TryParseExact(birthDateStr, format, null,
                        System.Globalization.DateTimeStyles.None, out var date))
                    {
                        birthDate = date;
                        break;
                    }
                }
            }

            // Extract gender
            var genderStr = exifData.GetValueOrDefault("gender") ??
                           exifData.GetValueOrDefault("sex") ??
                           "O";

            var gender = ParseGender(genderStr);

            return new PatientInfo(patientId, name, birthDate, gender);
        }

        private static Gender ParseGender(string? genderStr)
        {
            if (string.IsNullOrWhiteSpace(genderStr))
                return Gender.Other;

            return genderStr.ToUpperInvariant() switch
            {
                "M" or "MALE" or "MANN" or "MÄNNLICH" => Gender.Male,
                "F" or "FEMALE" or "FRAU" or "WEIBLICH" => Gender.Female,
                _ => Gender.Other
            };
        }
    }

    public enum Gender
    {
        Male,
        Female,
        Other
    }
}

===== FILE: Entities\StudyInfo.cs =====
using System;
using CamBridge.Core.ValueObjects;

namespace CamBridge.Core.Entities
{
    /// <summary>
    /// Information about a medical imaging study
    /// </summary>
    public class StudyInfo
    {
        public StudyId StudyId { get; }
        public string? ExamId { get; }
        public string? Description { get; }
        public string? Modality { get; }
        public DateTime StudyDate { get; }
        public string? AccessionNumber { get; }
        public string? ReferringPhysician { get; }
        public string? Comment { get; }

        public StudyInfo(
            StudyId studyId,
            string? examId = null,
            string? description = null,
            string? modality = null,
            DateTime? studyDate = null,
            string? accessionNumber = null,
            string? referringPhysician = null,
            string? comment = null)
        {
            StudyId = studyId ?? throw new ArgumentNullException(nameof(studyId));
            ExamId = examId;
            Description = description;
            Modality = modality ?? "OT"; // Other modality as default
            StudyDate = studyDate ?? DateTime.Now;
            AccessionNumber = accessionNumber;
            ReferringPhysician = referringPhysician;
            Comment = comment;
        }
    }
}

===== FILE: ValueObjects\PatientId.cs =====
using System;

namespace CamBridge.Core.ValueObjects
{
    /// <summary>
    /// Represents a patient identifier as a value object
    /// </summary>
    public class PatientId : IEquatable<PatientId>
    {
        /// <summary>
        /// Gets the patient identifier value
        /// </summary>
        public string Value { get; }

        /// <summary>
        /// Creates a new PatientId instance
        /// </summary>
        /// <param name="value">The patient identifier value</param>
        /// <exception cref="ArgumentNullException">When value is null</exception>
        /// <exception cref="ArgumentException">When value is empty or whitespace</exception>
        public PatientId(string value)
        {
            if (value == null)
                throw new ArgumentNullException(nameof(value));

            if (string.IsNullOrWhiteSpace(value))
                throw new ArgumentException("Patient ID cannot be empty or whitespace", nameof(value));

            Value = value.Trim();
        }

        /// <summary>
        /// Creates a new random PatientId for testing purposes
        /// </summary>
        public static PatientId NewId() => new PatientId(Guid.NewGuid().ToString("N"));

        public bool Equals(PatientId? other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return Value == other.Value;
        }

        public override bool Equals(object? obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((PatientId)obj);
        }

        public override int GetHashCode() => Value.GetHashCode();

        public static bool operator ==(PatientId? left, PatientId? right) => Equals(left, right);

        public static bool operator !=(PatientId? left, PatientId? right) => !Equals(left, right);

        public override string ToString() => Value;

        /// <summary>
        /// Implicit conversion from string
        /// </summary>
        public static implicit operator string(PatientId patientId) => patientId.Value;

        /// <summary>
        /// Explicit conversion to PatientId
        /// </summary>
        public static explicit operator PatientId(string value) => new PatientId(value);
    }
}

===== FILE: ValueObjects\StudyId.cs =====
using System;

namespace CamBridge.Core.ValueObjects
{
    /// <summary>
    /// Strongly typed study identifier
    /// </summary>
    public record StudyId
    {
        public string Value { get; }

        public StudyId(string value)
        {
            if (string.IsNullOrWhiteSpace(value))
                throw new ArgumentException("Study ID cannot be empty", nameof(value));

            // Validate format (max 16 chars for DICOM Study ID)
            if (value.Length > 16)
                throw new ArgumentException($"Study ID too long (max 16 chars): {value}", nameof(value));

            Value = value.Trim().ToUpper();
        }

        public override string ToString() => Value;

        // Implicit conversion to string
        public static implicit operator string(StudyId id) => id.Value;

        // Factory methods
        public static StudyId CreateFromExamId(string examId)
        {
            if (string.IsNullOrWhiteSpace(examId))
                return Generate();

            // Truncate if necessary and ensure uppercase
            var cleanId = examId.Trim().ToUpper();
            if (cleanId.Length > 16)
                cleanId = cleanId.Substring(0, 16);

            return new StudyId(cleanId);
        }

        public static StudyId Generate()
        {
            // Generate unique study ID
            // Format: SYYYYMMDDHHMMSS (max 16 chars)
            var timestamp = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
            return new StudyId($"S{timestamp}");
        }

        public static StudyId GenerateForDate(DateTime date)
        {
            // Generate study ID for specific date
            var dateStr = date.ToString("yyyyMMdd");
            var random = new Random().Next(1000, 9999);
            return new StudyId($"S{dateStr}{random}");
        }
    }
}

