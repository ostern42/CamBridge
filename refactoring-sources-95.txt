

===== C:\Users\oliver.stern\source\repos\CamBridge\src\CamBridge.Config\ViewModels\PipelineConfigViewModel.cs =====
// src\CamBridge.Config\ViewModels\PipelineConfigViewModel.cs
// Version: 0.8.1
// Description: Pipeline Configuration ViewModel - With PACS Upload Support

using CamBridge.Config.Services;
using CamBridge.Core;
using CamBridge.Infrastructure.Services;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Runtime.Versioning;
using System.Threading.Tasks;
using System.Windows;
using System.Diagnostics;

namespace CamBridge.Config.ViewModels
{
    [SupportedOSPlatform("windows")]
    public partial class PipelineConfigViewModel : ViewModelBase
    {
        private readonly IConfigurationService _configurationService;
        private CamBridgeSettingsV2? _originalSettings;

        // Collections
        [ObservableProperty]
        private ObservableCollection<PipelineConfiguration> _pipelines = new();

        [ObservableProperty]
        private ObservableCollection<MappingSet> _mappingSets = new();

        // Selected Pipeline
        private PipelineConfiguration? _selectedPipeline;
        public PipelineConfiguration? SelectedPipeline
        {
            get => _selectedPipeline;
            set
            {
                if (SetProperty(ref _selectedPipeline, value))
                {
                    Debug.WriteLine($"SelectedPipeline changed to: {value?.Name ?? "null"}");
                    OnPropertyChanged(nameof(SelectedPipelineDicomOverrides));
                    OnPropertyChanged(nameof(UseCustomLogging));
                    OnPropertyChanged(nameof(UseCustomNotifications));
                    UpdateCommands();
                }
            }
        }

        // Pipeline-specific properties for binding
        public DicomOverrides? SelectedPipelineDicomOverrides
        {
            get
            {
                if (SelectedPipeline?.DicomOverrides == null && SelectedPipeline != null)
                {
                    SelectedPipeline.DicomOverrides = new DicomOverrides();
                }
                return SelectedPipeline?.DicomOverrides;
            }
        }

        // ComboBox Collections
        public ObservableCollection<string> LogLevels { get; } = new()
        {
            "Trace", "Debug", "Information", "Warning", "Error", "Critical"
        };

        public ObservableCollection<PostProcessingAction> ProcessingActions { get; } = new()
        {
            PostProcessingAction.Leave,
            PostProcessingAction.Archive,
            PostProcessingAction.Delete,
            PostProcessingAction.MoveToError
        };

        public ObservableCollection<OutputOrganization> OutputOrganizations { get; } = new()
        {
            OutputOrganization.None,
            OutputOrganization.ByPatient,
            OutputOrganization.ByDate,
            OutputOrganization.ByPatientAndDate
        };

        public ObservableCollection<NotificationLevel> NotificationLevels { get; } = new()
        {
            NotificationLevel.Information,
            NotificationLevel.Warning,
            NotificationLevel.Error,
            NotificationLevel.Critical
        };

        // Pipeline-specific logging settings
        [ObservableProperty]
        private bool _useCustomLogging;

        [ObservableProperty]
        private string _pipelineLogLevel = "Information";

        [ObservableProperty]
        private string _pipelineLogFolder = @"C:\CamBridge\Logs";

        [ObservableProperty]
        private int _pipelineLogRetentionDays = 30;

        // Pipeline-specific notification settings
        [ObservableProperty]
        private bool _useCustomNotifications;

        [ObservableProperty]
        private string? _pipelineEmailTo;

        [ObservableProperty]
        private NotificationLevel _pipelineAlertLevel = NotificationLevel.Warning;

        [ObservableProperty]
        private bool _pipelineSendDailySummary;

        [ObservableProperty]
        private bool _pipelineAlertOnErrors = true;

        // PACS Test Properties
        [ObservableProperty]
        private string _pacsTestResult = string.Empty;

        [ObservableProperty]
        private string _pacsTestResultColor = "Black";

        // Status properties
        [ObservableProperty]
        private bool _isLoading;

        [ObservableProperty]
        private bool _isSaving;

        [ObservableProperty]
        private string _statusMessage = "";

        [ObservableProperty]
        private bool _isError;

        [ObservableProperty]
        private bool _hasUnsavedChanges;

        [ObservableProperty]
        private int _unsavedChangesCount;

        [ObservableProperty]
        private bool _selectedPipelineHasChanges;

        public PipelineConfigViewModel(IConfigurationService configurationService)
        {
            _configurationService = configurationService;
            Debug.WriteLine("PipelineConfigViewModel constructor called");

            // Subscribe to collection changes
            Pipelines.CollectionChanged += (s, e) =>
            {
                Debug.WriteLine($"Pipelines collection changed: Count = {Pipelines.Count}");
                if (!IsLoading)
                {
                    HasUnsavedChanges = true;
                    UnsavedChangesCount++;
                }
            };
        }

        public async Task InitializeAsync()
        {
            Debug.WriteLine("=== PipelineConfigViewModel.InitializeAsync START ===");
            try
            {
                await LoadSettingsAsync();

                // Ensure we have at least one pipeline
                if (Pipelines.Count == 0)
                {
                    Debug.WriteLine("No pipelines loaded, creating default");
                    CreateDefaultPipeline();
                }

                Debug.WriteLine($"InitializeAsync completed. Pipeline count: {Pipelines.Count}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"InitializeAsync FAILED: {ex.Message}");
                Debug.WriteLine($"Stack: {ex.StackTrace}");
                StatusMessage = $"Error: {ex.Message}";
                IsError = true;

                // Create default pipeline even on error
                CreateDefaultPipeline();
            }
            finally
            {
                Debug.WriteLine("=== PipelineConfigViewModel.InitializeAsync END ===");
            }
        }

        [RelayCommand]
        private async Task LoadSettingsAsync()
        {
            Debug.WriteLine("LoadSettingsAsync called");
            try
            {
                IsLoading = true;
                IsError = false;
                StatusMessage = "";

                Debug.WriteLine("Calling ConfigurationService.LoadConfigurationAsync<CamBridgeSettingsV2>");
                var settings = await _configurationService.LoadConfigurationAsync<CamBridgeSettingsV2>();

                if (settings != null)
                {
                    Debug.WriteLine($"Settings loaded: Version={settings.Version}, Pipelines={settings.Pipelines.Count}");

                    // Fix any null PacsConfiguration in existing pipelines
                    foreach (var pipeline in settings.Pipelines)
                    {
                        if (pipeline.PacsConfiguration == null)
                        {
                            Debug.WriteLine($"Creating PacsConfiguration for pipeline: {pipeline.Name}");
                            pipeline.PacsConfiguration = new PacsConfiguration();
                        }
                    }

                    _originalSettings = settings;
                    MapFromSettings(settings);

                    // Create system default mapping sets if needed
                    EnsureSystemDefaults();

                    HasUnsavedChanges = false;
                    UnsavedChangesCount = 0;
                    StatusMessage = "";  // Clear status - pipeline count shown in header
                }
                else
                {
                    Debug.WriteLine("Settings is null - creating default pipeline");
                    // Create default settings
                    CreateDefaultPipeline();
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"LoadSettingsAsync ERROR: {ex.Message}");
                Debug.WriteLine($"Exception type: {ex.GetType().Name}");
                StatusMessage = $"Error: {ex.Message}";
                IsError = true;

                // Ensure we have at least one pipeline
                if (Pipelines.Count == 0)
                {
                    CreateDefaultPipeline();
                }
            }
            finally
            {
                IsLoading = false;
                Debug.WriteLine($"LoadSettingsAsync completed. Pipelines count: {Pipelines.Count}");
            }
        }

        [RelayCommand(CanExecute = nameof(CanSaveAll))]
        private async Task SaveAllAsync()
        {
            try
            {
                IsSaving = true;
                IsError = false;
                StatusMessage = "Saving all pipelines...";

                var settings = MapToSettings();
                await _configurationService.SaveConfigurationAsync(settings);

                _originalSettings = settings;
                HasUnsavedChanges = false;
                UnsavedChangesCount = 0;
                SelectedPipelineHasChanges = false;

                // Show save confirmation briefly
                StatusMessage = $"Saved at {DateTime.Now:HH:mm:ss}";

                // Clear status message after 3 seconds
                _ = Task.Run(async () =>
                {
                    await Task.Delay(3000);
                    StatusMessage = "";
                });

                // Notify success
                var backupPath = System.IO.Path.Combine(
                    Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData),
                    "CamBridge",
                    $"appsettings.json.backup_{DateTime.Now:yyyyMMdd_HHmmss}");

                MessageBox.Show($"Pipeline configuration saved successfully!\n\nAuto-backup created at:\n{backupPath}",
                               "Success",
                               MessageBoxButton.OK,
                               MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                StatusMessage = $"Error: {ex.Message}";
                IsError = true;

                MessageBox.Show($"Failed to save configuration:\n{ex.Message}",
                               "Error",
                               MessageBoxButton.OK,
                               MessageBoxImage.Error);
            }
            finally
            {
                IsSaving = false;
            }
        }

        private bool CanSaveAll() => HasUnsavedChanges && !IsLoading && !IsSaving;

        [RelayCommand]
        private void AddPipeline()
        {
            Debug.WriteLine("AddPipeline called");

            var newPipeline = new PipelineConfiguration
            {
                Id = Guid.NewGuid(),
                Name = $"Pipeline {Pipelines.Count + 1}",
                Description = "New pipeline configuration",
                Enabled = true,
                WatchSettings = new PipelineWatchSettings
                {
                    Path = @"C:\CamBridge\NewPipeline\Input",
                    FilePattern = "*.jpg;*.jpeg",
                    IncludeSubdirectories = false,
                    MinimumFileAgeSeconds = 5
                },
                ProcessingOptions = new ProcessingOptions
                {
                    ArchiveFolder = @"C:\CamBridge\NewPipeline\Archive",
                    ErrorFolder = @"C:\CamBridge\NewPipeline\Errors",
                    DeadLetterFolder = @"C:\CamBridge\NewPipeline\DeadLetters",
                    SuccessAction = PostProcessingAction.Archive,
                    FailureAction = PostProcessingAction.MoveToError,
                    CreateBackup = true,
                    BackupFolder = @"C:\CamBridge\NewPipeline\Backup",
                    MaxConcurrentProcessing = 2,
                    RetryOnFailure = true,
                    MaxRetryAttempts = 3,
                    OutputOrganization = OutputOrganization.ByPatientAndDate
                },
                MappingSetId = MappingSets.FirstOrDefault(m => !m.IsSystemDefault)?.Id,
                // Initialize PACS Configuration
                PacsConfiguration = new PacsConfiguration
                {
                    Enabled = false,
                    Host = string.Empty,
                    Port = 104,
                    CalledAeTitle = string.Empty,
                    CallingAeTitle = "CAMBRIDGE",
                    TimeoutSeconds = 30,
                    MaxRetryAttempts = 3,
                    RetryDelaySeconds = 5
                }
            };

            // Subscribe to property changes
            newPipeline.PropertyChanged += Pipeline_PropertyChanged;
            newPipeline.WatchSettings.PropertyChanged += Pipeline_PropertyChanged;
            newPipeline.ProcessingOptions.PropertyChanged += Pipeline_PropertyChanged;
            if (newPipeline.PacsConfiguration != null)
            {
                newPipeline.PacsConfiguration.PropertyChanged += Pipeline_PropertyChanged;
            }

            // Add to collection
            Pipelines.Add(newPipeline);
            SelectedPipeline = newPipeline;

            HasUnsavedChanges = true;
            UnsavedChangesCount++;

            Debug.WriteLine($"Pipeline added. Total count: {Pipelines.Count}");
        }

        [RelayCommand(CanExecute = nameof(CanDeletePipeline))]
        private void DeletePipeline()
        {
            if (SelectedPipeline == null) return;

            var result = MessageBox.Show(
                $"Are you sure you want to delete the pipeline '{SelectedPipeline.Name}'?\n\nThis action cannot be undone.",
                "Confirm Delete",
                MessageBoxButton.YesNo,
                MessageBoxImage.Warning);

            if (result == MessageBoxResult.Yes)
            {
                var pipelineName = SelectedPipeline.Name;
                Pipelines.Remove(SelectedPipeline);
                SelectedPipeline = Pipelines.FirstOrDefault();

                HasUnsavedChanges = true;
                UnsavedChangesCount++;
            }
        }

        private bool CanDeletePipeline() => SelectedPipeline != null && Pipelines.Count > 1;

        [RelayCommand(CanExecute = nameof(CanApplyPipeline))]
        private void ApplyPipeline()
        {
            if (SelectedPipeline == null) return;

            // Mark changes as applied
            SelectedPipelineHasChanges = false;
        }

        private bool CanApplyPipeline() => SelectedPipelineHasChanges && !IsLoading && !IsSaving;

        [RelayCommand(CanExecute = nameof(CanResetPipeline))]
        private void ResetPipeline()
        {
            if (SelectedPipeline == null || _originalSettings == null) return;

            // Find original pipeline by ID
            var originalPipeline = _originalSettings.Pipelines.FirstOrDefault(p => p.Id == SelectedPipeline.Id);
            if (originalPipeline != null)
            {
                // Reset to original values
                var index = Pipelines.IndexOf(SelectedPipeline);
                if (index >= 0)
                {
                    var cloned = ClonePipeline(originalPipeline);
                    cloned.PropertyChanged += Pipeline_PropertyChanged;
                    cloned.WatchSettings.PropertyChanged += Pipeline_PropertyChanged;
                    cloned.ProcessingOptions.PropertyChanged += Pipeline_PropertyChanged;
                    if (cloned.PacsConfiguration != null)
                    {
                        cloned.PacsConfiguration.PropertyChanged += Pipeline_PropertyChanged;
                    }

                    Pipelines[index] = cloned;
                    SelectedPipeline = Pipelines[index];
                }
            }

            SelectedPipelineHasChanges = false;
        }

        private bool CanResetPipeline() => SelectedPipelineHasChanges && !IsLoading && !IsSaving;

        [RelayCommand]
        private async Task TestPacsConnectionAsync()
        {
            if (SelectedPipeline?.PacsConfiguration == null)
            {
                PacsTestResult = "No PACS configuration available";
                PacsTestResultColor = "Red";
                return;
            }

            try
            {
                PacsTestResult = "Testing connection...";
                PacsTestResultColor = "Gray";

                // Get DicomStoreService from DI
                var app = Application.Current as App;
                if (app?.Host == null)
                {
                    PacsTestResult = "âœ— Service not available";
                    PacsTestResultColor = "Red";
                    return;
                }

                var dicomStoreService = app.Host.Services.GetService<DicomStoreService>();
                if (dicomStoreService == null)
                {
                    PacsTestResult = "âœ— DICOM Store service not configured";
                    PacsTestResultColor = "Red";
                    return;
                }

                var result = await dicomStoreService.TestConnectionAsync(
                    SelectedPipeline.PacsConfiguration);

                PacsTestResult = result.Success
                    ? $"âœ“ Connection successful! {result.TransactionUid}"
                    : $"âœ— Failed: {result.ErrorMessage}";
                PacsTestResultColor = result.Success ? "Green" : "Red";
            }
            catch (Exception ex)
            {
                PacsTestResult = $"âœ— Error: {ex.Message}";
                PacsTestResultColor = "Red";
                Debug.WriteLine($"PACS connection test failed: {ex}");
            }
        }

        private void MapFromSettings(CamBridgeSettingsV2 settings)
        {
            Debug.WriteLine($"MapFromSettings called. Settings has {settings.Pipelines.Count} pipelines, {settings.MappingSets.Count} mapping sets");

            // Clear existing
            Pipelines.Clear();
            MappingSets.Clear();

            // Map mapping sets
            foreach (var mappingSet in settings.MappingSets)
            {
                MappingSets.Add(mappingSet);
                Debug.WriteLine($"Added mapping set: {mappingSet.Name}");
            }

            // Map pipelines
            foreach (var pipeline in settings.Pipelines)
            {
                var clonedPipeline = ClonePipeline(pipeline);

                // Ensure PacsConfiguration is never null
                if (clonedPipeline.PacsConfiguration == null)
                {
                    clonedPipeline.PacsConfiguration = new PacsConfiguration
                    {
                        Enabled = false,
                        Host = string.Empty,
                        Port = 104,
                        CalledAeTitle = string.Empty,
                        CallingAeTitle = "CAMBRIDGE",
                        TimeoutSeconds = 30,
                        MaxConcurrentUploads = 1,
                        RetryOnFailure = true,
                        MaxRetryAttempts = 3,
                        RetryDelaySeconds = 5
                    };
                }

                // Subscribe to property changes
                clonedPipeline.PropertyChanged += Pipeline_PropertyChanged;
                clonedPipeline.WatchSettings.PropertyChanged += Pipeline_PropertyChanged;
                clonedPipeline.ProcessingOptions.PropertyChanged += Pipeline_PropertyChanged;
                if (clonedPipeline.PacsConfiguration != null)
                {
                    clonedPipeline.PacsConfiguration.PropertyChanged += Pipeline_PropertyChanged;
                }

                Pipelines.Add(clonedPipeline);
                Debug.WriteLine($"Added pipeline: {clonedPipeline.Name}");
            }

            // Select first pipeline
            SelectedPipeline = Pipelines.FirstOrDefault();
            Debug.WriteLine($"Selected first pipeline: {SelectedPipeline?.Name ?? "none"}");
        }

        private void Pipeline_PropertyChanged(object? sender, PropertyChangedEventArgs e)
        {
            if (!IsLoading)
            {
                SelectedPipelineHasChanges = true;
                HasUnsavedChanges = true;
                Debug.WriteLine($"Pipeline property changed: {e.PropertyName}");
            }
        }

        private CamBridgeSettingsV2 MapToSettings()
        {
            var settings = new CamBridgeSettingsV2
            {
                Version = "2.0",
                GlobalDicomSettings = _originalSettings?.GlobalDicomSettings ?? new DicomSettings(),
                DefaultProcessingOptions = _originalSettings?.DefaultProcessingOptions ?? new ProcessingOptions(),
                Logging = _originalSettings?.Logging ?? new LoggingSettings(),
                Service = _originalSettings?.Service ?? new ServiceSettings(),
                Notifications = _originalSettings?.Notifications ?? new NotificationSettings()
            };

            // Map pipelines
            settings.Pipelines.Clear();
            foreach (var pipeline in Pipelines)
            {
                settings.Pipelines.Add(ClonePipeline(pipeline));
            }

            // Map mapping sets
            settings.MappingSets.Clear();
            foreach (var mappingSet in MappingSets)
            {
                settings.MappingSets.Add(mappingSet);
            }

            return settings;
        }

        private PipelineConfiguration ClonePipeline(PipelineConfiguration source)
        {
            var cloned = new PipelineConfiguration
            {
                Id = source.Id,
                Name = source.Name,
                Description = source.Description,
                Enabled = source.Enabled,
                WatchSettings = new PipelineWatchSettings
                {
                    Path = source.WatchSettings.Path,
                    FilePattern = source.WatchSettings.FilePattern,
                    IncludeSubdirectories = source.WatchSettings.IncludeSubdirectories,
                    OutputPath = source.WatchSettings.OutputPath,
                    MinimumFileAgeSeconds = source.WatchSettings.MinimumFileAgeSeconds
                },
                ProcessingOptions = CloneProcessingOptions(source.ProcessingOptions),
                DicomOverrides = source.DicomOverrides != null ? new DicomOverrides
                {
                    InstitutionName = source.DicomOverrides.InstitutionName,
                    InstitutionDepartment = source.DicomOverrides.InstitutionDepartment,
                    StationName = source.DicomOverrides.StationName
                } : null,
                MappingSetId = source.MappingSetId,
                CreatedAt = source.CreatedAt,
                UpdatedAt = DateTime.UtcNow
            };

            // Clone PACS Configuration
            if (source.PacsConfiguration != null)
            {
                cloned.PacsConfiguration = new PacsConfiguration
                {
                    Enabled = source.PacsConfiguration.Enabled,
                    Host = source.PacsConfiguration.Host,
                    Port = source.PacsConfiguration.Port,
                    CalledAeTitle = source.PacsConfiguration.CalledAeTitle,
                    CallingAeTitle = source.PacsConfiguration.CallingAeTitle,
                    TimeoutSeconds = source.PacsConfiguration.TimeoutSeconds,
                    MaxConcurrentUploads = source.PacsConfiguration.MaxConcurrentUploads,
                    RetryOnFailure = source.PacsConfiguration.RetryOnFailure,
                    MaxRetryAttempts = source.PacsConfiguration.MaxRetryAttempts,
                    RetryDelaySeconds = source.PacsConfiguration.RetryDelaySeconds
                };
            }

            return cloned;
        }

        private ProcessingOptions CloneProcessingOptions(ProcessingOptions source)
        {
            return new ProcessingOptions
            {
                SuccessAction = source.SuccessAction,
                FailureAction = source.FailureAction,
                ArchiveFolder = source.ArchiveFolder,
                ErrorFolder = source.ErrorFolder,
                BackupFolder = source.BackupFolder,
                CreateBackup = source.CreateBackup,
                MaxConcurrentProcessing = source.MaxConcurrentProcessing,
                RetryOnFailure = source.RetryOnFailure,
                MaxRetryAttempts = source.MaxRetryAttempts,
                OutputOrganization = source.OutputOrganization,
                ProcessExistingOnStartup = source.ProcessExistingOnStartup,
                DeadLetterFolder = source.DeadLetterFolder
            };
        }

        private void CreateDefaultPipeline()
        {
            Debug.WriteLine("CreateDefaultPipeline called");

            // Don't clear if we already have pipelines
            if (Pipelines.Count > 0)
            {
                Debug.WriteLine($"Already have {Pipelines.Count} pipelines, not creating default");
                return;
            }

            // Clear mapping sets if needed
            MappingSets.Clear();

            // Create default mapping set
            var defaultMappingSet = new MappingSet
            {
                Id = Guid.NewGuid(),
                Name = "Default Mapping",
                Description = "Default EXIF to DICOM mapping",
                IsSystemDefault = false,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            };
            MappingSets.Add(defaultMappingSet);

            // Create default pipeline
            var defaultPipeline = new PipelineConfiguration
            {
                Id = Guid.NewGuid(),
                Name = "Default Pipeline",
                Description = "Default processing pipeline",
                Enabled = true,
                WatchSettings = new PipelineWatchSettings
                {
                    Path = @"C:\CamBridge\Watch\Default",
                    FilePattern = "*.jpg;*.jpeg",
                    IncludeSubdirectories = false,
                    OutputPath = @"C:\CamBridge\Output\Default",
                    MinimumFileAgeSeconds = 5
                },
                ProcessingOptions = new ProcessingOptions
                {
                    ArchiveFolder = @"C:\CamBridge\Archive",
                    ErrorFolder = @"C:\CamBridge\Errors",
                    DeadLetterFolder = @"C:\CamBridge\DeadLetters",
                    SuccessAction = PostProcessingAction.Archive,
                    FailureAction = PostProcessingAction.MoveToError,
                    CreateBackup = true,
                    BackupFolder = @"C:\CamBridge\Backup",
                    MaxConcurrentProcessing = 2,
                    RetryOnFailure = true,
                    MaxRetryAttempts = 3,
                    OutputOrganization = OutputOrganization.ByPatientAndDate,
                    ProcessExistingOnStartup = false
                },
                MappingSetId = defaultMappingSet.Id,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow,
                // Initialize PACS Configuration
                PacsConfiguration = new PacsConfiguration
                {
                    Enabled = false,
                    Host = string.Empty,
                    Port = 104,
                    CalledAeTitle = string.Empty,
                    CallingAeTitle = "CAMBRIDGE",
                    TimeoutSeconds = 30,
                    MaxRetryAttempts = 3,
                    RetryDelaySeconds = 5
                }
            };

            defaultPipeline.PropertyChanged += Pipeline_PropertyChanged;
            defaultPipeline.WatchSettings.PropertyChanged += Pipeline_PropertyChanged;
            defaultPipeline.ProcessingOptions.PropertyChanged += Pipeline_PropertyChanged;
            if (defaultPipeline.PacsConfiguration != null)
            {
                defaultPipeline.PacsConfiguration.PropertyChanged += Pipeline_PropertyChanged;
            }

            Pipelines.Add(defaultPipeline);
            SelectedPipeline = defaultPipeline;

            Debug.WriteLine($"Default pipeline created. Pipelines count: {Pipelines.Count}");
        }

        private void EnsureSystemDefaults()
        {
            // Check if we have system default mapping sets
            if (!MappingSets.Any(m => m.IsSystemDefault))
            {
                // Add Ricoh Standard as system default
                var ricohStandard = new MappingSet
                {
                    Id = Guid.Parse("00000000-0000-0000-0000-000000000001"),
                    Name = "[System] Ricoh Standard",
                    Description = "Built-in mapping for Ricoh cameras",
                    IsSystemDefault = true,
                    CreatedAt = DateTime.UtcNow,
                    UpdatedAt = DateTime.UtcNow
                };

                MappingSets.Insert(0, ricohStandard);
                Debug.WriteLine("Added system default mapping set: Ricoh Standard");
            }
        }

        private void UpdateCommands()
        {
            DeletePipelineCommand.NotifyCanExecuteChanged();
            ApplyPipelineCommand.NotifyCanExecuteChanged();
            ResetPipelineCommand.NotifyCanExecuteChanged();
            TestPacsConnectionCommand.NotifyCanExecuteChanged();
        }

        // Handle property changes
        protected override void OnPropertyChanged(PropertyChangedEventArgs e)
        {
            base.OnPropertyChanged(e);

            // Update save command when changes occur
            if (e.PropertyName == nameof(HasUnsavedChanges))
            {
                SaveAllCommand.NotifyCanExecuteChanged();
            }
        }
    }
}



===== C:\Users\oliver.stern\source\repos\CamBridge\src\CamBridge.Config\Views\PipelineConfigPage.xaml =====
<!-- src\CamBridge.Config\Views\PipelineConfigPage.xaml -->
<!-- Version: 0.8.1 -->
<!-- Description: Pipeline Configuration - With PACS Upload Tab -->

<Page x:Class="CamBridge.Config.Views.PipelineConfigPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:ui="http://schemas.modernwpf.com/2019"
      xmlns:conv="clr-namespace:CamBridge.Config.Converters"
      xmlns:core="clr-namespace:CamBridge.Core;assembly=CamBridge.Core">

    <Page.Resources>
        <!-- Converters -->
        <conv:BooleanToVisibilityConverter x:Key="BoolToVisibility"/>
        <conv:InverseBooleanToVisibilityConverter x:Key="InverseBoolToVisibility"/>
        <conv:NullToVisibilityConverter x:Key="NullToVisibility"/>

        <!-- Styles -->
        <Style x:Key="SettingHeaderStyle" TargetType="TextBlock">
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Margin" Value="0,16,0,8"/>
        </Style>

        <Style x:Key="SettingLabelStyle" TargetType="TextBlock">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Margin" Value="0,0,12,0"/>
            <Setter Property="Width" Value="150"/>
        </Style>

        <Style x:Key="TabHeaderStyle" TargetType="TextBlock">
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Margin" Value="0,0,0,12"/>
        </Style>
    </Page.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Header -->
        <Border Grid.Row="0"
                Background="{DynamicResource SystemControlBackgroundChromeMediumBrush}">
            <Grid Height="60">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <TextBlock Text="Pipeline Configuration"
                           FontSize="24"
                           FontWeight="SemiBold"
                           VerticalAlignment="Center"
                           Margin="24,0,0,0"/>

                <StackPanel Grid.Column="1" 
                            Orientation="Horizontal"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Margin="0,0,24,0">
                    <StackPanel Margin="0,0,16,0" 
                                VerticalAlignment="Center">
                        <TextBlock Text="{Binding Pipelines.Count, StringFormat='{}{0} pipelines configured'}"
                                   HorizontalAlignment="Right"
                                   FontSize="11"
                                   Opacity="0.7"/>
                        <TextBlock HorizontalAlignment="Right"
                                   FontSize="11"
                                   Opacity="0.7">
                            <Run Text="âœ“" Foreground="Green" FontSize="10"/>
                            <Run Text=" Auto-backup enabled"/>
                        </TextBlock>
                    </StackPanel>

                    <Button Command="{Binding SaveAllCommand}"
                            Style="{StaticResource AccentButtonStyle}"
                            MinWidth="140">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Save All Pipelines" Margin="0,0,8,0"/>
                            <TextBlock Text="(Ctrl+S)" Opacity="0.7" FontSize="11"/>
                        </StackPanel>
                    </Button>
                </StackPanel>
            </Grid>
        </Border>

        <!-- Main Content -->
        <Grid Grid.Row="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <!-- Pipeline Area -->
            <Grid Grid.Row="0" Margin="16,16,16,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="320" MinWidth="280"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <!-- Pipeline List -->
                <Border Grid.Column="0"
                    Background="{DynamicResource SystemControlBackgroundAltHighBrush}"
                    BorderBrush="{DynamicResource SystemControlForegroundBaseMediumLowBrush}"
                    BorderThickness="1"
                    CornerRadius="2">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <!-- List Header -->
                        <Border Grid.Row="0"
                            Background="{DynamicResource SystemControlBackgroundChromeMediumBrush}"
                            BorderBrush="{DynamicResource SystemControlForegroundBaseMediumLowBrush}"
                            BorderThickness="0,0,0,1"
                            Padding="12,8">
                            <TextBlock Text="Pipelines"
                                   FontSize="14"
                                   FontWeight="SemiBold"/>
                        </Border>

                        <!-- Pipeline Items -->
                        <ListBox Grid.Row="1"
                             ItemsSource="{Binding Pipelines}"
                             SelectedItem="{Binding SelectedPipeline}"
                             BorderThickness="0"
                             ScrollViewer.HorizontalScrollBarVisibility="Disabled">
                            <ListBox.Style>
                                <Style TargetType="ListBox" BasedOn="{StaticResource {x:Type ListBox}}">
                                    <Setter Property="BorderThickness" Value="0"/>
                                </Style>
                            </ListBox.Style>
                            <ListBox.ItemContainerStyle>
                                <Style TargetType="ListBoxItem" BasedOn="{StaticResource DefaultListBoxItemStyle}">
                                    <Setter Property="Padding" Value="10,6"/>
                                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                    <Setter Property="BorderThickness" Value="0"/>
                                </Style>
                            </ListBox.ItemContainerStyle>
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>

                                        <CheckBox Grid.Column="0"
                                              IsChecked="{Binding Enabled}"
                                              Margin="0,0,8,0"
                                              VerticalAlignment="Center"/>

                                        <StackPanel Grid.Column="1">
                                            <TextBlock Text="{Binding Name}"
                                                   FontWeight="SemiBold"
                                                   TextTrimming="CharacterEllipsis"/>
                                            <TextBlock Text="{Binding WatchSettings.Path}"
                                                   FontSize="11"
                                                   Opacity="0.7"
                                                   TextTrimming="CharacterEllipsis"
                                                   ToolTip="{Binding WatchSettings.Path}"/>
                                        </StackPanel>
                                    </Grid>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>

                        <!-- Add Button -->
                        <Border Grid.Row="2"
                            Background="{DynamicResource SystemControlBackgroundChromeMediumBrush}"
                            BorderBrush="{DynamicResource SystemControlForegroundBaseMediumLowBrush}"
                            BorderThickness="0,1,0,0"
                            Padding="10">
                            <Button Command="{Binding AddPipelineCommand}"
                                HorizontalAlignment="Stretch">
                                <TextBlock Text="+ Add Pipeline"/>
                            </Button>
                        </Border>
                    </Grid>
                </Border>

                <!-- Splitter -->
                <GridSplitter Grid.Column="1"
                          Width="2"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Stretch"
                          Background="{DynamicResource SystemControlBackgroundChromeMediumBrush}"
                          Margin="8,0"/>

                <!-- Pipeline Details -->
                <Grid Grid.Column="2"
                  Margin="8,0,0,0"
                  Visibility="{Binding SelectedPipeline, Converter={StaticResource NullToVisibility}}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <!-- Pipeline Header -->
                    <Grid Grid.Row="0" Margin="0,0,0,16">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <TextBlock Text="{Binding SelectedPipeline.Name}"
                               FontSize="20"
                               FontWeight="SemiBold"/>

                        <Button Grid.Column="1"
                            Content="Delete Pipeline"
                            Command="{Binding DeletePipelineCommand}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Foreground="{DynamicResource SystemControlErrorTextForegroundBrush}"/>
                    </Grid>

                    <!-- Configuration Tabs -->
                    <TabControl Grid.Row="1"
                                ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                                Padding="0">

                        <!-- General Tab -->
                        <TabItem Header="General">
                            <ScrollViewer Padding="12">
                                <StackPanel>
                                    <TextBlock Text="Basic Configuration" Style="{StaticResource TabHeaderStyle}"/>

                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>

                                        <TextBlock Grid.Row="0" Grid.Column="0"
                                                   Text="Pipeline Name:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <TextBox Grid.Row="0" Grid.Column="1"
                                                 Text="{Binding SelectedPipeline.Name, UpdateSourceTrigger=PropertyChanged}"
                                                 Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="1" Grid.Column="0"
                                                   Text="Description:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <TextBox Grid.Row="1" Grid.Column="1"
                                                 Text="{Binding SelectedPipeline.Description}"
                                                 TextWrapping="Wrap"
                                                 AcceptsReturn="True"
                                                 Height="60"
                                                 Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="2" Grid.Column="0"
                                                   Text="Active:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <CheckBox Grid.Row="2" Grid.Column="1"
                                                  IsChecked="{Binding SelectedPipeline.Enabled}"
                                                  Content="Enable this pipeline"
                                                  Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="3" Grid.Column="0"
                                                   Text="Mapping Set:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <ComboBox Grid.Row="3" Grid.Column="1"
                                                  ItemsSource="{Binding MappingSets}"
                                                  SelectedValue="{Binding SelectedPipeline.MappingSetId}"
                                                  SelectedValuePath="Id"
                                                  DisplayMemberPath="Name"
                                                  HorizontalAlignment="Stretch"/>
                                    </Grid>
                                </StackPanel>
                            </ScrollViewer>
                        </TabItem>

                        <!-- Folders Tab -->
                        <TabItem Header="Folders">
                            <ScrollViewer Padding="16">
                                <StackPanel>
                                    <TextBlock Text="Folder Configuration" Style="{StaticResource TabHeaderStyle}"/>

                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>

                                        <TextBlock Grid.Row="0" Grid.Column="0"
                                                   Text="Watch Folder:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <Grid Grid.Row="0" Grid.Column="1" Margin="0,0,0,8">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <TextBox Grid.Column="0"
                                                     Text="{Binding SelectedPipeline.WatchSettings.Path, UpdateSourceTrigger=PropertyChanged}"/>
                                            <Button Grid.Column="1"
                                                    Content="Browse..."
                                                    Width="80"
                                                    Margin="8,0,0,0"
                                                    Click="BrowseWatchFolder_Click"/>
                                        </Grid>

                                        <TextBlock Grid.Row="1" Grid.Column="0"
                                                   Text="File Pattern:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <TextBox Grid.Row="1" Grid.Column="1"
                                                 Text="{Binding SelectedPipeline.WatchSettings.FilePattern}"
                                                 Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="2" Grid.Column="0"
                                                   Text="Subdirectories:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <CheckBox Grid.Row="2" Grid.Column="1"
                                                  IsChecked="{Binding SelectedPipeline.WatchSettings.IncludeSubdirectories}"
                                                  Content="Include subdirectories"
                                                  Margin="0,0,0,16"/>

                                        <TextBlock Grid.Row="3" Grid.Column="0"
                                                   Text="Output Folder:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <Grid Grid.Row="3" Grid.Column="1" Margin="0,0,0,8">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <TextBox Grid.Column="0"
                                                     Text="{Binding SelectedPipeline.ProcessingOptions.ArchiveFolder, UpdateSourceTrigger=PropertyChanged}"/>
                                            <Button Grid.Column="1"
                                                    Content="Browse..."
                                                    Width="80"
                                                    Margin="8,0,0,0"
                                                    Click="BrowseOutputFolder_Click"/>
                                        </Grid>

                                        <TextBlock Grid.Row="4" Grid.Column="0"
                                                   Text="Error Folder:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <Grid Grid.Row="4" Grid.Column="1" Margin="0,0,0,8">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <TextBox Grid.Column="0"
                                                     Text="{Binding SelectedPipeline.ProcessingOptions.ErrorFolder}"/>
                                            <Button Grid.Column="1"
                                                    Content="Browse..."
                                                    Width="80"
                                                    Margin="8,0,0,0"
                                                    Click="BrowseErrorFolder_Click"/>
                                        </Grid>

                                        <TextBlock Grid.Row="5" Grid.Column="0"
                                                   Text="Dead Letter Folder:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <Grid Grid.Row="5" Grid.Column="1" Margin="0,0,0,8">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <TextBox Grid.Column="0"
                                                     Text="{Binding SelectedPipeline.ProcessingOptions.DeadLetterFolder}"/>
                                            <Button Grid.Column="1"
                                                    Content="Browse..."
                                                    Width="80"
                                                    Margin="8,0,0,0"
                                                    Click="BrowseDeadLetterFolder_Click"/>
                                        </Grid>

                                        <TextBlock Grid.Row="6" Grid.Column="0"
                                                   Text="Output Organization:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <ComboBox Grid.Row="6" Grid.Column="1"
                                                  ItemsSource="{Binding OutputOrganizations}"
                                                  SelectedItem="{Binding SelectedPipeline.ProcessingOptions.OutputOrganization}"/>
                                    </Grid>
                                </StackPanel>
                            </ScrollViewer>
                        </TabItem>

                        <!-- PACS Upload Tab -->
                        <TabItem Header="PACS Upload">
                            <ScrollViewer Padding="16">
                                <StackPanel>
                                    <TextBlock Text="PACS Upload Configuration" Style="{StaticResource TabHeaderStyle}"/>
                                    <TextBlock Text="Automatically upload DICOM files to PACS after creation"
                                               FontSize="12"
                                               Opacity="0.7"
                                               Margin="0,0,0,16"/>

                                    <!-- Enable PACS -->
                                    <CheckBox IsChecked="{Binding SelectedPipeline.PacsConfiguration.Enabled}"
                                              Content="Enable automatic PACS upload after DICOM creation"
                                              FontSize="14" FontWeight="SemiBold"
                                              Margin="0,0,0,20"/>

                                    <!-- Server Settings -->
                                    <GroupBox Header="PACS Server Configuration" 
                                              IsEnabled="{Binding SelectedPipeline.PacsConfiguration.Enabled}"
                                              Margin="0,0,0,15">
                                        <Grid Margin="10">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="150"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>

                                            <TextBlock Grid.Row="0" Grid.Column="0" 
                                                       Text="Host/IP:" 
                                                       Style="{StaticResource SettingLabelStyle}"/>
                                            <TextBox Grid.Row="0" Grid.Column="1" 
                                                     Text="{Binding SelectedPipeline.PacsConfiguration.Host}"
                                                     ui:ControlHelper.PlaceholderText="192.168.1.100 or pacs.hospital.local"
                                                     Margin="0,0,0,8"/>

                                            <TextBlock Grid.Row="1" Grid.Column="0" 
                                                       Text="Port:" 
                                                       Style="{StaticResource SettingLabelStyle}"/>
                                            <TextBox Grid.Row="1" Grid.Column="1" 
                                                     Text="{Binding SelectedPipeline.PacsConfiguration.Port}"
                                                     ui:ControlHelper.PlaceholderText="104"
                                                     HorizontalAlignment="Left"
                                                     Width="100"
                                                     Margin="0,0,0,8"/>

                                            <TextBlock Grid.Row="2" Grid.Column="0" 
                                                       Text="Called AE Title:" 
                                                       Style="{StaticResource SettingLabelStyle}"/>
                                            <TextBox Grid.Row="2" Grid.Column="1" 
                                                     Text="{Binding SelectedPipeline.PacsConfiguration.CalledAeTitle}"
                                                     ui:ControlHelper.PlaceholderText="PACS_SERVER"
                                                     CharacterCasing="Upper"
                                                     MaxLength="16"
                                                     Margin="0,0,0,8"/>

                                            <TextBlock Grid.Row="3" Grid.Column="0" 
                                                       Text="Calling AE Title:" 
                                                       Style="{StaticResource SettingLabelStyle}"/>
                                            <TextBox Grid.Row="3" Grid.Column="1" 
                                                     Text="{Binding SelectedPipeline.PacsConfiguration.CallingAeTitle}"
                                                     ui:ControlHelper.PlaceholderText="CAMBRIDGE"
                                                     CharacterCasing="Upper"
                                                     MaxLength="16"
                                                     Margin="0,0,0,8"/>

                                            <TextBlock Grid.Row="4" Grid.Column="0" 
                                                       Text="Timeout (seconds):" 
                                                       Style="{StaticResource SettingLabelStyle}"/>
                                            <TextBox Grid.Row="4" Grid.Column="1" 
                                                     Text="{Binding SelectedPipeline.PacsConfiguration.TimeoutSeconds}"
                                                     HorizontalAlignment="Left"
                                                     Width="100"/>
                                        </Grid>
                                    </GroupBox>

                                    <!-- Retry Settings -->
                                    <GroupBox Header="Retry Configuration" 
                                              IsEnabled="{Binding SelectedPipeline.PacsConfiguration.Enabled}"
                                              Margin="0,0,0,15">
                                        <Grid Margin="10">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="150"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>

                                            <TextBlock Grid.Row="0" Grid.Column="0" 
                                                       Text="Max Retry Attempts:" 
                                                       Style="{StaticResource SettingLabelStyle}"/>
                                            <TextBox Grid.Row="0" Grid.Column="1" 
                                                     Text="{Binding SelectedPipeline.PacsConfiguration.MaxRetryAttempts}"
                                                     HorizontalAlignment="Left"
                                                     Width="100"
                                                     Margin="0,0,0,8"/>

                                            <TextBlock Grid.Row="1" Grid.Column="0" 
                                                       Text="Retry Delay (seconds):" 
                                                       Style="{StaticResource SettingLabelStyle}"/>
                                            <TextBox Grid.Row="1" Grid.Column="1" 
                                                     Text="{Binding SelectedPipeline.PacsConfiguration.RetryDelaySeconds}"
                                                     HorizontalAlignment="Left"
                                                     Width="100"
                                                     Margin="0,0,0,8"/>

                                            <TextBlock Grid.Row="2" Grid.Column="0" 
                                                       Text="Concurrent Uploads:" 
                                                       Style="{StaticResource SettingLabelStyle}"/>
                                            <TextBox Grid.Row="2" Grid.Column="1" 
                                                     Text="{Binding SelectedPipeline.PacsConfiguration.MaxConcurrentUploads}"
                                                     HorizontalAlignment="Left"
                                                     Width="100"/>
                                        </Grid>
                                    </GroupBox>

                                    <!-- Test Connection -->
                                    <Button Content="Test Connection (C-ECHO)"
                                            Command="{Binding TestPacsConnectionCommand}"
                                            IsEnabled="{Binding SelectedPipeline.PacsConfiguration.Enabled}"
                                            HorizontalAlignment="Left"
                                            Padding="20,8"
                                            Margin="0,0,0,10"/>

                                    <TextBlock Text="{Binding PacsTestResult}"
                                               Foreground="{Binding PacsTestResultColor}"
                                               FontWeight="SemiBold"
                                               Margin="0,5,0,0"/>

                                    <!-- Info Box -->
                                    <Border Background="{DynamicResource SystemControlBackgroundListLowBrush}"
                                            BorderBrush="{DynamicResource SystemControlForegroundBaseMediumLowBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4"
                                            Padding="12"
                                            Margin="0,20,0,0">
                                        <StackPanel>
                                            <TextBlock Text="â„¹ PACS Upload Information" 
                                                       FontWeight="SemiBold"
                                                       Margin="0,0,0,8"/>
                                            <TextBlock TextWrapping="Wrap" FontSize="12">
                                                â€¢ DICOM files are uploaded immediately after successful creation<LineBreak/>
                                                â€¢ Failed uploads are retried automatically based on retry settings<LineBreak/>
                                                â€¢ AE Titles must be configured on the PACS server<LineBreak/>
                                                â€¢ Standard DICOM port is 104 (may vary by installation)<LineBreak/>
                                                â€¢ Test connection uses C-ECHO to verify connectivity
                                            </TextBlock>
                                        </StackPanel>
                                    </Border>
                                </StackPanel>
                            </ScrollViewer>
                        </TabItem>

                        <!-- DICOM Tab -->
                        <TabItem Header="DICOM">
                            <ScrollViewer Padding="16">
                                <StackPanel>
                                    <TextBlock Text="DICOM Overrides (Optional)" Style="{StaticResource TabHeaderStyle}"/>
                                    <TextBlock Text="Leave empty to use global DICOM settings"
                                               FontSize="12"
                                               Opacity="0.7"
                                               Margin="0,0,0,16"/>

                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>

                                        <TextBlock Grid.Row="0" Grid.Column="0"
                                                   Text="Institution Name:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <TextBox Grid.Row="0" Grid.Column="1"
                                                 Text="{Binding SelectedPipelineDicomOverrides.InstitutionName}"
                                                 ui:ControlHelper.PlaceholderText="e.g. Radiology Department"
                                                 Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="1" Grid.Column="0"
                                                   Text="Department:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <TextBox Grid.Row="1" Grid.Column="1"
                                                 Text="{Binding SelectedPipelineDicomOverrides.InstitutionDepartment}"
                                                 ui:ControlHelper.PlaceholderText="e.g. Emergency Room"
                                                 Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="2" Grid.Column="0"
                                                   Text="Station Name:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <TextBox Grid.Row="2" Grid.Column="1"
                                                 Text="{Binding SelectedPipelineDicomOverrides.StationName}"
                                                 ui:ControlHelper.PlaceholderText="e.g. ER_WORKSTATION_01"/>
                                    </Grid>
                                </StackPanel>
                            </ScrollViewer>
                        </TabItem>

                        <!-- Processing Tab -->
                        <TabItem Header="Processing">
                            <ScrollViewer Padding="16">
                                <StackPanel>
                                    <TextBlock Text="Processing Options" Style="{StaticResource TabHeaderStyle}"/>

                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>

                                        <TextBlock Grid.Row="0" Grid.Column="0"
                                                   Text="File Delay (seconds):"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <TextBox Grid.Row="0" Grid.Column="1"
                                                 Text="{Binding SelectedPipeline.WatchSettings.MinimumFileAgeSeconds}"
                                                 HorizontalAlignment="Left"
                                                 Width="120"
                                                 Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="1" Grid.Column="0"
                                                   Text="Max Concurrent:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <TextBox Grid.Row="1" Grid.Column="1"
                                                 Text="{Binding SelectedPipeline.ProcessingOptions.MaxConcurrentProcessing}"
                                                 HorizontalAlignment="Left"
                                                 Width="120"
                                                 Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="2" Grid.Column="0"
                                                   Text="On Success:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <ComboBox Grid.Row="2" Grid.Column="1"
                                                  ItemsSource="{Binding ProcessingActions}"
                                                  SelectedItem="{Binding SelectedPipeline.ProcessingOptions.SuccessAction}"
                                                  Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="3" Grid.Column="0"
                                                   Text="On Failure:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <ComboBox Grid.Row="3" Grid.Column="1"
                                                  ItemsSource="{Binding ProcessingActions}"
                                                  SelectedItem="{Binding SelectedPipeline.ProcessingOptions.FailureAction}"
                                                  Margin="0,0,0,16"/>

                                        <TextBlock Grid.Row="4" Grid.Column="0"
                                                   Text="Retry Options:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <CheckBox Grid.Row="4" Grid.Column="1"
                                                  IsChecked="{Binding SelectedPipeline.ProcessingOptions.RetryOnFailure}"
                                                  Content="Enable retry on failure"
                                                  Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="5" Grid.Column="0"
                                                   Text="Max Retries:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <TextBox Grid.Row="5" Grid.Column="1"
                                                 Text="{Binding SelectedPipeline.ProcessingOptions.MaxRetryAttempts}"
                                                 HorizontalAlignment="Left"
                                                 Width="120"
                                                 IsEnabled="{Binding SelectedPipeline.ProcessingOptions.RetryOnFailure}"
                                                 Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="6" Grid.Column="0"
                                                   Text="Backup Files:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <CheckBox Grid.Row="6" Grid.Column="1"
                                                  IsChecked="{Binding SelectedPipeline.ProcessingOptions.CreateBackup}"
                                                  Content="Create backup before processing"
                                                  Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="7" Grid.Column="0"
                                                   Text="Process Existing:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <CheckBox Grid.Row="7" Grid.Column="1"
                                                  IsChecked="{Binding SelectedPipeline.ProcessingOptions.ProcessExistingOnStartup}"
                                                  Content="Process existing files on startup"/>
                                    </Grid>
                                </StackPanel>
                            </ScrollViewer>
                        </TabItem>

                        <!-- Logging Tab -->
                        <TabItem Header="Logging">
                            <ScrollViewer Padding="16">
                                <StackPanel>
                                    <TextBlock Text="Pipeline-specific Logging" Style="{StaticResource TabHeaderStyle}"/>
                                    <TextBlock Text="Override global logging settings for this pipeline"
                                               FontSize="12"
                                               Opacity="0.7"
                                               Margin="0,0,0,16"/>

                                    <CheckBox Content="Use custom logging for this pipeline"
                                              IsChecked="{Binding UseCustomLogging}"
                                              Margin="0,0,0,16"/>

                                    <Grid IsEnabled="{Binding UseCustomLogging}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>

                                        <TextBlock Grid.Row="0" Grid.Column="0"
                                                   Text="Log Level:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <ComboBox Grid.Row="0" Grid.Column="1"
                                                  ItemsSource="{Binding LogLevels}"
                                                  SelectedItem="{Binding PipelineLogLevel}"
                                                  HorizontalAlignment="Left"
                                                  Width="200"
                                                  Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="1" Grid.Column="0"
                                                   Text="Log Folder:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <Grid Grid.Row="1" Grid.Column="1" Margin="0,0,0,8">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <TextBox Grid.Column="0"
                                                     Text="{Binding PipelineLogFolder}"/>
                                            <Button Grid.Column="1"
                                                    Content="Browse..."
                                                    Width="80"
                                                    Margin="8,0,0,0"
                                                    Click="BrowseLogFolder_Click"/>
                                        </Grid>

                                        <TextBlock Grid.Row="2" Grid.Column="0"
                                                   Text="Retention Days:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <TextBox Grid.Row="2" Grid.Column="1"
                                                 Text="{Binding PipelineLogRetentionDays}"
                                                 HorizontalAlignment="Left"
                                                 Width="120"/>
                                    </Grid>
                                </StackPanel>
                            </ScrollViewer>
                        </TabItem>

                        <!-- Notifications Tab -->
                        <TabItem Header="Notifications">
                            <ScrollViewer Padding="16">
                                <StackPanel>
                                    <TextBlock Text="Pipeline-specific Notifications" Style="{StaticResource TabHeaderStyle}"/>
                                    <TextBlock Text="Configure alerts and notifications for this pipeline"
                                               FontSize="12"
                                               Opacity="0.7"
                                               Margin="0,0,0,16"/>

                                    <CheckBox Content="Override global notification settings"
                                              IsChecked="{Binding UseCustomNotifications}"
                                              Margin="0,0,0,16"/>

                                    <Grid IsEnabled="{Binding UseCustomNotifications}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>

                                        <TextBlock Grid.Row="0" Grid.Column="0"
                                                   Text="Email To:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <TextBox Grid.Row="0" Grid.Column="1"
                                                 Text="{Binding PipelineEmailTo}"
                                                 ui:ControlHelper.PlaceholderText="dept@hospital.com;manager@hospital.com"
                                                 Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="1" Grid.Column="0"
                                                   Text="Alert Level:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <ComboBox Grid.Row="1" Grid.Column="1"
                                                  ItemsSource="{Binding NotificationLevels}"
                                                  SelectedItem="{Binding PipelineAlertLevel}"
                                                  HorizontalAlignment="Left"
                                                  Width="200"
                                                  Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="2" Grid.Column="0"
                                                   Text="Daily Summary:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <CheckBox Grid.Row="2" Grid.Column="1"
                                                  IsChecked="{Binding PipelineSendDailySummary}"
                                                  Content="Send daily processing summary"
                                                  Margin="0,0,0,8"/>

                                        <TextBlock Grid.Row="3" Grid.Column="0"
                                                   Text="Alert on Errors:"
                                                   Style="{StaticResource SettingLabelStyle}"/>
                                        <CheckBox Grid.Row="3" Grid.Column="1"
                                                  IsChecked="{Binding PipelineAlertOnErrors}"
                                                  Content="Send immediate alerts for errors"/>
                                    </Grid>
                                </StackPanel>
                            </ScrollViewer>
                        </TabItem>

                    </TabControl>
                </Grid>

                <!-- No Selection Message -->
                <Grid Grid.Column="2"
                  Margin="8,0,0,0"
                  Visibility="{Binding SelectedPipeline, Converter={StaticResource NullToVisibility}, ConverterParameter=Inverse}"
                  VerticalAlignment="Center"
                  HorizontalAlignment="Center">
                    <StackPanel MaxWidth="400">
                        <TextBlock Text="No Pipeline Selected"
                               FontSize="18"
                               Opacity="0.5"
                               HorizontalAlignment="Center"/>
                        <TextBlock Text="Select a pipeline from the list or create a new one"
                               FontSize="13"
                               Opacity="0.5"
                               Margin="0,8,0,0"
                               HorizontalAlignment="Center"
                               TextWrapping="Wrap"
                               TextAlignment="Center"/>
                    </StackPanel>
                </Grid>
            </Grid>

            <!-- Status Bar -->
            <Border Grid.Row="1"
                Background="{DynamicResource SystemControlBackgroundChromeMediumBrush}"
                Height="28">
                <Grid Margin="16,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <!-- Loading -->
                    <ui:ProgressRing Grid.Column="0"
                                 IsActive="{Binding IsLoading}"
                                 Width="12"
                                 Height="12"
                                 Margin="0,0,8,0"
                                 Visibility="{Binding IsLoading, Converter={StaticResource BoolToVisibility}}"/>

                    <!-- Status -->
                    <TextBlock Grid.Column="1"
                           Text="{Binding StatusMessage}"
                           VerticalAlignment="Center"
                           FontSize="11"
                           Opacity="0.8"
                           Visibility="{Binding StatusMessage, Converter={StaticResource NullToVisibility}}"/>

                    <!-- Changes -->
                    <TextBlock Grid.Column="2"
                           FontSize="11"
                           Opacity="0.8"
                           VerticalAlignment="Center"
                           Visibility="{Binding HasUnsavedChanges, Converter={StaticResource BoolToVisibility}}">
                    <Run Text="â€¢" Foreground="Orange" FontSize="8"/>
                    <Run Text=" Unsaved changes"/>
                    </TextBlock>
                </Grid>
            </Border>
        </Grid>
    </Grid>
</Page>



===== C:\Users\oliver.stern\source\repos\CamBridge\src\CamBridge.Core\PipelineConfiguration.cs =====
// src\CamBridge.Core\PipelineConfiguration.cs
// Version: 0.8.0
// Description: Pipeline configuration model with PACS support
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Text.Json.Serialization;

namespace CamBridge.Core
{
    /// <summary>
    /// Represents a complete processing pipeline from input to output
    /// </summary>
    public class PipelineConfiguration : INotifyPropertyChanged
    {
        private Guid _id = Guid.NewGuid();
        private string _name = "New Pipeline";
        private string? _description;
        private bool _enabled = true;
        private PipelineWatchSettings _watchSettings = new();
        private ProcessingOptions _processingOptions = new();
        private DicomOverrides? _dicomOverrides;
        private Guid? _mappingSetId;
        private PacsConfiguration? _pacsConfiguration;

        /// <summary>
        /// Unique identifier for this pipeline
        /// </summary>
        public Guid Id
        {
            get => _id;
            set { _id = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// Display name for this pipeline
        /// </summary>
        public string Name
        {
            get => _name;
            set { _name = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// Optional description
        /// </summary>
        public string? Description
        {
            get => _description;
            set { _description = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// Whether this pipeline is active
        /// </summary>
        public bool Enabled
        {
            get => _enabled;
            set { _enabled = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// Watch folder configuration for this pipeline
        /// </summary>
        public PipelineWatchSettings WatchSettings
        {
            get => _watchSettings;
            set { _watchSettings = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// Processing options specific to this pipeline
        /// </summary>
        public ProcessingOptions ProcessingOptions
        {
            get => _processingOptions;
            set { _processingOptions = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// DICOM overrides for this pipeline (optional)
        /// </summary>
        public DicomOverrides? DicomOverrides
        {
            get => _dicomOverrides;
            set { _dicomOverrides = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// ID of the mapping set to use
        /// </summary>
        public Guid? MappingSetId
        {
            get => _mappingSetId;
            set { _mappingSetId = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// PACS upload configuration for this pipeline (optional)
        /// </summary>
        public PacsConfiguration? PacsConfiguration
        {
            get => _pacsConfiguration;
            set { _pacsConfiguration = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// Pipeline-specific metadata
        /// </summary>
        public Dictionary<string, string> Metadata { get; set; } = new();

        /// <summary>
        /// Creation timestamp
        /// </summary>
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

        /// <summary>
        /// Last modification timestamp
        /// </summary>
        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;

        /// <summary>
        /// Calculated property for UI display
        /// </summary>
        [JsonIgnore]
        public string ProcessedToday => "0 files"; // TODO: Implement actual counting

        [JsonIgnore]
        public bool IsValid => WatchSettings?.IsValid ?? false;

        public event PropertyChangedEventHandler? PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Watch folder settings for a pipeline
    /// </summary>
    public class PipelineWatchSettings : INotifyPropertyChanged
    {
        private string _path = string.Empty;
        private string _filePattern = "*.jpg;*.jpeg";
        private bool _includeSubdirectories = false;
        private string? _outputPath;
        private int _minimumFileAgeSeconds = 2;

        /// <summary>
        /// Folder path to watch
        /// </summary>
        public string Path
        {
            get => _path;
            set { _path = value; OnPropertyChanged(); OnPropertyChanged(nameof(IsValid)); }
        }

        /// <summary>
        /// File pattern to match (e.g., "*.jpg;*.jpeg")
        /// </summary>
        public string FilePattern
        {
            get => _filePattern;
            set { _filePattern = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// Include subdirectories in watch
        /// </summary>
        public bool IncludeSubdirectories
        {
            get => _includeSubdirectories;
            set { _includeSubdirectories = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// Custom output path (overrides processing options)
        /// </summary>
        public string? OutputPath
        {
            get => _outputPath;
            set { _outputPath = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// Minimum file age before processing (to ensure write completion)
        /// </summary>
        public int MinimumFileAgeSeconds
        {
            get => _minimumFileAgeSeconds;
            set { _minimumFileAgeSeconds = value; OnPropertyChanged(); }
        }

        [JsonIgnore]
        public bool IsValid => !string.IsNullOrWhiteSpace(Path) &&
                              System.IO.Directory.Exists(Path);

        public event PropertyChangedEventHandler? PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// DICOM settings that can be overridden per pipeline
    /// </summary>
    public class DicomOverrides : INotifyPropertyChanged
    {
        private string? _institutionName;
        private string? _institutionDepartment;
        private string? _stationName;

        /// <summary>
        /// Override institution name for this pipeline
        /// </summary>
        public string? InstitutionName
        {
            get => _institutionName;
            set { _institutionName = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// Override institution department for this pipeline
        /// </summary>
        public string? InstitutionDepartment
        {
            get => _institutionDepartment;
            set { _institutionDepartment = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// Override station name for this pipeline
        /// </summary>
        public string? StationName
        {
            get => _stationName;
            set { _stationName = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// Additional DICOM tags to set/override
        /// </summary>
        public Dictionary<string, string> AdditionalTags { get; set; } = new();

        public event PropertyChangedEventHandler? PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// Represents a reusable mapping configuration set
    /// </summary>
    public class MappingSet : INotifyPropertyChanged
    {
        private Guid _id = Guid.NewGuid();
        private string _name = "New Mapping Set";
        private string? _description;
        private bool _isSystemDefault = false;

        /// <summary>
        /// Unique identifier
        /// </summary>
        public Guid Id
        {
            get => _id;
            set { _id = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// Display name
        /// </summary>
        public string Name
        {
            get => _name;
            set { _name = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// Optional description
        /// </summary>
        public string? Description
        {
            get => _description;
            set { _description = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// The actual mapping rules
        /// </summary>
        public List<MappingRule> Rules { get; set; } = new();

        /// <summary>
        /// Whether this is a system default (read-only)
        /// </summary>
        public bool IsSystemDefault
        {
            get => _isSystemDefault;
            set { _isSystemDefault = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// Creation timestamp
        /// </summary>
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

        /// <summary>
        /// Last modification timestamp
        /// </summary>
        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;

        /// <summary>
        /// Tags for categorization
        /// </summary>
        public List<string> Tags { get; set; } = new();

        public event PropertyChangedEventHandler? PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// PACS (Picture Archiving and Communication System) configuration for automatic upload
    /// </summary>
    public class PacsConfiguration : INotifyPropertyChanged
    {
        private bool _enabled = false;
        private string _host = string.Empty;
        private int _port = 104;
        private string _calledAeTitle = string.Empty;
        private string _callingAeTitle = "CAMBRIDGE";
        private int _timeoutSeconds = 30;
        private int _maxConcurrentUploads = 1;
        private bool _retryOnFailure = true;
        private int _maxRetryAttempts = 3;
        private int _retryDelaySeconds = 5;

        /// <summary>
        /// Enable automatic PACS upload after DICOM creation
        /// </summary>
        public bool Enabled
        {
            get => _enabled;
            set { _enabled = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// PACS server hostname or IP address
        /// </summary>
        public string Host
        {
            get => _host;
            set { _host = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// PACS server port (default: 104)
        /// </summary>
        public int Port
        {
            get => _port;
            set { _port = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// Called AE Title (PACS server's AE Title)
        /// </summary>
        public string CalledAeTitle
        {
            get => _calledAeTitle;
            set { _calledAeTitle = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// Calling AE Title (our AE Title)
        /// </summary>
        public string CallingAeTitle
        {
            get => _callingAeTitle;
            set { _callingAeTitle = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// Connection timeout in seconds
        /// </summary>
        public int TimeoutSeconds
        {
            get => _timeoutSeconds;
            set { _timeoutSeconds = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// Maximum concurrent uploads per pipeline
        /// </summary>
        public int MaxConcurrentUploads
        {
            get => _maxConcurrentUploads;
            set { _maxConcurrentUploads = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// Enable retry on upload failure
        /// </summary>
        public bool RetryOnFailure
        {
            get => _retryOnFailure;
            set { _retryOnFailure = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// Maximum retry attempts
        /// </summary>
        public int MaxRetryAttempts
        {
            get => _maxRetryAttempts;
            set { _maxRetryAttempts = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// Delay between retry attempts in seconds
        /// </summary>
        public int RetryDelaySeconds
        {
            get => _retryDelaySeconds;
            set { _retryDelaySeconds = value; OnPropertyChanged(); }
        }

        /// <summary>
        /// Validate configuration
        /// </summary>
        public bool IsValid() =>
            !string.IsNullOrWhiteSpace(Host) &&
            Port > 0 &&
            Port < 65536 &&
            !string.IsNullOrWhiteSpace(CalledAeTitle) &&
            !string.IsNullOrWhiteSpace(CallingAeTitle) &&
            CalledAeTitle.Length <= 16 &&
            CallingAeTitle.Length <= 16;

        public event PropertyChangedEventHandler? PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}



===== C:\Users\oliver.stern\source\repos\CamBridge\src\CamBridge.Infrastructure\Services\DicomStoreService.cs =====
// src\CamBridge.Infrastructure\Services\DicomStoreService.cs
// Version: 0.8.3
// Description: DICOM C-STORE service with enhanced error handling and user-friendly messages
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using System;
using System.IO;
using System.Net.Sockets;
using System.Threading;
using System.Threading.Tasks;
using CamBridge.Core;
using Microsoft.Extensions.Logging;
using FellowOakDicom;
using FellowOakDicom.Network;
using FellowOakDicom.Network.Client;

namespace CamBridge.Infrastructure.Services
{
    /// <summary>
    /// Result of DICOM C-STORE operation
    /// </summary>
    public class StoreResult
    {
        public bool Success { get; init; }
        public string? ErrorMessage { get; init; }
        public string? UserFriendlyMessage { get; init; }
        public DateTime Timestamp { get; init; } = DateTime.UtcNow;
        public string? TransactionUid { get; init; }
        public DicomErrorType ErrorType { get; init; } = DicomErrorType.None;

        public static StoreResult CreateSuccess(string transactionUid = "")
            => new() { Success = true, TransactionUid = transactionUid };

        public static StoreResult CreateFailure(string errorMessage, string? userFriendlyMessage = null, DicomErrorType errorType = DicomErrorType.Unknown)
            => new()
            {
                Success = false,
                ErrorMessage = errorMessage,
                UserFriendlyMessage = userFriendlyMessage ?? errorMessage,
                ErrorType = errorType
            };
    }

    /// <summary>
    /// Types of DICOM errors for better handling
    /// </summary>
    public enum DicomErrorType
    {
        None,
        FileNotFound,
        NetworkConnection,
        Authentication,
        Timeout,
        InvalidConfiguration,
        PacsRejection,
        Unknown
    }

    /// <summary>
    /// Service for DICOM C-STORE operations to PACS with enhanced error handling
    /// </summary>
    public class DicomStoreService
    {
        private readonly ILogger<DicomStoreService> _logger;

        public DicomStoreService(ILogger<DicomStoreService> logger)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        /// <summary>
        /// Store DICOM file to PACS with enhanced error messages
        /// </summary>
        public async Task<StoreResult> StoreFileAsync(string dicomPath, PacsConfiguration config)
        {
            if (config == null) throw new ArgumentNullException(nameof(config));
            if (string.IsNullOrEmpty(dicomPath)) throw new ArgumentException("Path required", nameof(dicomPath));

            if (!File.Exists(dicomPath))
            {
                _logger.LogError("DICOM file not found: {Path}", dicomPath);
                return StoreResult.CreateFailure(
                    $"File not found: {dicomPath}",
                    $"DICOM-Datei nicht gefunden: {Path.GetFileName(dicomPath)}",
                    DicomErrorType.FileNotFound);
            }

            _logger.LogInformation("Starting C-STORE to {Host}:{Port} for {File}",
                config.Host, config.Port, Path.GetFileName(dicomPath));

            try
            {
                // Load DICOM file
                var dicomFile = await DicomFile.OpenAsync(dicomPath);
                var sopInstanceUid = dicomFile.Dataset.GetSingleValue<string>(DicomTag.SOPInstanceUID);
                var patientName = dicomFile.Dataset.GetSingleValueOrDefault<string>(DicomTag.PatientName, "Unknown");

                _logger.LogDebug("Loaded DICOM: SOP Instance UID={Uid}, Patient={Patient}",
                    sopInstanceUid, patientName);

                // Create client
                var client = DicomClientFactory.Create(
                    config.Host,
                    config.Port,
                    false,  // No TLS for now
                    config.CallingAeTitle,
                    config.CalledAeTitle);

                client.NegotiateAsyncOps();

                // Setup response handling with TaskCompletionSource
                DicomCStoreResponse? response = null;
                var responseReceived = new TaskCompletionSource<bool>();

                var request = new DicomCStoreRequest(dicomFile)
                {
                    OnResponseReceived = (req, res) =>
                    {
                        response = res;
                        _logger.LogDebug("C-STORE Response: Status={Status} ({Code:X4})",
                            res.Status.State, res.Status.Code);
                        responseReceived.TrySetResult(true);
                    }
                };

                await client.AddRequestAsync(request);

                // Send with timeout
                using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(config.TimeoutSeconds));

                try
                {
                    await Task.WhenAll(
                        client.SendAsync(cts.Token),
                        responseReceived.Task);
                }
                catch (OperationCanceledException)
                {
                    _logger.LogError("C-STORE timeout after {Timeout}s", config.TimeoutSeconds);
                    return StoreResult.CreateFailure(
                        $"Timeout after {config.TimeoutSeconds} seconds",
                        $"PACS antwortet nicht nach {config.TimeoutSeconds} Sekunden. Ist der PACS-Server erreichbar?",
                        DicomErrorType.Timeout);
                }

                // Check response
                if (response?.Status == DicomStatus.Success)
                {
                    _logger.LogInformation("C-STORE successful for {File}, SOP Instance UID: {Uid}",
                        Path.GetFileName(dicomPath), sopInstanceUid);
                    return StoreResult.CreateSuccess(sopInstanceUid);
                }
                else
                {
                    var errorMsg = $"C-STORE failed with status: {response?.Status?.Description ?? "Unknown"}";
                    var userMsg = TranslateDicomStatus(response?.Status);
                    _logger.LogWarning(errorMsg);
                    return StoreResult.CreateFailure(errorMsg, userMsg, DicomErrorType.PacsRejection);
                }
            }
            catch (DicomAssociationRejectedException ex)
            {
                _logger.LogError(ex, "DICOM association rejected");
                var userMsg = TranslateAssociationRejection(ex);
                return StoreResult.CreateFailure(
                    $"Association rejected: {ex.Message}",
                    userMsg,
                    DicomErrorType.Authentication);
            }
            catch (DicomNetworkException ex) when (ex.InnerException is SocketException socketEx)
            {
                _logger.LogError(ex, "Network error during C-STORE");
                var userMsg = TranslateSocketError(socketEx, config);
                return StoreResult.CreateFailure(
                    $"Network error: {ex.Message}",
                    userMsg,
                    DicomErrorType.NetworkConnection);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "C-STORE failed for {File}", Path.GetFileName(dicomPath));
                var userMsg = $"Unerwarteter Fehler beim PACS-Upload: {ex.GetType().Name}. Details siehe Log.";
                return StoreResult.CreateFailure($"Store failed: {ex.Message}", userMsg);
            }
        }

        /// <summary>
        /// Test PACS connection with C-ECHO and enhanced feedback
        /// </summary>
        public async Task<StoreResult> TestConnectionAsync(PacsConfiguration config)
        {
            if (config == null) throw new ArgumentNullException(nameof(config));

            if (!config.IsValid())
            {
                var issues = new System.Text.StringBuilder();
                if (string.IsNullOrWhiteSpace(config.Host))
                    issues.AppendLine("- Host/IP-Adresse fehlt");
                if (config.Port <= 0 || config.Port > 65535)
                    issues.AppendLine($"- UngÃ¼ltiger Port: {config.Port}");
                if (string.IsNullOrWhiteSpace(config.CallingAeTitle))
                    issues.AppendLine("- Calling AE Title fehlt");
                if (string.IsNullOrWhiteSpace(config.CalledAeTitle))
                    issues.AppendLine("- Called AE Title fehlt");

                return StoreResult.CreateFailure(
                    "Invalid PACS configuration",
                    $"PACS-Konfiguration ungÃ¼ltig:\n{issues}",
                    DicomErrorType.InvalidConfiguration);
            }

            _logger.LogInformation("Testing connection to {Host}:{Port} as {CallingAe} â†’ {CalledAe}",
                config.Host, config.Port, config.CallingAeTitle, config.CalledAeTitle);

            try
            {
                // Create client
                var client = DicomClientFactory.Create(
                    config.Host,
                    config.Port,
                    false,  // No TLS
                    config.CallingAeTitle,
                    config.CalledAeTitle);

                client.NegotiateAsyncOps();

                // Setup response handling
                DicomCEchoResponse? response = null;
                var responseReceived = new TaskCompletionSource<bool>();

                var request = new DicomCEchoRequest
                {
                    OnResponseReceived = (req, res) =>
                    {
                        response = res;
                        _logger.LogDebug("C-ECHO Response: {Status}", res.Status);
                        responseReceived.TrySetResult(true);
                    }
                };

                await client.AddRequestAsync(request);

                // Send with timeout
                using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(config.TimeoutSeconds));

                try
                {
                    await Task.WhenAll(
                        client.SendAsync(cts.Token),
                        responseReceived.Task);
                }
                catch (OperationCanceledException)
                {
                    _logger.LogError("C-ECHO timeout after {Timeout}s", config.TimeoutSeconds);
                    return StoreResult.CreateFailure(
                        $"Connection timeout after {config.TimeoutSeconds} seconds",
                        $"Verbindungstimeout nach {config.TimeoutSeconds} Sekunden.\n" +
                        $"MÃ¶gliche Ursachen:\n" +
                        $"- PACS-Server lÃ¤uft nicht (z.B. Orthanc Docker Container gestoppt)\n" +
                        $"- Falsche IP/Port ({config.Host}:{config.Port})\n" +
                        $"- Firewall blockiert Verbindung",
                        DicomErrorType.Timeout);
                }

                // Check response
                if (response?.Status == DicomStatus.Success)
                {
                    _logger.LogInformation("C-ECHO successful - PACS connection verified");
                    return StoreResult.CreateSuccess("ECHO-OK");
                }
                else
                {
                    var errorMsg = $"C-ECHO failed: {response?.Status?.Description ?? "No response"}";
                    var userMsg = TranslateDicomStatus(response?.Status);
                    _logger.LogWarning(errorMsg);
                    return StoreResult.CreateFailure(errorMsg, userMsg, DicomErrorType.PacsRejection);
                }
            }
            catch (DicomAssociationRejectedException ex)
            {
                _logger.LogError(ex, "C-ECHO association rejected");
                var userMsg = TranslateAssociationRejection(ex);
                return StoreResult.CreateFailure(
                    $"Association rejected: {ex.Message}",
                    userMsg,
                    DicomErrorType.Authentication);
            }
            catch (DicomNetworkException ex) when (ex.InnerException is SocketException socketEx)
            {
                _logger.LogError(ex, "Network error during C-ECHO");
                var userMsg = TranslateSocketError(socketEx, config);
                return StoreResult.CreateFailure(
                    $"Network error: {ex.Message}",
                    userMsg,
                    DicomErrorType.NetworkConnection);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "C-ECHO failed");
                return StoreResult.CreateFailure(
                    $"Connection test failed: {ex.Message}",
                    $"Verbindungstest fehlgeschlagen: {ex.GetType().Name}\nDetails siehe Log.",
                    DicomErrorType.Unknown);
            }
        }

        /// <summary>
        /// Store DICOM file with retry logic and improved logging
        /// </summary>
        public async Task<StoreResult> StoreFileWithRetryAsync(
            string dicomPath,
            PacsConfiguration config,
            CancellationToken cancellationToken = default)
        {
            if (!config.RetryOnFailure)
            {
                return await StoreFileAsync(dicomPath, config);
            }

            var attempts = 0;
            StoreResult? lastResult = null;
            var fileName = Path.GetFileName(dicomPath);

            while (attempts < config.MaxRetryAttempts && !cancellationToken.IsCancellationRequested)
            {
                attempts++;
                _logger.LogInformation("C-STORE attempt {Attempt}/{Max} for {File}",
                    attempts, config.MaxRetryAttempts, fileName);

                lastResult = await StoreFileAsync(dicomPath, config);

                if (lastResult.Success)
                {
                    if (attempts > 1)
                    {
                        _logger.LogInformation("C-STORE succeeded after {Attempts} attempts for {File}",
                            attempts, fileName);
                    }
                    return lastResult;
                }

                // Check if error is retryable
                if (IsNonRetryableError(lastResult.ErrorType))
                {
                    _logger.LogWarning("Non-retryable error detected for {File}: {ErrorType}",
                        fileName, lastResult.ErrorType);
                    break;
                }

                if (attempts < config.MaxRetryAttempts)
                {
                    var delay = TimeSpan.FromSeconds(config.RetryDelaySeconds * attempts);
                    _logger.LogWarning("C-STORE failed for {File}, retrying in {Delay}s. Error: {Error}",
                        fileName, delay.TotalSeconds, lastResult.UserFriendlyMessage);

                    await Task.Delay(delay, cancellationToken);
                }
            }

            if (attempts >= config.MaxRetryAttempts)
            {
                _logger.LogError("C-STORE failed after {Attempts} attempts for {File}. Final error: {Error}",
                    attempts, fileName, lastResult?.UserFriendlyMessage);
            }

            return lastResult ?? StoreResult.CreateFailure("No attempts made");
        }

        /// <summary>
        /// Determine if an error should not be retried
        /// </summary>
        private bool IsNonRetryableError(DicomErrorType errorType)
        {
            return errorType switch
            {
                DicomErrorType.FileNotFound => true,
                DicomErrorType.InvalidConfiguration => true,
                DicomErrorType.Authentication => true,  // Wrong AE Title won't fix itself
                _ => false  // Network errors, timeouts, etc. are retryable
            };
        }

        /// <summary>
        /// Translate DICOM status codes to user-friendly messages
        /// </summary>
        private string TranslateDicomStatus(DicomStatus? status)
        {
            if (status == null)
                return "Keine Antwort vom PACS-Server erhalten.";

            // Check common status codes
            if (status == DicomStatus.QueryRetrieveOutOfResources)
                return "PACS-Server hat nicht genÃ¼gend Ressourcen. Speicherplatz voll?";

            if (status == DicomStatus.StorageStorageOutOfResources)
                return "PACS-Speicher voll. Administrator kontaktieren.";

            if (status == DicomStatus.ProcessingFailure)
                return "PACS konnte die Datei nicht verarbeiten. DICOM-Format prÃ¼fen.";

            if (status == DicomStatus.NoSuchObjectInstance)
                return "PACS erkennt das Bildformat nicht. Transfer Syntax prÃ¼fen.";

            // Generic message with status code
            return $"PACS-Server meldet: {status.Description} (Code: {status.Code:X4})";
        }

        /// <summary>
        /// Translate association rejection reasons
        /// </summary>
        private string TranslateAssociationRejection(DicomAssociationRejectedException ex)
        {
            var msg = new System.Text.StringBuilder();
            msg.AppendLine("PACS-Verbindung abgelehnt!");

            // Check common rejection reasons in the message
            if (ex.Message.Contains("Called AE Title Not Recognized", StringComparison.OrdinalIgnoreCase))
            {
                msg.AppendLine($"Der Called AE Title wird vom PACS nicht erkannt.");
                msg.AppendLine($"Tipp: Bei Orthanc muss 'DICOM_CHECK_CALLED_AE_TITLE=false' gesetzt sein.");
            }
            else if (ex.Message.Contains("Calling AE Title Not Recognized", StringComparison.OrdinalIgnoreCase))
            {
                msg.AppendLine($"Der Calling AE Title wird vom PACS nicht akzeptiert.");
                msg.AppendLine($"Tipp: AE Title im PACS als bekannter Client registrieren.");
            }
            else
            {
                msg.AppendLine($"Grund: {ex.RejectReason}");
                msg.AppendLine($"Source: {ex.RejectSource}");
                msg.AppendLine($"Result: {ex.RejectResult}");
            }

            return msg.ToString();
        }

        /// <summary>
        /// Translate socket errors to user-friendly messages
        /// </summary>
        private string TranslateSocketError(SocketException socketEx, PacsConfiguration config)
        {
            var msg = new System.Text.StringBuilder();
            msg.AppendLine($"Netzwerkfehler beim Verbinden zu {config.Host}:{config.Port}");

            switch (socketEx.SocketErrorCode)
            {
                case SocketError.ConnectionRefused:
                    msg.AppendLine("Verbindung verweigert!");
                    msg.AppendLine("MÃ¶gliche Ursachen:");
                    msg.AppendLine("- PACS-Server lÃ¤uft nicht (Orthanc Docker Container prÃ¼fen)");
                    msg.AppendLine($"- Falscher Port (aktuell: {config.Port}, Orthanc Standard: 4242)");
                    msg.AppendLine("- Firewall blockiert Verbindung");
                    break;

                case SocketError.HostNotFound:
                case SocketError.HostUnreachable:
                    msg.AppendLine("Host nicht erreichbar!");
                    msg.AppendLine($"- Hostname/IP prÃ¼fen: {config.Host}");
                    msg.AppendLine("- Netzwerkverbindung prÃ¼fen");
                    msg.AppendLine("- DNS-AuflÃ¶sung prÃ¼fen");
                    break;

                case SocketError.TimedOut:
                    msg.AppendLine("Verbindung Timeout!");
                    msg.AppendLine("- PACS-Server Ã¼berlastet?");
                    msg.AppendLine("- Netzwerk zu langsam?");
                    msg.AppendLine($"- Timeout erhÃ¶hen (aktuell: {config.TimeoutSeconds}s)");
                    break;

                default:
                    msg.AppendLine($"Socket-Fehler: {socketEx.SocketErrorCode}");
                    msg.AppendLine($"Details: {socketEx.Message}");
                    break;
            }

            return msg.ToString();
        }
    }
}



===== C:\Users\oliver.stern\source\repos\CamBridge\src\CamBridge.Infrastructure\ServiceCollectionExtensions.cs =====
// src/CamBridge.Infrastructure/ServiceCollectionExtensions.cs
// Version: 0.8.0
// Description: DI container configuration with DicomStoreService
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using System;
using CamBridge.Core;
using CamBridge.Core.Interfaces;
using CamBridge.Infrastructure.Services;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using Microsoft.Extensions.Logging;

namespace CamBridge.Infrastructure
{
    /// <summary>
    /// Extension methods for service registration
    /// PIPELINE UPDATE: FileProcessor no longer registered as singleton!
    /// </summary>
    public static class ServiceCollectionExtensions
    {
        /// <summary>
        /// Adds infrastructure services to the DI container
        /// </summary>
        public static IServiceCollection AddInfrastructure(this IServiceCollection services, IConfiguration configuration)
        {
            // Add configuration
            services.Configure<CamBridgeSettingsV2>(configuration.GetSection("CamBridge"));
            services.Configure<ProcessingOptions>(configuration.GetSection("CamBridge:DefaultProcessingOptions"));

            // Add notification settings (global)
            services.Configure<NotificationSettings>(configuration.GetSection("CamBridge:Notifications"));

            // Register shared services (used by all pipelines)
            // FIX: ExifToolReader needs the path from configuration!
            services.AddSingleton<ExifToolReader>(sp =>
            {
                var settings = sp.GetRequiredService<IOptionsMonitor<CamBridgeSettingsV2>>().CurrentValue;
                return new ExifToolReader(
                    sp.GetRequiredService<ILogger<ExifToolReader>>(),
                    settings.ExifToolPath ?? "Tools\\exiftool.exe"
                );
            });

            services.AddSingleton<DicomConverter>();

            // Register DICOM Store Service for PACS upload
            services.AddSingleton<DicomStoreService>();

            // FileProcessor is NO LONGER registered here!
            // It's created per-pipeline in PipelineManager!
            // services.AddSingleton<FileProcessor>(); // REMOVED!

            // Register pipeline manager
            services.AddSingleton<PipelineManager>();

            // Register notification service (v0.7.18: Direct class, no interface!)
            services.AddSingleton<NotificationService>();

            // Register remaining interfaces (only 2 left!)
            services.AddSingleton<IMappingConfiguration, MappingConfigurationLoader>();
            services.AddSingleton<IDicomTagMapper, DicomTagMapper>();

            return services;
        }
    }
}

