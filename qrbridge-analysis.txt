===== FILE: Program.cs =====
using System;
using System.Windows.Forms;

namespace QRBridge
{
    /// <summary>
    /// Main entry point for QRBridge application.
    /// Version 1.2.5: Renamed executable from qbc.exe to qrb.exe.
    /// </summary>
    static class Program
    {
        [STAThread]
        static void Main(string[] args)
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);

            // v1.2.2: Add application exit handlers for resource cleanup
            Application.ApplicationExit += (s, e) => CleanupResources();
            AppDomain.CurrentDomain.ProcessExit += (s, e) => CleanupResources();

            try
            {
                // v1.2.4: Load configuration
                SimpleConfig.Load();

                // v1.2.3: Check for logging flag before processing other args
                // v1.2.4: Also check config file for default logging
                bool loggingEnabled = CheckForLoggingFlag(args) ||
                                     SimpleConfig.Get("Logging.EnableLogging", false);
                if (loggingEnabled)
                {
                    SimpleLogger.Enable();
                    args = RemoveLoggingFlag(args);
                }

                if (args?.Length == 0 || IsHelpRequested(args))
                {
                    using (var helpForm = new HelpForm())
                    {
                        Application.Run(helpForm);
                    }
                    return;
                }

                args = PreprocessArguments(args);

                PatientData patientData;
                try
                {
                    patientData = PatientData.Parse(args);
                }
                catch (ArgumentException ex)
                {
                    SimpleLogger.LogError("ArgumentParsing", ex);
                    ShowParameterError(ex.Message);
                    return;
                }

                // Sanitize input data (v1.2.1)
                patientData.SanitizeInput();

                // Use detailed validation (v1.2.1)
                var validationResult = patientData.ValidateDetailed();
                if (!validationResult.IsValid)
                {
                    SimpleLogger.LogValidationError(
                        validationResult.FieldName ?? "Unknown",
                        GetValidationType(validationResult.ErrorMessage));
                    ShowFieldError(validationResult.ErrorMessage, validationResult.FieldName);
                    return;
                }

                Application.ThreadException += Application_ThreadException;
                AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;

                SimpleLogger.LogInfo("Application", $"Starting QRBridge v{Constants.VERSION}");

                using (var qrForm = new QRDisplayForm(patientData))
                {
                    Application.Run(qrForm);
                }

                SimpleLogger.LogInfo("Application", "QRBridge closed normally");
            }
            catch (Exception ex)
            {
                SimpleLogger.LogError("Main", ex);
                ShowCriticalError(ex);
            }
            finally
            {
                CleanupResources();
            }
        }

        /// <summary>
        /// Check if -log flag is present in arguments (v1.2.3).
        /// </summary>
        private static bool CheckForLoggingFlag(string[] args)
        {
            if (args == null) return false;

            foreach (var arg in args)
            {
                if (arg?.ToLower() == "-log")
                    return true;
            }
            return false;
        }

        /// <summary>
        /// Remove -log flag from arguments array (v1.2.3).
        /// </summary>
        private static string[] RemoveLoggingFlag(string[] args)
        {
            if (args == null) return args;

            var filtered = new System.Collections.Generic.List<string>();
            foreach (var arg in args)
            {
                if (arg?.ToLower() != "-log")
                    filtered.Add(arg);
            }
            return filtered.ToArray();
        }

        /// <summary>
        /// Extract validation type from error message for logging (v1.2.3).
        /// </summary>
        private static string GetValidationType(string errorMessage)
        {
            if (string.IsNullOrEmpty(errorMessage))
                return "Unknown";

            // Extract validation type based on common patterns
            if (errorMessage.Contains("required") || errorMessage.Contains("erforderlich"))
                return "Required";
            if (errorMessage.Contains("invalid") || errorMessage.Contains("ungültig"))
                return "InvalidFormat";
            if (errorMessage.Contains("too long") || errorMessage.Contains("zu lang"))
                return "TooLong";
            if (errorMessage.Contains("too short") || errorMessage.Contains("zu kurz"))
                return "TooShort";
            if (errorMessage.Contains("future") || errorMessage.Contains("Zukunft"))
                return "DateInFuture";
            if (errorMessage.Contains("too old") || errorMessage.Contains("zu alt"))
                return "DateTooOld";

            return "ValidationFailed";
        }

        private static void CleanupResources()
        {
            try
            {
                Constants.Fonts.Dispose();

                // v1.2.2: Force garbage collection for medical environment
                GC.Collect();
                GC.WaitForPendingFinalizers();
                GC.Collect();
            }
            catch (Exception ex)
            {
                SimpleLogger.LogError("ResourceCleanup", ex);
            }
        }

        private static bool IsHelpRequested(string[] args)
        {
            foreach (string arg in args)
            {
                if (string.IsNullOrEmpty(arg))
                    continue;

                string cleanArg = arg.Trim().ToLower();
                if (Array.Exists(Constants.HELP_PARAMETERS, param => param == cleanArg))
                {
                    return true;
                }
            }
            return false;
        }

        private static string[] PreprocessArguments(string[] args)
        {
            if (args?.Length == 0)
                return args;

            var processed = new System.Collections.Generic.List<string>();
            var inQuotes = false;
            var current = "";

            foreach (var arg in args)
            {
                if (!inQuotes)
                {
                    if (arg.StartsWith("\""))
                    {
                        if (arg.EndsWith("\"") && arg.Length > 1)
                        {
                            processed.Add(arg.Trim('"'));
                        }
                        else
                        {
                            inQuotes = true;
                            current = arg.Substring(1);
                        }
                    }
                    else
                    {
                        processed.Add(arg);
                    }
                }
                else
                {
                    if (arg.EndsWith("\""))
                    {
                        current += $" {arg.Substring(0, arg.Length - 1)}";
                        processed.Add(current);
                        current = "";
                        inQuotes = false;
                    }
                    else
                    {
                        current += $" {arg}";
                    }
                }
            }

            if (inQuotes && !string.IsNullOrEmpty(current))
            {
                processed.Add(current);
            }

            return processed.ToArray();
        }

        private static void ShowParameterError(string errorMessage)
        {
            var culture = System.Globalization.CultureInfo.CurrentUICulture;
            bool isGerman = culture.TwoLetterISOLanguageName.ToLower() == "de";

            string title = isGerman ? "QRBridge Fehler" : "QRBridge Error";
            string helpHint = isGerman
                ? "\n\nFür Hilfe führen Sie aus: qrb.exe /?"
                : "\n\nFor help run: qrb.exe /?";

            MessageBox.Show(
                $"{errorMessage}{helpHint}",
                title,
                MessageBoxButtons.OK,
                MessageBoxIcon.Error);
        }

        /// <summary>
        /// Show field-specific validation error (v1.2.1).
        /// </summary>
        /// <param name="errorMessage">Error message</param>
        /// <param name="fieldName">Field that caused the error</param>
        private static void ShowFieldError(string errorMessage, string fieldName)
        {
            var culture = System.Globalization.CultureInfo.CurrentUICulture;
            bool isGerman = culture.TwoLetterISOLanguageName.ToLower() == "de";

            string title = isGerman ? "QRBridge Validierungsfehler" : "QRBridge Validation Error";
            string fieldLabel = isGerman ? "Feld" : "Field";
            string helpHint = isGerman
                ? "\n\nFür Hilfe führen Sie aus: qrb.exe /?"
                : "\n\nFor help run: qrb.exe /?";

            string message;
            if (!string.IsNullOrEmpty(fieldName))
            {
                string localizedFieldName = ValidationMessages.GetLocalizedFieldName(fieldName);
                message = $"{fieldLabel}: {localizedFieldName}\n\n{errorMessage}{helpHint}";
            }
            else
            {
                message = $"{errorMessage}{helpHint}";
            }

            MessageBox.Show(
                message,
                title,
                MessageBoxButtons.OK,
                MessageBoxIcon.Warning); // Warning instead of Error for validation issues
        }

        private static void ShowCriticalError(Exception exception)
        {
            var culture = System.Globalization.CultureInfo.CurrentUICulture;
            bool isGerman = culture.TwoLetterISOLanguageName.ToLower() == "de";

            string title = isGerman ? "QRBridge Kritischer Fehler" : "QRBridge Critical Error";
            string message = isGerman
                ? $"Ein kritischer Fehler ist aufgetreten:\n{exception.Message}\n\n" +
                  $"Bitte kontaktieren Sie den technischen Support.\n\n" +
                  $"{Constants.APP_NAME} v{Constants.VERSION}"
                : $"A critical error occurred:\n{exception.Message}\n\n" +
                  $"Please contact technical support.\n\n" +
                  $"{Constants.APP_NAME} v{Constants.VERSION}";

            MessageBox.Show(message, title, MessageBoxButtons.OK, MessageBoxIcon.Error);
        }

        private static void Application_ThreadException(object sender,
            System.Threading.ThreadExceptionEventArgs e)
        {
            SimpleLogger.LogError("ThreadException", e.Exception);
            ShowCriticalError(e.Exception);
        }

        private static void CurrentDomain_UnhandledException(object sender,
            UnhandledExceptionEventArgs e)
        {
            var ex = e.ExceptionObject as Exception
                ?? new Exception("Unknown system error occurred");
            SimpleLogger.LogError("UnhandledException", ex);
            ShowCriticalError(ex);
        }
    }
}

===== FILE: SimpleConfig.cs =====
using System;
using System.Collections.Generic;
using System.IO;

namespace QRBridge
{
    /// <summary>
    /// Simple INI configuration reader for QRBridge.
    /// Version 1.2.5: No changes, just renamed executable.
    /// </summary>
    public static class SimpleConfig
    {
        #region Private Fields

        private static readonly Dictionary<string, string> _settings =
            new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
        private static bool _loaded = false;

        #endregion

        #region Public Methods

        /// <summary>
        /// Load configuration from QRBridge.ini if it exists.
        /// Silent operation - no errors if file missing.
        /// </summary>
        public static void Load()
        {
            try
            {
                string iniPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "QRBridge.ini");
                if (!File.Exists(iniPath))
                {
                    _loaded = true;
                    return; // Config file is optional
                }

                string currentSection = "";
                foreach (string line in File.ReadAllLines(iniPath))
                {
                    string trimmed = line.Trim();

                    // Skip empty lines and comments
                    if (string.IsNullOrEmpty(trimmed) || trimmed.StartsWith(";"))
                        continue;

                    // Section header
                    if (trimmed.StartsWith("[") && trimmed.EndsWith("]"))
                    {
                        currentSection = trimmed.Substring(1, trimmed.Length - 2);
                        continue;
                    }

                    // Key=Value pair
                    int equals = trimmed.IndexOf('=');
                    if (equals > 0)
                    {
                        string key = trimmed.Substring(0, equals).Trim();
                        string value = trimmed.Substring(equals + 1).Trim();

                        if (!string.IsNullOrEmpty(currentSection))
                            key = $"{currentSection}.{key}";

                        _settings[key] = value;
                    }
                }

                _loaded = true;
            }
            catch
            {
                // Config loading should never crash the app
                _loaded = true;
            }
        }

        /// <summary>
        /// Get configuration value with type conversion.
        /// </summary>
        /// <typeparam name="T">Target type</typeparam>
        /// <param name="key">Configuration key (Section.Key format)</param>
        /// <param name="defaultValue">Default value if not found</param>
        /// <returns>Configuration value or default</returns>
        public static T Get<T>(string key, T defaultValue)
        {
            if (!_loaded) Load();

            if (!_settings.TryGetValue(key, out string value))
                return defaultValue;

            try
            {
                // Handle common types
                if (typeof(T) == typeof(string))
                    return (T)(object)value;

                if (typeof(T) == typeof(int))
                    return (T)(object)int.Parse(value);

                if (typeof(T) == typeof(bool))
                    return (T)(object)bool.Parse(value);

                // Fallback to Convert
                return (T)Convert.ChangeType(value, typeof(T));
            }
            catch
            {
                return defaultValue;
            }
        }

        /// <summary>
        /// Check if a configuration key exists.
        /// </summary>
        /// <param name="key">Configuration key to check</param>
        /// <returns>True if key exists</returns>
        public static bool HasKey(string key)
        {
            if (!_loaded) Load();
            return _settings.ContainsKey(key);
        }

        #endregion
    }
}

===== FILE: Constants.cs =====
using System;
using System.Collections.Generic;
using System.Drawing;

namespace QRBridge
{
    /// <summary>
    /// All application constants in one place - KISS principle.
    /// Version 1.2.5: Renamed executable from qbc.exe to qrb.exe.
    /// </summary>
    public static class Constants
    {
        // Application metadata
        /// <summary>Application version string</summary>
        public const string VERSION = "1.2.5";
        /// <summary>Application name</summary>
        public const string APP_NAME = "QRBridge";
        /// <summary>Application description</summary>
        public const string APP_DESCRIPTION = "Medical QR Code Display for Ricoh G900 II";

        // QR Code generation - CRITICAL: Do NOT modify for camera compatibility!
        /// <summary>Maximum bytes for QR code (Ricoh G900 II memo field limit)</summary>
        public const int QR_MAX_BYTES = 128;
        /// <summary>Field delimiter for QR data format</summary>
        public const string QR_FIELD_DELIMITER = "|";
        /// <summary>Date format for QR codes</summary>
        public const string QR_DATE_FORMAT = "yyyy-MM-dd";
        /// <summary>Valid gender codes</summary>
        public const string VALID_GENDERS = "MFDX";

        // Timeout limits
        /// <summary>Minimum timeout in seconds</summary>
        public const int MIN_TIMEOUT = 1;
        /// <summary>Maximum timeout in seconds</summary>
        public const int MAX_TIMEOUT = 300;

        // v1.2.4: Default timeout can be configured
        private static int? _defaultTimeout;
        /// <summary>Default timeout in seconds (configurable)</summary>
        public static int DEFAULT_TIMEOUT
        {
            get
            {
                if (!_defaultTimeout.HasValue)
                {
                    _defaultTimeout = SimpleConfig.Get("Display.DefaultTimeout", 10);
                    // Validate configured value
                    if (_defaultTimeout.Value < MIN_TIMEOUT || _defaultTimeout.Value > MAX_TIMEOUT)
                        _defaultTimeout = 10;
                }
                return _defaultTimeout.Value;
            }
        }

        // Validation limits (v1.2.1)
        /// <summary>Minimum name length</summary>
        public const int MIN_NAME_LENGTH = 2;
        /// <summary>Maximum name length</summary>
        public const int MAX_NAME_LENGTH = 100;

        // v1.2.4: Maximum comment length can be configured
        private static int? _maxCommentLength;
        /// <summary>Maximum comment length (configurable)</summary>
        public static int MAX_COMMENT_LENGTH
        {
            get
            {
                if (!_maxCommentLength.HasValue)
                {
                    _maxCommentLength = SimpleConfig.Get("Validation.MaxCommentLength", 200);
                    // Validate configured value (1-500)
                    if (_maxCommentLength.Value < 1 || _maxCommentLength.Value > 500)
                        _maxCommentLength = 200;
                }
                return _maxCommentLength.Value;
            }
        }

        /// <summary>Minimum birth year for validation</summary>
        public const int MIN_BIRTH_YEAR = 1900;

        // Window dimensions (medical UI standards)
        /// <summary>Main window width in pixels</summary>
        public const int WINDOW_WIDTH = 500;
        /// <summary>Main window height in pixels</summary>
        public const int WINDOW_HEIGHT = 720;

        // QR dimensions - FIXED in v1.1.4 for proper quiet zones
        /// <summary>QR panel size in pixels (increased for quiet zones)</summary>
        public const int QR_PANEL_SIZE = 400;
        /// <summary>QR image size in pixels (reduced for more margin)</summary>
        public const int QR_IMAGE_SIZE = 340;

        // UI Layout dimensions
        /// <summary>Standard margin for UI elements</summary>
        public const int UI_MARGIN = 20;
        /// <summary>Title label height</summary>
        public const int TITLE_HEIGHT = 35;
        /// <summary>QR panel Y position</summary>
        public const int QR_PANEL_Y = 70;
        /// <summary>Data panel height (increased for VBS field names)</summary>
        public const int DATA_PANEL_HEIGHT = 185;
        /// <summary>Data panel Y position</summary>
        public const int DATA_PANEL_Y = 475;
        /// <summary>Countdown panel height</summary>
        public const int COUNTDOWN_HEIGHT = 50;
        /// <summary>Inner padding for panels</summary>
        public const int PANEL_PADDING = 10;

        // Font sizes - v1.2.0: No more magic numbers!
        /// <summary>Standard UI font size</summary>
        public const float FONT_SIZE_STANDARD = 9F;
        /// <summary>Title font size</summary>
        public const float FONT_SIZE_TITLE = 16F;
        /// <summary>Help title font size</summary>
        public const float FONT_SIZE_HELP_TITLE = 20F;
        /// <summary>Countdown timer font size</summary>
        public const float FONT_SIZE_COUNTDOWN = 12F;
        /// <summary>Button font size</summary>
        public const float FONT_SIZE_BUTTON = 11F;
        /// <summary>Data display font size</summary>
        public const float FONT_SIZE_DATA = 8F;
        /// <summary>Language selector font size</summary>
        public const float FONT_SIZE_LANGUAGE = 10F;
        /// <summary>Help text font size</summary>
        public const float FONT_SIZE_HELP_TEXT = 10.5F;

        // HelpForm specific dimensions
        /// <summary>Help window width</summary>
        public const int HELP_WINDOW_WIDTH = 950;
        /// <summary>Help window height</summary>
        public const int HELP_WINDOW_HEIGHT = 750;
        /// <summary>Help header height</summary>
        public const int HELP_HEADER_HEIGHT = 65;
        /// <summary>Help textbox width</summary>
        public const int HELP_TEXTBOX_WIDTH = 870;
        /// <summary>Help textbox height</summary>
        public const int HELP_TEXTBOX_HEIGHT = 540;
        /// <summary>Help textbox Y position</summary>
        public const int HELP_TEXTBOX_Y = 85;
        /// <summary>Language combo width</summary>
        public const int HELP_LANGUAGE_COMBO_WIDTH = 130;
        /// <summary>Language combo height</summary>
        public const int HELP_LANGUAGE_COMBO_HEIGHT = 30;
        /// <summary>Language combo X position</summary>
        public const int HELP_LANGUAGE_COMBO_X = 780;
        /// <summary>Language combo Y position</summary>
        public const int HELP_LANGUAGE_COMBO_Y = 18;
        /// <summary>Language label width</summary>
        public const int HELP_LANGUAGE_LABEL_WIDTH = 80;
        /// <summary>Language label X offset from combo</summary>
        public const int HELP_LANGUAGE_LABEL_X_OFFSET = 90;
        /// <summary>Help close button width</summary>
        public const int HELP_CLOSE_BUTTON_WIDTH = 150;
        /// <summary>Help close button height</summary>
        public const int HELP_CLOSE_BUTTON_HEIGHT = 45;
        /// <summary>Help close button X position</summary>
        public const int HELP_CLOSE_BUTTON_X = 400;
        /// <summary>Help close button Y position</summary>
        public const int HELP_CLOSE_BUTTON_Y = 655;
        /// <summary>Help title X position</summary>
        public const int HELP_TITLE_X = 40;
        /// <summary>Help title Y position</summary>
        public const int HELP_TITLE_Y = 10;
        /// <summary>Help title width</summary>
        public const int HELP_TITLE_WIDTH = 400;

        // Date validation
        /// <summary>Maximum age in years for date validation</summary>
        public const int MAX_AGE_YEARS = 150;

        // QR generation settings
        /// <summary>Pixels per module for QR code generation</summary>
        public const int QR_PIXELS_PER_MODULE = 10;

        // Error display
        /// <summary>Error bitmap size</summary>
        public const int ERROR_BITMAP_SIZE = 200;

        // Field name mappings (v1.2.1)
        /// <summary>German field names for localization</summary>
        public static readonly Dictionary<string, string> FieldNamesDE = new Dictionary<string, string>
        {
            { "examid", "Untersuchungs-ID" },
            { "name", "Patientenname" },
            { "birthdate", "Geburtsdatum" },
            { "gender", "Geschlecht" },
            { "comment", "Kommentar" },
            { "timeout", "Anzeigezeit" },
            { "data", "QR-Daten" }
        };

        /// <summary>English field names for localization</summary>
        public static readonly Dictionary<string, string> FieldNamesEN = new Dictionary<string, string>
        {
            { "examid", "Examination ID" },
            { "name", "Patient Name" },
            { "birthdate", "Birth Date" },
            { "gender", "Gender" },
            { "comment", "Comment" },
            { "timeout", "Display Time" },
            { "data", "QR Data" }
        };

        // UI Colors - professional medical application palette
        /// <summary>Professional medical UI color palette</summary>
        public static class Colors
        {
            /// <summary>Main background color (dark blue-gray)</summary>
            public static readonly Color Background = Color.FromArgb(44, 62, 80);
            /// <summary>Panel background color (slightly lighter)</summary>
            public static readonly Color Panel = Color.FromArgb(52, 73, 94);
            /// <summary>Border color (gray)</summary>
            public static readonly Color Border = Color.FromArgb(127, 140, 141);
            /// <summary>Primary text color (white)</summary>
            public static readonly Color Text = Color.White;
            /// <summary>Information color (blue)</summary>
            public static readonly Color Info = Color.FromArgb(52, 152, 219);
            /// <summary>Warning color (orange)</summary>
            public static readonly Color Warning = Color.FromArgb(243, 156, 18);
            /// <summary>Error color (red)</summary>
            public static readonly Color Error = Color.FromArgb(231, 76, 60);
            /// <summary>Success color (green)</summary>
            public static readonly Color Success = Color.FromArgb(46, 204, 113);
        }

        // Fonts - lazy-loaded with proper disposal
        /// <summary>Professional typography font definitions with resource management</summary>
        public static class Fonts
        {
            private static readonly Lazy<Font> _standard =
                new Lazy<Font>(() => new Font("Segoe UI", FONT_SIZE_STANDARD, FontStyle.Regular));
            private static readonly Lazy<Font> _title =
                new Lazy<Font>(() => new Font("Segoe UI", FONT_SIZE_TITLE, FontStyle.Bold));
            private static readonly Lazy<Font> _helpTitle =
                new Lazy<Font>(() => new Font("Segoe UI", FONT_SIZE_HELP_TITLE, FontStyle.Bold));
            private static readonly Lazy<Font> _countdown =
                new Lazy<Font>(() => new Font("Segoe UI", FONT_SIZE_COUNTDOWN, FontStyle.Bold));
            private static readonly Lazy<Font> _button =
                new Lazy<Font>(() => new Font("Segoe UI", FONT_SIZE_BUTTON, FontStyle.Bold));

            // v1.2.2: Add proper caching for data font
            private static Font _dataFont;
            private static Font _languageFont;
            private static Font _helpTextFont;

            /// <summary>Standard UI font</summary>
            public static Font Standard => _standard.Value;
            /// <summary>Title font</summary>
            public static Font Title => _title.Value;
            /// <summary>Help title font</summary>
            public static Font HelpTitle => _helpTitle.Value;
            /// <summary>Countdown timer font</summary>
            public static Font Countdown => _countdown.Value;
            /// <summary>Button font</summary>
            public static Font Button => _button.Value;

            /// <summary>Data display font (Consolas)</summary>
            public static Font DataFont
            {
                get
                {
                    if (_dataFont == null)
                        _dataFont = new Font("Consolas", FONT_SIZE_DATA, FontStyle.Regular);
                    return _dataFont;
                }
            }

            /// <summary>Language selector font</summary>
            public static Font LanguageFont
            {
                get
                {
                    if (_languageFont == null)
                        _languageFont = new Font("Segoe UI", FONT_SIZE_LANGUAGE, FontStyle.Regular);
                    return _languageFont;
                }
            }

            /// <summary>Help text font</summary>
            public static Font HelpTextFont
            {
                get
                {
                    if (_helpTextFont == null)
                        _helpTextFont = new Font("Segoe UI", FONT_SIZE_HELP_TEXT, FontStyle.Regular);
                    return _helpTextFont;
                }
            }

            /// <summary>
            /// Dispose all created font resources.
            /// Should be called on application exit.
            /// </summary>
            public static void Dispose()
            {
                if (_standard.IsValueCreated) _standard.Value.Dispose();
                if (_title.IsValueCreated) _title.Value.Dispose();
                if (_helpTitle.IsValueCreated) _helpTitle.Value.Dispose();
                if (_countdown.IsValueCreated) _countdown.Value.Dispose();
                if (_button.IsValueCreated) _button.Value.Dispose();

                // v1.2.2: Dispose additional cached fonts
                _dataFont?.Dispose();
                _languageFont?.Dispose();
                _helpTextFont?.Dispose();
            }
        }

        // Help parameters
        /// <summary>Command line parameters that trigger help display</summary>
        public static readonly string[] HELP_PARAMETERS = { "/?", "-h", "--help", "/help", "help" };

        // v1.2.4: Default language based on configuration or system culture
        /// <summary>Get default language index based on configuration or system culture</summary>
        public static int GetDefaultLanguageIndex()
        {
            string configLang = SimpleConfig.Get("Language.DefaultLanguage", "auto").ToLower();

            // Map config language to index
            switch (configLang)
            {
                case "de": return 0;
                case "en": return 1;
                case "fr": return 2;
                case "es": return 3;
                case "auto":
                default:
                    // Fall back to system culture
                    var culture = System.Globalization.CultureInfo.CurrentUICulture;
                    switch (culture.TwoLetterISOLanguageName.ToLower())
                    {
                        case "de": return 0; // German
                        case "fr": return 2; // French
                        case "es": return 3; // Spanish
                        default: return 1;   // English as fallback
                    }
            }
        }

        // Multi-language help content - simplified but complete
        /// <summary>Multi-language help system content and utilities</summary>
        public static class HelpText
        {
            /// <summary>Available language display names</summary>
            public static readonly string[] Languages = { "Deutsch", "English", "Français", "Español" };
            /// <summary>Language codes corresponding to display names</summary>
            public static readonly string[] LanguageCodes = { "de", "en", "fr", "es" };
            /// <summary>Close button text for each language</summary>
            public static readonly string[] CloseButton = { "Schließen", "Close", "Fermer", "Cerrar" };

            /// <summary>
            /// Get complete help content for specified language
            /// </summary>
            /// <param name="languageIndex">Language index (0=German, 1=English, 2=French, 3=Spanish)</param>
            /// <returns>Complete help text in specified language</returns>
            public static string GetHelpContent(int languageIndex)
            {
                var content = new string[][]
                {
                    // German (0)
                    new[] {
                        $"QRBridge v{VERSION} - Medizinische QR-Code Anzeige",
                        "═══════════════════════════════════════════════════════════",
                        "",
                        "VERWENDUNG:",
                        "qrb.exe -examid \"ID\" -name \"Name\" -birthdate \"YYYY-MM-DD\" -gender \"M/F/D/X\"",
                        "",
                        "ERFORDERLICHE PARAMETER:",
                        "  -examid      Untersuchungs-ID (Beispiel: \"EX123\")",
                        "  -name        Patientenname als \"Nachname, Vorname\"",
                        "  -birthdate   Geburtsdatum im Format YYYY-MM-DD",
                        "  -gender      Geschlecht: M, F, D oder X",
                        "",
                        "OPTIONALE PARAMETER:",
                        "  -comment     Zusätzlicher Kommentar oder Hinweis",
                        "  -timeout     Anzeigezeit in Sekunden (1-300, Standard: 10)",
                        "  -x, -y       Fensterposition (X, Y Koordinaten)",
                        "  -log         Fehlerprotokollierung aktivieren (v1.2.3)",
                        "",
                        "BEISPIELE:",
                        "  qrb.exe -examid \"EX001\" -name \"Müller, Hans\" -birthdate \"1970-01-01\" -gender \"M\"",
                        "  qrb.exe -examid \"EX002\" -name \"Schmidt, Maria\" -birthdate \"1985-03-15\" -gender \"F\" -comment \"Röntgen Thorax\"",
                        "",
                        "═══════════════════════════════════════════════════════════",
                        $"QRBridge v{VERSION} • Optimiert für Ricoh G900 II Kamera",
                        "© 2025 Claude's Improbably Reliable Software Solutions"
                    },
                    
                    // English (1)
                    new[] {
                        $"QRBridge v{VERSION} - Medical QR Code Display",
                        "═══════════════════════════════════════════════════════════",
                        "",
                        "USAGE:",
                        "qrb.exe -examid \"ID\" -name \"Name\" -birthdate \"YYYY-MM-DD\" -gender \"M/F/D/X\"",
                        "",
                        "REQUIRED PARAMETERS:",
                        "  -examid      Examination ID (Example: \"EX123\")",
                        "  -name        Patient name as \"LastName, FirstName\"",
                        "  -birthdate   Birth date in format YYYY-MM-DD",
                        "  -gender      Gender: M, F, D or X",
                        "",
                        "OPTIONAL PARAMETERS:",
                        "  -comment     Additional comment or note",
                        "  -timeout     Display time in seconds (1-300, default: 10)",
                        "  -x, -y       Window position (X, Y coordinates)",
                        "  -log         Enable error logging (v1.2.3)",
                        "",
                        "EXAMPLES:",
                        "  qrb.exe -examid \"EX001\" -name \"Smith, John\" -birthdate \"1970-01-01\" -gender \"M\"",
                        "  qrb.exe -examid \"EX002\" -name \"Johnson, Mary\" -birthdate \"1985-03-15\" -gender \"F\" -comment \"Chest X-Ray\"",
                        "",
                        "═══════════════════════════════════════════════════════════",
                        $"QRBridge v{VERSION} • Optimized for Ricoh G900 II Camera",
                        "© 2025 Claude's Improbably Reliable Software Solutions"
                    },
                    
                    // French (2)
                    new[] {
                        $"QRBridge v{VERSION} - Affichage de Code QR Médical",
                        "═══════════════════════════════════════════════════════════",
                        "",
                        "UTILISATION:",
                        "qrb.exe -examid \"ID\" -name \"Nom\" -birthdate \"YYYY-MM-DD\" -gender \"M/F/D/X\"",
                        "",
                        "PARAMÈTRES REQUIS:",
                        "  -examid      ID d'examen (Exemple: \"EX123\")",
                        "  -name        Nom du patient comme \"NomDeFamille, Prénom\"",
                        "  -birthdate   Date de naissance au format YYYY-MM-DD",
                        "  -gender      Genre: M, F, D ou X",
                        "",
                        "PARAMÈTRES OPTIONNELS:",
                        "  -comment     Commentaire ou note supplémentaire",
                        "  -timeout     Temps d'affichage en secondes (1-300, défaut: 10)",
                        "  -x, -y       Position de la fenêtre (coordonnées X, Y)",
                        "  -log         Activer la journalisation des erreurs (v1.2.3)",
                        "",
                        "EXEMPLES:",
                        "  qrb.exe -examid \"EX001\" -name \"Dupont, Pierre\" -birthdate \"1970-01-01\" -gender \"M\"",
                        "  qrb.exe -examid \"EX002\" -name \"Martin, Marie\" -birthdate \"1985-03-15\" -gender \"F\" -comment \"Radiographie thoracique\"",
                        "",
                        "═══════════════════════════════════════════════════════════",
                        $"QRBridge v{VERSION} • Optimisé pour Caméra Ricoh G900 II",
                        "© 2025 Claude's Improbably Reliable Software Solutions"
                    },
                    
                    // Spanish (3)
                    new[] {
                        $"QRBridge v{VERSION} - Visualización de Código QR Médico",
                        "═══════════════════════════════════════════════════════════",
                        "",
                        "USO:",
                        "qrb.exe -examid \"ID\" -name \"Nombre\" -birthdate \"YYYY-MM-DD\" -gender \"M/F/D/X\"",
                        "",
                        "PARÁMETROS REQUERIDOS:",
                        "  -examid      ID de examen (Ejemplo: \"EX123\")",
                        "  -name        Nombre del paciente como \"Apellido, Nombre\"",
                        "  -birthdate   Fecha de nacimiento en formato YYYY-MM-DD",
                        "  -gender      Género: M, F, D o X",
                        "",
                        "PARÁMETROS OPCIONALES:",
                        "  -comment     Comentario o nota adicional",
                        "  -timeout     Tiempo de visualización en segundos (1-300, predeterminado: 10)",
                        "  -x, -y       Posición de la ventana (coordenadas X, Y)",
                        "  -log         Habilitar registro de errores (v1.2.3)",
                        "",
                        "EJEMPLOS:",
                        "  qrb.exe -examid \"EX001\" -name \"García, Juan\" -birthdate \"1970-01-01\" -gender \"M\"",
                        "  qrb.exe -examid \"EX002\" -name \"López, María\" -birthdate \"1985-03-15\" -gender \"F\" -comment \"Radiografía de tórax\"",
                        "",
                        "═══════════════════════════════════════════════════════════",
                        $"QRBridge v{VERSION} • Optimizado para Cámara Ricoh G900 II",
                        "© 2025 Claude's Improbably Reliable Software Solutions"
                    }
                };

                return string.Join("\n", content[Math.Min(languageIndex, content.Length - 1)]);
            }
        }
    }
}

===== FILE: PatientData.cs =====
using System;
using System.Globalization;
using System.Text.RegularExpressions;

namespace QRBridge
{
    /// <summary>
    /// Patient data model with built-in validation and command line parsing.
    /// Version 1.2.5: No changes, just renamed executable.
    /// </summary>
    public class PatientData
    {
        #region Properties

        /// <summary>Examination ID (required)</summary>
        public string ExamId { get; set; }

        /// <summary>Patient name in format "LastName, FirstName" (required)</summary>
        public string Name { get; set; }

        /// <summary>Patient birth date (required)</summary>
        public DateTime BirthDate { get; set; }

        /// <summary>Patient gender code: M, F, D, or X (required)</summary>
        public string Gender { get; set; }

        /// <summary>Optional comment or additional information</summary>
        public string Comment { get; set; }

        // v1.2.4: Use configurable default timeout
        private int _timeout = -1;
        /// <summary>Display timeout in seconds (1-300, default: configurable)</summary>
        public int Timeout
        {
            get => _timeout < 0 ? Constants.DEFAULT_TIMEOUT : _timeout;
            set => _timeout = value;
        }

        /// <summary>Optional window X position</summary>
        public int? WindowX { get; set; }

        /// <summary>Optional window Y position</summary>
        public int? WindowY { get; set; }

        #endregion

        #region Parsing

        /// <summary>
        /// Parse command line arguments into PatientData object.
        /// Handles quoted arguments properly through preprocessing.
        /// v1.2.4: Also reads default window positions from config if not specified.
        /// </summary>
        /// <param name="args">Command line arguments (already preprocessed for quotes)</param>
        /// <returns>Parsed patient data</returns>
        /// <exception cref="ArgumentException">Thrown when parsing fails</exception>
        public static PatientData Parse(string[] args)
        {
            if (args?.Length == 0)
                throw new ArgumentException("No arguments provided");

            var data = new PatientData();
            var foundParameters = new System.Collections.Generic.HashSet<string>();

            for (int i = 0; i < args.Length; i++)
            {
                string arg = args[i].ToLower();

                if (i + 1 >= args.Length)
                    throw new ArgumentException($"Missing value for parameter: {args[i]}");

                string value = args[i + 1];

                switch (arg)
                {
                    case "-examid":
                        data.ExamId = value;
                        foundParameters.Add("examid");
                        i++;
                        break;

                    case "-name":
                        data.Name = value;
                        foundParameters.Add("name");
                        i++;
                        break;

                    case "-birthdate":
                        if (!DateTime.TryParseExact(value, Constants.QR_DATE_FORMAT,
                            CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime birthDate))
                        {
                            throw new ArgumentException(
                                $"Invalid birthdate format: {value}. Expected format: {Constants.QR_DATE_FORMAT}");
                        }
                        data.BirthDate = birthDate;
                        foundParameters.Add("birthdate");
                        i++;
                        break;

                    case "-gender":
                        data.Gender = value.ToUpper();
                        foundParameters.Add("gender");
                        i++;
                        break;

                    case "-comment":
                        data.Comment = value;
                        i++;
                        break;

                    case "-timeout":
                        if (!int.TryParse(value, out int timeout))
                            throw new ArgumentException($"Invalid timeout value: {value}. Must be a number.");
                        data.Timeout = timeout;
                        i++;
                        break;

                    case "-x":
                        if (!int.TryParse(value, out int x))
                            throw new ArgumentException($"Invalid X coordinate: {value}. Must be a number.");
                        data.WindowX = x;
                        i++;
                        break;

                    case "-y":
                        if (!int.TryParse(value, out int y))
                            throw new ArgumentException($"Invalid Y coordinate: {value}. Must be a number.");
                        data.WindowY = y;
                        i++;
                        break;

                    default:
                        throw new ArgumentException($"Unknown parameter: {args[i]}");
                }
            }

            var requiredParams = new[] { "examid", "name", "birthdate", "gender" };
            foreach (var param in requiredParams)
            {
                if (!foundParameters.Contains(param))
                    throw new ArgumentException($"Missing required parameter: -{param}");
            }

            // v1.2.4: Apply default window positions from config if not specified
            if (!data.WindowX.HasValue && !data.WindowY.HasValue)
            {
                int defaultX = SimpleConfig.Get("Display.DefaultX", -1);
                int defaultY = SimpleConfig.Get("Display.DefaultY", -1);

                if (defaultX >= 0 && defaultY >= 0)
                {
                    data.WindowX = defaultX;
                    data.WindowY = defaultY;
                }
            }

            return data;
        }

        #endregion

        #region Input Sanitization

        /// <summary>
        /// Sanitize and normalize input data.
        /// Removes extra whitespace and normalizes formats.
        /// </summary>
        public void SanitizeInput()
        {
            // Trim all string fields
            ExamId = ExamId?.Trim();
            Name = Name?.Trim();
            Gender = Gender?.Trim().ToUpper();
            Comment = Comment?.Trim();

            // Remove multiple spaces in name
            if (!string.IsNullOrEmpty(Name))
            {
                Name = Regex.Replace(Name, @"\s+", " ");

                // Normalize comma spacing in name
                if (Name.Contains(","))
                {
                    var parts = Name.Split(',');
                    if (parts.Length == 2)
                    {
                        Name = $"{parts[0].Trim()}, {parts[1].Trim()}";
                    }
                }
            }

            // Remove multiple spaces in comment
            if (!string.IsNullOrEmpty(Comment))
            {
                Comment = Regex.Replace(Comment, @"\s+", " ");
            }
        }

        #endregion

        #region Validation

        /// <summary>
        /// Validate patient data for completeness and correctness.
        /// Returns validation result with specific error message if invalid.
        /// </summary>
        /// <returns>Tuple of (isValid, errorMessage)</returns>
        public (bool isValid, string errorMessage) Validate()
        {
            var detailedResult = ValidateDetailed();
            return (detailedResult.IsValid, detailedResult.ErrorMessage);
        }

        /// <summary>
        /// Detailed validation with field-specific error information.
        /// </summary>
        /// <returns>Validation result with field information</returns>
        public (bool IsValid, string ErrorMessage, string FieldName) ValidateDetailed()
        {
            // Check required fields
            if (string.IsNullOrWhiteSpace(ExamId))
                return (false, ValidationMessages.GetMessage("ExamIdRequired"), "examid");

            if (string.IsNullOrWhiteSpace(Name))
                return (false, ValidationMessages.GetMessage("NameRequired"), "name");

            if (BirthDate == default(DateTime))
                return (false, ValidationMessages.GetMessage("BirthDateRequired"), "birthdate");

            if (string.IsNullOrWhiteSpace(Gender))
                return (false, ValidationMessages.GetMessage("GenderRequired"), "gender");

            // Validate ExamId format
            if (!IsValidExamId(ExamId))
                return (false, ValidationMessages.GetMessage("InvalidExamId"), "examid");

            // Validate Name format and length
            if (Name.Length < Constants.MIN_NAME_LENGTH)
                return (false, ValidationMessages.GetMessage("NameTooShort"), "name");

            if (Name.Length > Constants.MAX_NAME_LENGTH)
                return (false, ValidationMessages.GetMessage("NameTooLong"), "name");

            if (!IsValidName(Name))
                return (false, ValidationMessages.GetMessage("InvalidName"), "name");

            // Validate Gender
            if (!Constants.VALID_GENDERS.Contains(Gender.ToUpper()))
                return (false, ValidationMessages.GetMessage("InvalidGender", Gender), "gender");

            // Validate Timeout
            if (Timeout < Constants.MIN_TIMEOUT || Timeout > Constants.MAX_TIMEOUT)
                return (false, ValidationMessages.GetMessage("TimeoutInvalid"), "timeout");

            // Validate Birth Date
            if (BirthDate.Year < Constants.MIN_BIRTH_YEAR)
                return (false, ValidationMessages.GetMessage("DateTooOld"), "birthdate");

            if (BirthDate.Date > DateTime.Today)
                return (false, ValidationMessages.GetMessage("DateInFuture"), "birthdate");

            // Validate Comment (v1.2.4: Use configurable max length)
            if (!string.IsNullOrWhiteSpace(Comment))
            {
                if (Comment.Length > Constants.MAX_COMMENT_LENGTH)
                    return (false, ValidationMessages.GetMessage("CommentTooLong"), "comment");

                if (!IsValidComment(Comment))
                    return (false, ValidationMessages.GetMessage("CommentInvalidChars"), "comment");
            }

            // Validate QR data size
            string qrData = ToQRString();
            int byteCount = System.Text.Encoding.UTF8.GetByteCount(qrData);

            if (byteCount > Constants.QR_MAX_BYTES)
                return (false, ValidationMessages.GetMessage("QRDataTooLarge", byteCount.ToString()), "data");

            return (true, null, null);
        }

        /// <summary>
        /// Validate examination ID format.
        /// </summary>
        private bool IsValidExamId(string examId)
        {
            return !string.IsNullOrWhiteSpace(examId) &&
                   Regex.IsMatch(examId, @"^[a-zA-Z0-9\-_]+$");
        }

        /// <summary>
        /// Validate patient name format.
        /// Extended for international character support.
        /// </summary>
        private bool IsValidName(string name)
        {
            if (string.IsNullOrWhiteSpace(name))
                return false;

            // Extended regex for international characters
            return Regex.IsMatch(name, @"^[a-zA-ZäöüÄÖÜßàáâãèéêëìíîïòóôõùúûýÿñÑ\s\-'.,]+$") &&
                   name.Trim().Length >= Constants.MIN_NAME_LENGTH &&
                   name.Trim().Length <= Constants.MAX_NAME_LENGTH;
        }

        /// <summary>
        /// Validate comment for problematic characters.
        /// </summary>
        private bool IsValidComment(string comment)
        {
            if (string.IsNullOrEmpty(comment))
                return true;

            // Check for pipe character (field delimiter)
            if (comment.Contains("|"))
                return false;

            // Check for control characters
            if (Regex.IsMatch(comment, @"[\x00-\x1F\x7F]"))
                return false;

            return true;
        }

        #endregion

        #region QR String Generation

        /// <summary>
        /// Convert patient data to QR code string format.
        /// Format: ExamId|Name|BirthDate|Gender|Comment
        /// v1.2.2: Optimized with StringBuilder for better memory efficiency.
        /// </summary>
        /// <returns>Formatted string for QR code generation</returns>
        public string ToQRString()
        {
            // Pre-size StringBuilder to QR_MAX_BYTES for efficiency
            var sb = new System.Text.StringBuilder(Constants.QR_MAX_BYTES);

            sb.Append(ExamId ?? "");
            sb.Append(Constants.QR_FIELD_DELIMITER);
            sb.Append(Name ?? "");
            sb.Append(Constants.QR_FIELD_DELIMITER);
            sb.Append(BirthDate.ToString(Constants.QR_DATE_FORMAT));
            sb.Append(Constants.QR_FIELD_DELIMITER);
            sb.Append(Gender ?? "");
            sb.Append(Constants.QR_FIELD_DELIMITER);
            sb.Append(Comment ?? "");

            return sb.ToString();
        }

        #endregion
    }
}

===== FILE: QRGenerator.cs =====
using System;
using System.Drawing;
using QRCoder;

namespace QRBridge
{
    /// <summary>
    /// Simple QR code generator optimized for Ricoh G900 II camera compatibility.
    /// Version 1.2.5: No changes, just renamed executable.
    /// </summary>
    public static class QRGenerator
    {
        #region QR Code Generation

        /// <summary>
        /// Generate QR code bitmap from patient data.
        /// CRITICAL: Settings optimized for Ricoh G900 II camera scanning.
        /// DO NOT MODIFY without extensive camera testing!
        /// v1.2.2: Explicit resource management with try-finally pattern.
        /// </summary>
        /// <param name="patientData">Patient data to encode</param>
        /// <returns>QR code bitmap ready for display</returns>
        /// <exception cref="ArgumentNullException">Thrown when patientData is null</exception>
        /// <exception cref="Exception">Thrown when QR generation fails</exception>
        public static Bitmap Generate(PatientData patientData)
        {
            _ = patientData ?? throw new ArgumentNullException(nameof(patientData));

            QRCodeGenerator qrGenerator = null;
            QRCodeData qrCodeData = null;
            QRCode qrCode = null;

            try
            {
                string qrData = patientData.ToQRString();

                // CRITICAL CAMERA COMPATIBILITY SETTINGS - DO NOT CHANGE!
                // These settings were specifically tested with Ricoh G900 II
                // Version 1.0.1 fix: Removed UTF-8 forcing that confused camera
                qrGenerator = new QRCodeGenerator();
                qrCodeData = qrGenerator.CreateQrCode(
                    qrData,
                    QRCodeGenerator.ECCLevel.M  // Medium error correction
                );

                qrCode = new QRCode(qrCodeData);

                // Return the bitmap - caller is responsible for disposal
                return qrCode.GetGraphic(
                    pixelsPerModule: Constants.QR_PIXELS_PER_MODULE,
                    darkColor: Color.Black,
                    lightColor: Color.White,
                    drawQuietZones: true  // Quiet zones essential for scanning
                );
            }
            catch (Exception ex)
            {
                // v1.2.3: Log error without patient data
                SimpleLogger.LogError("QRGeneration", ex);
                throw new Exception($"Failed to generate QR code: {ex.Message}", ex);
            }
            finally
            {
                // v1.2.2: Explicit cleanup
                qrCode?.Dispose();
                qrCodeData?.Dispose();
                qrGenerator?.Dispose();
            }
        }

        /// <summary>
        /// Generate error QR code for display when main generation fails.
        /// Shows simple error message that can still be scanned.
        /// v1.2.2: Explicit resource management.
        /// </summary>
        /// <param name="errorText">Error text to encode</param>
        /// <returns>Error QR code bitmap</returns>
        public static Bitmap GenerateError(string errorText)
        {
            QRCodeGenerator qrGenerator = null;
            QRCodeData qrCodeData = null;
            QRCode qrCode = null;

            try
            {
                qrGenerator = new QRCodeGenerator();
                qrCodeData = qrGenerator.CreateQrCode(
                    errorText ?? "ERROR",
                    QRCodeGenerator.ECCLevel.M
                );

                qrCode = new QRCode(qrCodeData);

                return qrCode.GetGraphic(
                    pixelsPerModule: Constants.QR_PIXELS_PER_MODULE,
                    darkColor: Color.Black,
                    lightColor: Color.White,
                    drawQuietZones: true
                );
            }
            catch (Exception ex)
            {
                // v1.2.3: Log error QR generation failure
                SimpleLogger.LogError("ErrorQRGeneration", ex);
                return CreateErrorBitmap();
            }
            finally
            {
                // v1.2.2: Explicit cleanup
                qrCode?.Dispose();
                qrCodeData?.Dispose();
                qrGenerator?.Dispose();
            }
        }

        #endregion

        #region Validation

        /// <summary>
        /// Validate generated QR code meets requirements.
        /// Ensures QR code is properly sized and formatted.
        /// </summary>
        /// <param name="qrBitmap">QR code bitmap to validate</param>
        /// <returns>True if valid; otherwise false</returns>
        public static bool ValidateQRCode(Bitmap qrBitmap)
        {
            bool isValid = qrBitmap != null &&
                          qrBitmap.Width >= 100 && qrBitmap.Height >= 100 &&
                          qrBitmap.Width <= 1000 && qrBitmap.Height <= 1000 &&
                          qrBitmap.Width == qrBitmap.Height;

            if (!isValid)
            {
                // v1.2.3: Log validation failure
                SimpleLogger.LogError("QRValidation",
                    new Exception($"Invalid QR dimensions: {qrBitmap?.Width}x{qrBitmap?.Height}"));
            }

            return isValid;
        }

        #endregion

        #region Display Helpers

        /// <summary>
        /// Get formatted data preview for UI display.
        /// Shows QR content in readable format with size information.
        /// </summary>
        /// <param name="patientData">Patient data to preview</param>
        /// <returns>Formatted preview string</returns>
        public static string GetDataPreview(PatientData patientData)
        {
            if (patientData == null)
                return "No data available";

            try
            {
                string qrData = patientData.ToQRString();
                int byteCount = System.Text.Encoding.UTF8.GetByteCount(qrData);

                return $"QR-Code Inhalt ({byteCount}/{Constants.QR_MAX_BYTES} Bytes):\n\n{qrData}";
            }
            catch (Exception ex)
            {
                SimpleLogger.LogError("DataPreview", ex);
                return $"Preview error: {ex.Message}";
            }
        }

        #endregion

        #region Error Handling

        /// <summary>
        /// Create simple error bitmap when QR generation completely fails.
        /// Last resort fallback for critical errors.
        /// </summary>
        /// <returns>Basic error bitmap</returns>
        private static Bitmap CreateErrorBitmap()
        {
            try
            {
                var bitmap = new Bitmap(Constants.ERROR_BITMAP_SIZE, Constants.ERROR_BITMAP_SIZE);
                using (var g = Graphics.FromImage(bitmap))
                {
                    g.Clear(Color.White);
                    g.DrawString("ERROR", new Font("Arial", 20), Brushes.Red, 50, 85);
                    g.DrawRectangle(Pens.Red, 0, 0,
                        Constants.ERROR_BITMAP_SIZE - 1,
                        Constants.ERROR_BITMAP_SIZE - 1);
                }
                return bitmap;
            }
            catch (Exception ex)
            {
                SimpleLogger.LogError("ErrorBitmapCreation", ex);
                return new Bitmap(1, 1);
            }
        }

        #endregion
    }
}

===== FILE: SimpleLogger.cs =====
using System;
using System.IO;
using System.Text;

namespace QRBridge
{
    /// <summary>
    /// Simple HIPAA-compliant error logger for production diagnostics.
    /// Version 1.2.5: No changes, just renamed executable.
    /// </summary>
    public static class SimpleLogger
    {
        #region Private Fields

        private static bool _enabled = false;
        private static readonly object _lockObject = new object();
        private static string _logFileName;
        private static string _backupLogFileName;
        private const int MaxLogSize = 1048576; // 1MB

        #endregion

        #region Properties

        // v1.2.4: Configurable log filename
        private static string LogFileName
        {
            get
            {
                if (_logFileName == null)
                {
                    string configName = SimpleConfig.Get("Logging.LogFileName", "QRBridge_errors.log");
                    // Ensure .log extension and remove any path components
                    configName = Path.GetFileName(configName);
                    if (!configName.EndsWith(".log", StringComparison.OrdinalIgnoreCase))
                        configName += ".log";
                    _logFileName = configName;
                }
                return _logFileName;
            }
        }

        private static string BackupLogFileName
        {
            get
            {
                if (_backupLogFileName == null)
                {
                    string baseName = Path.GetFileNameWithoutExtension(LogFileName);
                    _backupLogFileName = $"{baseName}.old.log";
                }
                return _backupLogFileName;
            }
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Enable error logging.
        /// </summary>
        public static void Enable()
        {
            _enabled = true;
            LogInfo("Logging", "Error logging enabled");
        }

        /// <summary>
        /// Log an error with context. HIPAA compliant - no patient data.
        /// </summary>
        /// <param name="context">Context where error occurred</param>
        /// <param name="ex">Exception to log</param>
        public static void LogError(string context, Exception ex)
        {
            if (!_enabled || ex == null) return;

            try
            {
                string message = SanitizeExceptionMessage(ex);
                WriteLog("ERROR", context, $"{ex.GetType().Name}: {message}");
            }
            catch
            {
                // Logging should never throw
            }
        }

        /// <summary>
        /// Log a validation error without exposing field values.
        /// </summary>
        /// <param name="fieldName">Field that failed validation</param>
        /// <param name="validationType">Type of validation that failed</param>
        public static void LogValidationError(string fieldName, string validationType)
        {
            if (!_enabled) return;

            try
            {
                WriteLog("ERROR", "Validation",
                    $"Field validation failed - Type: {fieldName}, Reason: {validationType}");
            }
            catch
            {
                // Logging should never throw
            }
        }

        /// <summary>
        /// Log informational message (startup, shutdown, etc).
        /// </summary>
        /// <param name="context">Context of the information</param>
        /// <param name="message">Informational message</param>
        public static void LogInfo(string context, string message)
        {
            if (!_enabled) return;

            try
            {
                WriteLog("INFO", context, message);
            }
            catch
            {
                // Logging should never throw
            }
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Write log entry with automatic rotation.
        /// </summary>
        private static void WriteLog(string level, string context, string message)
        {
            lock (_lockObject)
            {
                try
                {
                    string logPath = GetLogFilePath();

                    // Check for rotation
                    if (File.Exists(logPath))
                    {
                        var fileInfo = new FileInfo(logPath);
                        if (fileInfo.Length >= MaxLogSize)
                        {
                            RotateLog(logPath);
                        }
                    }

                    // Write log entry
                    string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                    string logEntry = $"{timestamp} [{level}] {context}: {message}{Environment.NewLine}";

                    File.AppendAllText(logPath, logEntry, Encoding.UTF8);
                }
                catch
                {
                    // Logging should never throw
                }
            }
        }

        /// <summary>
        /// Rotate log file when size limit reached.
        /// </summary>
        private static void RotateLog(string currentLogPath)
        {
            try
            {
                string backupPath = Path.Combine(
                    Path.GetDirectoryName(currentLogPath),
                    BackupLogFileName);

                // Delete old backup if exists
                if (File.Exists(backupPath))
                {
                    File.Delete(backupPath);
                }

                // Move current to backup
                File.Move(currentLogPath, backupPath);
            }
            catch
            {
                // If rotation fails, try to delete current log
                try { File.Delete(currentLogPath); }
                catch { }
            }
        }

        /// <summary>
        /// Get log file path in application directory.
        /// </summary>
        private static string GetLogFilePath()
        {
            string appDir = Path.GetDirectoryName(
                System.Reflection.Assembly.GetExecutingAssembly().Location);
            return Path.Combine(appDir, LogFileName);
        }

        /// <summary>
        /// Sanitize exception message to remove any potential patient data.
        /// </summary>
        private static string SanitizeExceptionMessage(Exception ex)
        {
            if (string.IsNullOrEmpty(ex.Message))
                return "No message";

            // Remove potential patient data patterns
            string message = ex.Message;

            // Remove anything that looks like a date (YYYY-MM-DD or DD.MM.YYYY)
            message = System.Text.RegularExpressions.Regex.Replace(
                message, @"\d{4}-\d{2}-\d{2}|\d{2}\.\d{2}\.\d{4}", "[DATE]");

            // Remove anything in quotes (might be patient names or IDs)
            message = System.Text.RegularExpressions.Regex.Replace(
                message, @"""[^""]+""", "[REDACTED]");

            // Truncate if too long
            if (message.Length > 200)
                message = message.Substring(0, 197) + "...";

            return message;
        }

        #endregion
    }
}

===== FILE: Properties\AssemblyInfo.cs =====
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("QRBridge")]
[assembly: AssemblyDescription("Medical QR Code Display Application for Ricoh G900 II Integration - v1.2.5 Rename Edition")]
[assembly: AssemblyConfiguration("Release")]
[assembly: AssemblyCompany("Claude's Improbably Reliable Software Solutions")]
[assembly: AssemblyProduct("QRBridge")]
[assembly: AssemblyCopyright("Copyright © 2025 Claude's Improbably Reliable Software Solutions")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("5cc90bd9-71de-400e-9288-098092b4a156")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]

// VERSION 1.2.5 - Rename Edition
[assembly: AssemblyVersion("1.2.5.0")]
[assembly: AssemblyFileVersion("1.2.5.0")]

// Additional assembly attributes for v1.2.5
[assembly: AssemblyInformationalVersion("1.2.5 Rename Edition")]
[assembly: AssemblyMetadata("BuildDate", "2025-05-31")]
[assembly: AssemblyMetadata("TargetEnvironment", "Medical")]
[assembly: AssemblyMetadata("Compliance", "HIPAA")]
[assembly: AssemblyMetadata("ReleaseType", "Stable")]

// v1.2.5 Achievements
[assembly: AssemblyMetadata("ExecutableRename", "Changed from qbc.exe to qrb.exe")]
[assembly: AssemblyMetadata("ConsistentNaming", "Executable now matches product name")]
[assembly: AssemblyMetadata("DocumentationUpdated", "All references updated throughout")]
[assembly: AssemblyMetadata("BackwardCompatible", "100% functional compatibility maintained")]

// v1.2.4 Achievements (Maintained)
[assembly: AssemblyMetadata("SimpleConfiguration", "INI-based config in under 100 lines")]
[assembly: AssemblyMetadata("ITFriendly", "Customize defaults without code changes")]
[assembly: AssemblyMetadata("ConfigurableDefaults", "Timeout, position, language, logging")]
[assembly: AssemblyMetadata("CommandLinePriority", "CLI always overrides configuration")]
[assembly: AssemblyMetadata("SafeDefaults", "Invalid config falls back gracefully")]
[assembly: AssemblyMetadata("NoSensitiveData", "Config never stores patient data")]

// v1.2.3 Achievements (Maintained)
[assembly: AssemblyMetadata("ErrorLogging", "HIPAA-compliant production diagnostics")]
[assembly: AssemblyMetadata("LogRotation", "Automatic 1MB rotation prevents disk issues")]
[assembly: AssemblyMetadata("PrivacyFirst", "Zero patient data in logs")]
[assembly: AssemblyMetadata("OptIn", "Logging only with -log flag")]
[assembly: AssemblyMetadata("SimpleLogger", "95 lines of focused logging code")]
[assembly: AssemblyMetadata("ZeroOverhead", "No performance impact without flag")]

// v1.2.2 Achievements (Maintained)
[assembly: AssemblyMetadata("FontCaching", "Centralized font management in Constants")]
[assembly: AssemblyMetadata("DisposalPattern", "Proper IDisposable implementation")]
[assembly: AssemblyMetadata("ResourceCleanup", "Explicit resource management throughout")]
[assembly: AssemblyMetadata("MemoryOptimized", "StringBuilder for string operations")]
[assembly: AssemblyMetadata("NoLeaks", "Zero GDI handle or memory leaks")]
[assembly: AssemblyMetadata("MedicalGrade", "Force GC for critical environments")]

// v1.2.1 Achievements (Maintained)
[assembly: AssemblyMetadata("EnhancedValidation", "Field-specific error reporting")]
[assembly: AssemblyMetadata("InputSanitization", "Automatic whitespace and format normalization")]
[assembly: AssemblyMetadata("ValidationMessages", "Centralized multi-language error messages")]
[assembly: AssemblyMetadata("EdgeCaseHandling", "Robust validation for international names")]
[assembly: AssemblyMetadata("UserExperience", "Clear, helpful error messages")]

// v1.2.0 Phase 1 Achievements (Maintained)
[assembly: AssemblyMetadata("ModernSyntax", "Clean code with C# 7.3 compatibility")]
[assembly: AssemblyMetadata("StringInterpolation", "100% converted from concatenation")]
[assembly: AssemblyMetadata("ComboBoxSimplified", "42 lines removed, no custom drawing")]
[assembly: AssemblyMetadata("MagicNumbersEliminated", "All hardcoded values in Constants")]
[assembly: AssemblyMetadata("CodeReduction", "~920 lines from 970")]
[assembly: AssemblyMetadata("LargestFile", "QRDisplayForm at 425 lines")]
[assembly: AssemblyMetadata("LanguageVersion", "C# 7.3 compatible with .NET Framework 4.8")]

// v1.1.4 Achievements (Maintained)
[assembly: AssemblyMetadata("QRDisplayFixed", "Proper quiet zones maintained")]
[assembly: AssemblyMetadata("ScannerCompat", "Ricoh G900 II perfect compatibility")]
[assembly: AssemblyMetadata("VBSFieldNames", "Clear integration documentation")]

// v1.1.3 Achievements (Maintained)
[assembly: AssemblyMetadata("UIPolish", "Professional medical UI maintained")]
[assembly: AssemblyMetadata("DarkTheme", "Consistent modern appearance")]

// v1.1.2 Achievements (Maintained)
[assembly: AssemblyMetadata("MultiLanguage", "4 languages fully functional")]
[assembly: AssemblyMetadata("ResourceManagement", "Proper disposal patterns")]

// v1.1.1 Achievements (Maintained)
[assembly: AssemblyMetadata("Architecture", "Clean 8-file structure maintained")]
[assembly: AssemblyMetadata("KISS", "Simplicity preserved through refactoring")]

// Claude's Improbably Reliable Software Solutions
[assembly: AssemblyMetadata("Philosophy", "Make it work, make it right, make it beautiful, make it configurable!")]
[assembly: AssemblyMetadata("Motto", "Making the improbable reliably possible since 2025")]
[assembly: AssemblyMetadata("RefactoringTime", "v1.2.5 rename completed in 30 minutes")]

===== FILE: Properties\Settings.settings =====
<?xml version='1.0' encoding='utf-8'?>
<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>

===== FILE: app.manifest =====
<?xml version="1.0" encoding="utf-8"?>
<assembly manifestVersion="1.0" xmlns="urn:schemas-microsoft-com:asm.v1">
	<assemblyIdentity version="1.0.0.0" name="QRBridge.app"/>
	<trustInfo xmlns="urn:schemas-microsoft-com:asm.v2">
		<security>
			<requestedPrivileges xmlns="urn:schemas-microsoft-com:asm.v3">
				<!-- Request standard user privileges only -->
				<requestedExecutionLevel level="asInvoker" uiAccess="false" />
			</requestedPrivileges>
		</security>
	</trustInfo>
	<compatibility xmlns="urn:schemas-microsoft-com:compatibility.v1">
		<application>
			<!-- Windows 10/11 compatibility -->
			<supportedOS Id="{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}" />
			<!-- Windows 8.1 -->
			<supportedOS Id="{1f676c76-80e1-4239-95bb-83d0f6d0da78}" />
			<!-- Windows 8 -->
			<supportedOS Id="{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}" />
			<!-- Windows 7 -->
			<supportedOS Id="{35138b9a-5d96-4fbd-8e2d-a2440225f93a}" />
		</application>
	</compatibility>
	<application xmlns="urn:schemas-microsoft-com:asm.v3">
		<windowsSettings>
			<!-- Enable DPI awareness -->
			<dpiAware xmlns="http://schemas.microsoft.com/SMI/2005/WindowsSettings">true</dpiAware>
			<dpiAwareness xmlns="http://schemas.microsoft.com/SMI/2016/WindowsSettings">PerMonitorV2</dpiAwareness>
		</windowsSettings>
	</application>
</assembly>

