// src\CamBridge.Config\ViewModels\LogViewerViewModel.cs
// Version: 0.8.7
// Description: Enhanced log viewer with FIXED correlation ID parsing
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using CamBridge.Config.Services;
using CamBridge.Core;
using CamBridge.Core.Infrastructure;
using CamBridge.Core.Logging;
using CamBridge.Core.Enums;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Microsoft.Extensions.Logging;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Media;


namespace CamBridge.Config.ViewModels
{
    /// <summary>
    /// Tracks file position for incremental reading
    /// </summary>
    public class FilePositionInfo
    {
        public long Position { get; set; }
        public DateTime LastRead { get; set; }
    }

    /// <summary>
    /// Represents a selectable pipeline in the multi-select dropdown
    /// </summary>
    public class PipelineSelection : ViewModelBase
    {
        private bool _isSelected;

        public string Name { get; set; } = string.Empty;
        public string SanitizedName { get; set; } = string.Empty;

        public bool IsSelected
        {
            get => _isSelected;
            set => SetProperty(ref _isSelected, value);
        }
    }

    /// <summary>
    /// Enhanced ViewModel for the log viewer with correlation ID support
    /// </summary>
    public partial class LogViewerViewModel : ViewModelBase
    {
        private readonly ILogger<LogViewerViewModel> _logger;
        private readonly IConfigurationService _configurationService;
        private readonly Dictionary<string, string> _pipelineNameMapping;
        private readonly Timer _refreshTimer;
        private readonly Dictionary<string, long> _filePositions;
        private CancellationTokenSource? _watcherCancellation;
        private FileSystemWatcher? _logWatcher;

        // Constants
        private const int MaxDisplayedEntries = 10000;
        private const int TailLineCount = 1000;
        private const int RefreshIntervalMs = 1000;

        public LogViewerViewModel(
            ILogger<LogViewerViewModel> logger,
            IConfigurationService configurationService)
        {
            _logger = logger;
            _configurationService = configurationService;
            _pipelineNameMapping = new Dictionary<string, string>();
            _filePositions = new Dictionary<string, long>();

            // Initialize collections
            LogEntries = new ObservableCollection<LogEntry>();
            FilteredCombinedEntries = new ObservableCollection<LogEntry>();
            CombinedLogEntries = new ObservableCollection<LogEntry>();
            CorrelationGroups = new ObservableCollection<CorrelationGroup>();
            AvailablePipelines = new ObservableCollection<string>();
            PipelineSelections = new ObservableCollection<PipelineSelection>();

            // Initialize commands
            RefreshCommand = new AsyncRelayCommand(RefreshLogsAsync);
            ClearLogCommand = new RelayCommand(ClearLogs);
            ExportLogCommand = new AsyncRelayCommand(ExportLogsAsync);
            ToggleTreeViewCommand = new RelayCommand(() => IsTreeViewEnabled = !IsTreeViewEnabled);
            ExpandAllCommand = new RelayCommand(ExpandAll);
            CollapseAllCommand = new RelayCommand(CollapseAll);

            // Initialize timer for auto-refresh
            _refreshTimer = new Timer(OnRefreshTimer, null, Timeout.Infinite, Timeout.Infinite);

            // Set default filter values
            ShowDebug = false;  // Debug meist zu viel
            ShowInformation = true;
            ShowWarning = true;
            ShowError = true;
            ShowCritical = true;
            IsAutoScrollEnabled = false; // Default OFF to prevent flicker
            IsTreeViewEnabled = true; // Default to tree view for correlation
        }

        #region Properties

        [ObservableProperty]
        private ObservableCollection<LogEntry> logEntries;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(DisplayedLineCount))]
        private ObservableCollection<LogEntry> filteredCombinedEntries;

        [ObservableProperty]
        private ObservableCollection<LogEntry> combinedLogEntries;

        [ObservableProperty]
        private ObservableCollection<CorrelationGroup> correlationGroups;

        [ObservableProperty]
        private ObservableCollection<string> availablePipelines;

        [ObservableProperty]
        private ObservableCollection<PipelineSelection> pipelineSelections;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FilteredCombinedEntries))]
        [NotifyPropertyChangedFor(nameof(CorrelationGroups))]
        private string? searchText;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FilteredCombinedEntries))]
        [NotifyPropertyChangedFor(nameof(CorrelationGroups))]
        private bool showDebug;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FilteredCombinedEntries))]
        [NotifyPropertyChangedFor(nameof(CorrelationGroups))]
        private bool showInformation;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FilteredCombinedEntries))]
        [NotifyPropertyChangedFor(nameof(CorrelationGroups))]
        private bool showWarning;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FilteredCombinedEntries))]
        [NotifyPropertyChangedFor(nameof(CorrelationGroups))]
        private bool showError;

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FilteredCombinedEntries))]
        [NotifyPropertyChangedFor(nameof(CorrelationGroups))]
        private bool showCritical;

        [ObservableProperty]
        private bool isAutoScrollEnabled;

        [ObservableProperty]
        private bool isTreeViewEnabled;

        [ObservableProperty]
        private bool isLoading;

        [ObservableProperty]
        private string currentLogFile = "No log file loaded";

        [ObservableProperty]
        private string currentLogFiles = "No files selected";

        [ObservableProperty]
        private int totalLineCount;

        [ObservableProperty]
        private DateTime lastUpdateTime = DateTime.Now;

        public int DisplayedLineCount =>
            IsTreeViewEnabled
                ? CorrelationGroups?.Sum(g => g.TotalEntries) ?? 0
                : FilteredCombinedEntries?.Count ?? 0;

        public int SelectedPipelineCount => PipelineSelections?.Count(p => p.IsSelected) ?? 0;

        public int SelectedLevelCount
        {
            get
            {
                var count = 0;
                if (ShowDebug) count++;
                if (ShowInformation) count++;
                if (ShowWarning) count++;
                if (ShowError) count++;
                if (ShowCritical) count++;
                return count;
            }
        }

        #endregion

        #region Commands

        public IAsyncRelayCommand RefreshCommand { get; }
        public IRelayCommand ClearLogCommand { get; }
        public IAsyncRelayCommand ExportLogCommand { get; }
        public IRelayCommand ToggleTreeViewCommand { get; }
        public IRelayCommand ExpandAllCommand { get; }
        public IRelayCommand CollapseAllCommand { get; }

        #endregion

        #region Public Methods

        public async Task InitializeAsync()
        {
            try
            {
                _logger.LogInformation("Initializing Enhanced LogViewerViewModel");

                // Load available pipelines
                await LoadAvailablePipelinesAsync();

                // Update count display
                OnPropertyChanged(nameof(SelectedPipelineCount));
                OnPropertyChanged(nameof(SelectedLevelCount));

                // Log initial filter state
                _logger.LogInformation("Initial filter state: Debug={Debug}, Info={Info}, Warn={Warn}, Error={Error}, Critical={Critical}",
                    ShowDebug, ShowInformation, ShowWarning, ShowError, ShowCritical);

                // Log selected pipelines
                var selected = PipelineSelections.Where(p => p.IsSelected).Select(p => p.Name).ToList();
                _logger.LogInformation("Selected pipelines: {Pipelines}", string.Join(", ", selected));

                // Load initial logs
                await RefreshLogsAsync();

                // Start auto-refresh if enabled
                if (IsAutoScrollEnabled)
                {
                    _refreshTimer.Change(RefreshIntervalMs, RefreshIntervalMs);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to initialize LogViewerViewModel");
            }
        }

        public void Cleanup()
        {
            try
            {
                _refreshTimer?.Change(Timeout.Infinite, Timeout.Infinite);
                _refreshTimer?.Dispose();
                _watcherCancellation?.Cancel();
                _watcherCancellation?.Dispose();
                _logWatcher?.Dispose();

                // Unsubscribe from selection changes
                foreach (var selection in PipelineSelections)
                {
                    selection.PropertyChanged -= OnPipelineSelectionChanged;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error during cleanup");
            }
        }

        #endregion

        private void ApplyFilters()
        {
            // WICHTIG: Muss auf dem UI Thread laufen!
            if (!Application.Current.Dispatcher.CheckAccess())
            {
                Application.Current.Dispatcher.Invoke(() => ApplyFilters());
                return;
            }

            _logger.LogDebug("ApplyFilters: Starting with {Count} combined entries", CombinedLogEntries.Count);

            var filtered = CombinedLogEntries.AsEnumerable();

            // Apply level filters
            var anyLevelSelected = ShowDebug || ShowInformation || ShowWarning || ShowError || ShowCritical;

            if (anyLevelSelected)
            {
                filtered = filtered.Where(e =>
                    (ShowDebug && e.Level == LogLevel.Debug) ||
                    (ShowInformation && e.Level == LogLevel.Information) ||
                    (ShowWarning && e.Level == LogLevel.Warning) ||
                    (ShowError && e.Level == LogLevel.Error) ||
                    (ShowCritical && e.Level == LogLevel.Critical));
            }

            // Apply search filter
            if (!string.IsNullOrWhiteSpace(SearchText))
            {
                var searchLower = SearchText.ToLowerInvariant();
                filtered = filtered.Where(e =>
                    e.Message.ToLowerInvariant().Contains(searchLower) ||
                    e.LevelText.ToLowerInvariant().Contains(searchLower) ||
                    e.Source.ToLowerInvariant().Contains(searchLower) ||
                    (e.CorrelationId?.ToLowerInvariant().Contains(searchLower) ?? false) ||
                    (e.Stage?.ToString().ToLowerInvariant().Contains(searchLower) ?? false));
            }

            // Update filtered collection
            var filteredList = filtered.ToList();
            _logger.LogDebug("After filtering: {Count} entries remain", filteredList.Count);

            FilteredCombinedEntries.Clear();
            foreach (var entry in filteredList)
            {
                FilteredCombinedEntries.Add(entry);
            }

            // Update correlation groups if tree view is enabled
            if (IsTreeViewEnabled)
            {
                UpdateCorrelationGroups(filteredList);
            }
        }

        private void UpdateCorrelationGroups(List<LogEntry> entries)
        {
            CorrelationGroups.Clear();

            // Group by correlation ID
            var groups = entries
                .Where(e => !string.IsNullOrEmpty(e.CorrelationId))
                .GroupBy(e => e.CorrelationId!)
                .OrderByDescending(g => g.Max(e => e.Timestamp));

            foreach (var group in groups)
            {
                var correlationGroup = new CorrelationGroup
                {
                    CorrelationId = group.Key,
                    StartTime = group.Min(e => e.Timestamp),
                    EndTime = group.Max(e => e.Timestamp),
                    Pipeline = group.FirstOrDefault(e => !string.IsNullOrEmpty(e.Pipeline))?.Pipeline ?? "Unknown",
                    IsExpanded = false // Default collapsed
                };

                // Build stage hierarchy
                var stages = new Dictionary<ProcessingStage, StageGroup>();

                foreach (var entry in group.OrderBy(e => e.Timestamp))
                {
                    if (entry.Stage.HasValue)
                    {
                        if (!stages.ContainsKey(entry.Stage.Value))
                        {
                            stages[entry.Stage.Value] = new StageGroup
                            {
                                Stage = entry.Stage.Value,
                                StartTime = entry.Timestamp,
                                IsExpanded = false
                            };
                        }

                        stages[entry.Stage.Value].Entries.Add(entry);
                        stages[entry.Stage.Value].EndTime = entry.Timestamp;
                    }
                    else
                    {
                        // Add entries without stage directly to correlation group
                        correlationGroup.UngroupedEntries.Add(entry);
                    }
                }

                // Add stages to correlation group
                foreach (var stage in stages.Values.OrderBy(s => s.StartTime))
                {
                    correlationGroup.Stages.Add(stage);
                }

                // Determine overall status
                if (stages.ContainsKey(ProcessingStage.Error))
                {
                    correlationGroup.Status = ProcessingStatus.Failed;
                }
                else if (stages.ContainsKey(ProcessingStage.Complete))
                {
                    correlationGroup.Status = ProcessingStatus.Completed;
                }
                else
                {
                    correlationGroup.Status = ProcessingStatus.InProgress;
                }

                CorrelationGroups.Add(correlationGroup);
            }

            // Add entries without correlation ID
            var uncorrelatedEntries = entries.Where(e => string.IsNullOrEmpty(e.CorrelationId)).ToList();
            if (uncorrelatedEntries.Any())
            {
                var uncorrelatedGroup = new CorrelationGroup
                {
                    CorrelationId = "Uncorrelated",
                    StartTime = uncorrelatedEntries.Min(e => e.Timestamp),
                    EndTime = uncorrelatedEntries.Max(e => e.Timestamp),
                    Pipeline = "Various",
                    IsExpanded = false,
                    Status = ProcessingStatus.Unknown
                };

                foreach (var entry in uncorrelatedEntries.OrderBy(e => e.Timestamp))
                {
                    uncorrelatedGroup.UngroupedEntries.Add(entry);
                }

                CorrelationGroups.Add(uncorrelatedGroup);
            }
        }

        private void ExpandAll()
        {
            foreach (var group in CorrelationGroups)
            {
                group.IsExpanded = true;
                foreach (var stage in group.Stages)
                {
                    stage.IsExpanded = true;
                }
            }
        }

        private void CollapseAll()
        {
            foreach (var group in CorrelationGroups)
            {
                group.IsExpanded = false;
                foreach (var stage in group.Stages)
                {
                    stage.IsExpanded = false;
                }
            }
        }

        private async Task LoadAvailablePipelinesAsync()
        {
            try
            {
                AvailablePipelines.Clear();
                PipelineSelections.Clear();
                _pipelineNameMapping.Clear();

                // Always add Service (Global) log
                AvailablePipelines.Add("Service (Global)");
                PipelineSelections.Add(new PipelineSelection
                {
                    Name = "Service (Global)",
                    SanitizedName = "service",
                    IsSelected = true // Default selected
                });

                // Get configured pipelines
                var settings = await _configurationService.LoadConfigurationAsync<CamBridgeSettingsV2>();
                if (settings?.Pipelines != null)
                {
                    foreach (var pipeline in settings.Pipelines)
                    {
                        var displayName = $"{pipeline.Name}";
                        var sanitizedName = SanitizeForFileName(pipeline.Name);

                        AvailablePipelines.Add(displayName);
                        _pipelineNameMapping[displayName] = sanitizedName;

                        PipelineSelections.Add(new PipelineSelection
                        {
                            Name = displayName,
                            SanitizedName = sanitizedName,
                            IsSelected = false
                        });
                    }
                }

                // Also check for existing log files that might not be in config
                var logPath = ConfigurationPaths.GetLogsDirectory();
                if (Directory.Exists(logPath))
                {
                    var pipelineLogFiles = Directory.GetFiles(logPath, "pipeline_*.log")
                        .Select(Path.GetFileNameWithoutExtension)
                        .Where(f => f != null && f.StartsWith("pipeline_"))
                        .Select(f => f!.Substring("pipeline_".Length))
                        .Distinct();

                    foreach (var logName in pipelineLogFiles)
                    {
                        if (!_pipelineNameMapping.Values.Contains(logName))
                        {
                            var displayName = $"{logName} (Archived)";
                            AvailablePipelines.Add(displayName);
                            _pipelineNameMapping[displayName] = logName;

                            PipelineSelections.Add(new PipelineSelection
                            {
                                Name = displayName,
                                SanitizedName = logName,
                                IsSelected = false
                            });
                        }
                    }
                }

                // Listen for selection changes
                foreach (var selection in PipelineSelections)
                {
                    selection.PropertyChanged += OnPipelineSelectionChanged;
                }

                // Update initial count
                OnPropertyChanged(nameof(SelectedPipelineCount));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to load available pipelines");
            }
        }

        private async Task RefreshLogsAsync()
        {
            try
            {
                IsLoading = true;

                // Get selected pipelines
                var selectedPipelines = PipelineSelections.Where(p => p.IsSelected).ToList();
                if (!selectedPipelines.Any())
                {
                    CombinedLogEntries.Clear();
                    CorrelationGroups.Clear();
                    CurrentLogFiles = "No pipelines selected";
                    return;
                }

                // Update current files display
                CurrentLogFiles = string.Join(", ", selectedPipelines.Select(p => p.Name));

                // Collect all log entries from selected pipelines
                var allEntries = new List<LogEntry>();

                foreach (var pipeline in selectedPipelines)
                {
                    var logFileName = GetLogFileName(pipeline.Name);
                    var logPath = Path.Combine(ConfigurationPaths.GetLogsDirectory(), logFileName);

                    if (File.Exists(logPath))
                    {
                        // Read entries from this pipeline
                        var entries = await ReadLogFileAsync(logPath, pipeline.Name);
                        allEntries.AddRange(entries);
                    }
                }

                // Sort all entries by timestamp (millisecond precision)
                var sortedEntries = allEntries
                    .OrderBy(e => e.Timestamp)
                    .TakeLast(MaxDisplayedEntries)
                    .ToList();

                // Update collection efficiently (minimize UI updates)
                await Application.Current.Dispatcher.InvokeAsync(() =>
                {
                    // For auto-scroll, append only new entries to prevent flicker
                    if (IsAutoScrollEnabled && CombinedLogEntries.Count > 0)
                    {
                        // Find the last timestamp we have
                        var lastTimestamp = CombinedLogEntries.Last().Timestamp;

                        // Add only newer entries
                        var newEntries = sortedEntries
                            .Where(e => e.Timestamp > lastTimestamp)
                            .ToList();

                        foreach (var entry in newEntries)
                        {
                            CombinedLogEntries.Add(entry);

                            // Maintain max entries
                            if (CombinedLogEntries.Count > MaxDisplayedEntries)
                                CombinedLogEntries.RemoveAt(0);
                        }
                    }
                    else
                    {
                        // Full refresh when not auto-scrolling
                        CombinedLogEntries.Clear();
                        foreach (var entry in sortedEntries)
                        {
                            CombinedLogEntries.Add(entry);
                        }
                    }
                });

                TotalLineCount = CombinedLogEntries.Count;
                LastUpdateTime = DateTime.Now;
                ApplyFilters();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to refresh logs");
            }
            finally
            {
                IsLoading = false;
            }
        }

        private async Task<List<LogEntry>> ReadLogFileAsync(string logPath, string sourcePipeline)
        {
            var entries = new List<LogEntry>();

            try
            {
                _logger.LogInformation("Reading log file: {Path} for pipeline: {Pipeline}", logPath, sourcePipeline);

                using (var fs = new FileStream(logPath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
                using (var reader = new StreamReader(fs, Encoding.UTF8))
                {
                    string? line;
                    int lineCount = 0;
                    int parsedCount = 0;

                    while ((line = await reader.ReadLineAsync()) != null)
                    {
                        lineCount++;
                        var entry = ParseLogLine(line);
                        if (entry != null)
                        {
                            entry.Source = sourcePipeline; // Tag with source
                            entries.Add(entry);
                            parsedCount++;
                        }
                    }

                    _logger.LogInformation("Read {Lines} lines, parsed {Parsed} entries from {File}",
                        lineCount, parsedCount, Path.GetFileName(logPath));
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to read log file: {LogPath}", logPath);
            }

            return entries;
        }

        private LogEntry? ParseLogLine(string line)
        {
            if (string.IsNullOrWhiteSpace(line))
                return null;

            try
            {
                // First try the ACTUAL format from the logs
                // Example: 23:01:37.000 INF [F23013594-R0010168] ["ExifExtraction"] Extracting EXIF metadata completed
                var actualFormatMatch = Regex.Match(line,
                    @"^(\d{2}:\d{2}:\d{2}\.\d{3})\s+(\w+)\s+\[([^\]]+)\]\s+\[""?([^\]""]+)""?\]\s+(.+)$");

                if (actualFormatMatch.Success)
                {
                    var timeStr = actualFormatMatch.Groups[1].Value;
                    var levelStr = actualFormatMatch.Groups[2].Value;
                    var correlationId = actualFormatMatch.Groups[3].Value;
                    var stageStr = actualFormatMatch.Groups[4].Value;
                    var message = actualFormatMatch.Groups[5].Value;

                    // Parse timestamp (add today's date)
                    var timestamp = DateTime.ParseExact(timeStr, "HH:mm:ss.fff", CultureInfo.InvariantCulture);
                    timestamp = DateTime.Today.Add(timestamp.TimeOfDay);

                    // Parse log level
                    var level = ParseLogLevel(levelStr);

                    // Parse stage
                    ProcessingStage? stage = null;
                    if (Enum.TryParse<ProcessingStage>(stageStr, true, out var parsedStage))
                    {
                        stage = parsedStage;
                    }

                    // Extract pipeline name from message if present
                    string? pipeline = null;
                    var pipelineMatch = Regex.Match(message, @"\[Radiology\]");
                    if (pipelineMatch.Success)
                    {
                        pipeline = "Radiology";
                        message = message.Replace("[Radiology]", "").Trim();
                    }

                    // Extract duration if present
                    int? durationMs = null;
                    var durationMatch = Regex.Match(message, @"\[(\d+)ms\]");
                    if (durationMatch.Success)
                    {
                        durationMs = int.Parse(durationMatch.Groups[1].Value);
                        message = message.Replace(durationMatch.Value, "").Trim();
                    }

                    // Also check for duration in [[Duration]123[ms]] format
                    var durationMatch2 = Regex.Match(message, @"\[\[Duration\](\d+)\[ms\]\]");
                    if (durationMatch2.Success)
                    {
                        durationMs = int.Parse(durationMatch2.Groups[1].Value);
                        message = message.Replace(durationMatch2.Value, "").Trim();
                    }

                    return new LogEntry
                    {
                        Timestamp = timestamp,
                        Level = level,
                        Message = message,
                        RawLine = line,
                        CorrelationId = correlationId,
                        Stage = stage,
                        Pipeline = pipeline,
                        DurationMs = durationMs
                    };
                }

                // Try simpler correlation format without stage
                // Example: 23:01:37.000 DBG Found barcode data in Barcode field
                var simpleCorrelationMatch = Regex.Match(line,
                    @"^(\d{2}:\d{2}:\d{2}\.\d{3})\s+(\w+)\s+\[([^\]]+)\]\s+(.+)$");

                if (simpleCorrelationMatch.Success)
                {
                    var timeStr = simpleCorrelationMatch.Groups[1].Value;
                    var levelStr = simpleCorrelationMatch.Groups[2].Value;
                    var correlationIdOrMessage = simpleCorrelationMatch.Groups[3].Value;
                    var remainingMessage = simpleCorrelationMatch.Groups[4].Value;

                    // Check if this looks like a correlation ID
                    if (Regex.IsMatch(correlationIdOrMessage, @"^[A-Z]\d{8,}"))
                    {
                        var timestamp = DateTime.ParseExact(timeStr, "HH:mm:ss.fff", CultureInfo.InvariantCulture);
                        timestamp = DateTime.Today.Add(timestamp.TimeOfDay);

                        return new LogEntry
                        {
                            Timestamp = timestamp,
                            Level = ParseLogLevel(levelStr),
                            Message = remainingMessage,
                            RawLine = line,
                            CorrelationId = correlationIdOrMessage
                        };
                    }
                }

                // Fallback to standard Serilog format WITHOUT correlation
                // Example: [14:23:45 INF] Pipeline Radiology started
                var standardMatch = Regex.Match(line, @"^\[?(\d{2}:\d{2}:\d{2}(?:\.\d{3})?)\s+(\w+)\]?\s+(.+)$");

                if (standardMatch.Success)
                {
                    var timeStr = standardMatch.Groups[1].Value;
                    var levelStr = standardMatch.Groups[2].Value;
                    var message = standardMatch.Groups[3].Value;

                    // Parse timestamp
                    DateTime timestamp;
                    if (timeStr.Contains('.'))
                    {
                        timestamp = DateTime.ParseExact(timeStr, "HH:mm:ss.fff", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        timestamp = DateTime.ParseExact(timeStr, "HH:mm:ss", CultureInfo.InvariantCulture);
                    }

                    // Add today's date
                    timestamp = DateTime.Today.Add(timestamp.TimeOfDay);

                    var level = ParseLogLevel(levelStr);

                    return new LogEntry
                    {
                        Timestamp = timestamp,
                        Level = level,
                        Message = message,
                        RawLine = line
                    };
                }

                // Last resort - just treat as info message
                return new LogEntry
                {
                    Timestamp = DateTime.Now,
                    Level = LogLevel.Information,
                    Message = line,
                    RawLine = line
                };
            }
            catch (Exception ex)
            {
                _logger.LogDebug(ex, "Failed to parse log line: {Line}", line);
                // Return the line as-is
                return new LogEntry
                {
                    Timestamp = DateTime.Now,
                    Level = LogLevel.Information,
                    Message = line,
                    RawLine = line
                };
            }
        }

        private LogLevel DetermineLogLevel(ProcessingStage? stage, string message)
        {
            // Check stage first
            if (stage == ProcessingStage.Error)
                return LogLevel.Error;

            // Check message content
            if (message.Contains("error", StringComparison.OrdinalIgnoreCase) ||
                message.Contains("failed", StringComparison.OrdinalIgnoreCase))
                return LogLevel.Error;

            if (message.Contains("warning", StringComparison.OrdinalIgnoreCase) ||
                message.Contains("slow", StringComparison.OrdinalIgnoreCase))
                return LogLevel.Warning;

            if (message.Contains("debug", StringComparison.OrdinalIgnoreCase))
                return LogLevel.Debug;

            // Default to Information
            return LogLevel.Information;
        }

        private LogLevel ParseLogLevel(string levelStr)
        {
            return levelStr.ToUpperInvariant() switch
            {
                "DBG" or "DEB" or "DEBUG" => LogLevel.Debug,
                "INF" or "INFO" or "INFORMATION" => LogLevel.Information,
                "WRN" or "WARN" or "WARNING" => LogLevel.Warning,
                "ERR" or "ERROR" => LogLevel.Error,
                "CRT" or "CRIT" or "CRITICAL" or "FTL" or "FATAL" => LogLevel.Critical,
                _ => LogLevel.Information  // Default to Information instead of failing
            };
        }

        private void ClearLogs()
        {
            LogEntries.Clear();
            CombinedLogEntries.Clear();
            FilteredCombinedEntries.Clear();
            CorrelationGroups.Clear();
            TotalLineCount = 0;
            _filePositions.Clear();
        }

        private async Task ExportLogsAsync()
        {
            try
            {
                // Create export dialog
                var dialog = new Microsoft.Win32.SaveFileDialog
                {
                    Filter = "Log files (*.log)|*.log|Text files (*.txt)|*.txt|All files (*.*)|*.*",
                    DefaultExt = ".log",
                    FileName = $"CamBridge_Export_{DateTime.Now:yyyyMMdd_HHmmss}.log"
                };

                if (dialog.ShowDialog() == true)
                {
                    var lines = FilteredCombinedEntries.Select(e => e.RawLine ?? e.Message);
                    await File.WriteAllLinesAsync(dialog.FileName, lines, Encoding.UTF8);

                    _logger.LogInformation("Exported {Count} log entries to {FileName}",
                        FilteredCombinedEntries.Count, dialog.FileName);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to export logs");
            }
        }

        private string GetLogFileName(string pipelineSelection)
        {
            var today = DateTime.Now.ToString("yyyyMMdd");

            if (pipelineSelection == "Service (Global)")
            {
                return $"service_{today}.log";
            }

            if (pipelineSelection == "All Pipelines (Legacy)")
            {
                return $"pipelines_{today}.log";
            }

            // Get sanitized name from mapping
            if (_pipelineNameMapping.TryGetValue(pipelineSelection, out var sanitizedName))
            {
                return $"pipeline_{sanitizedName}_{today}.log";
            }

            // Fallback - sanitize the selection directly
            var safeName = SanitizeForFileName(pipelineSelection.Replace(" (Archived)", ""));
            return $"pipeline_{safeName}_{today}.log";
        }

        private string SanitizeForFileName(string pipelineName)
        {
            // Replace invalid filename characters and common separators
            var invalid = Path.GetInvalidFileNameChars()
                .Concat(new[] { ' ', '.', ',', '/', '\\', ':', '-' })
                .Distinct()
                .ToArray();

            var sanitized = string.Join("_", pipelineName.Split(invalid, StringSplitOptions.RemoveEmptyEntries));

            // Limit length
            if (sanitized.Length > 100)
            {
                sanitized = sanitized.Substring(0, 97) + "...";
            }

            return sanitized;
        }

        private void OnRefreshTimer(object? state)
        {
            if (IsAutoScrollEnabled && !IsLoading)
            {
                _ = RefreshLogsAsync();
            }
        }

        private void OnPipelineSelectionChanged(object? sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(PipelineSelection.IsSelected))
            {
                // Update count
                OnPropertyChanged(nameof(SelectedPipelineCount));

                // Update current files display
                var selectedNames = PipelineSelections.Where(p => p.IsSelected).Select(p => p.Name).ToList();
                CurrentLogFiles = selectedNames.Any()
                    ? string.Join(", ", selectedNames)
                    : "No pipelines selected";

                // Refresh logs with new selection
                _ = RefreshLogsAsync();
            }
        }

        partial void OnSearchTextChanged(string? value)
        {
            // Debounce search to avoid too many updates
            ApplyFilters();
        }

        partial void OnShowDebugChanged(bool value)
        {
            ApplyFilters();
            OnPropertyChanged(nameof(SelectedLevelCount));
        }

        partial void OnShowInformationChanged(bool value)
        {
            ApplyFilters();
            OnPropertyChanged(nameof(SelectedLevelCount));
        }

        partial void OnShowWarningChanged(bool value)
        {
            ApplyFilters();
            OnPropertyChanged(nameof(SelectedLevelCount));
        }

        partial void OnShowErrorChanged(bool value)
        {
            ApplyFilters();
            OnPropertyChanged(nameof(SelectedLevelCount));
        }

        partial void OnShowCriticalChanged(bool value)
        {
            ApplyFilters();
            OnPropertyChanged(nameof(SelectedLevelCount));
        }

        partial void OnIsTreeViewEnabledChanged(bool value)
        {
            ApplyFilters();
        }
    }

    /// <summary>
    /// Enhanced log entry with correlation support
    /// </summary>
    public class LogEntry
    {
        public DateTime Timestamp { get; set; }
        public LogLevel Level { get; set; }
        public string Message { get; set; } = string.Empty;
        public string? RawLine { get; set; }
        public string Source { get; set; } = string.Empty; // Which log file this came from

        // Enhanced properties for correlation
        public string? CorrelationId { get; set; }
        public ProcessingStage? Stage { get; set; }
        public string? Pipeline { get; set; }
        public int? DurationMs { get; set; }

        // UI Helper Properties
        public string LevelText => Level switch
        {
            LogLevel.Debug => "DBG",
            LogLevel.Information => "INF",
            LogLevel.Warning => "WRN",
            LogLevel.Error => "ERR",
            LogLevel.Critical => "CRT",
            _ => "???"
        };

        public string LevelColor => Level switch
        {
            LogLevel.Debug => "#808080",      // Gray
            LogLevel.Information => "#0078D4", // Blue
            LogLevel.Warning => "#FFA500",     // Orange
            LogLevel.Error => "#FF0000",       // Red
            LogLevel.Critical => "#8B0000",    // Dark Red
            _ => "#000000"
        };

        public string StageIcon => Stage switch
        {
            ProcessingStage.FileDetected => "ðŸ“„",
            ProcessingStage.ExifExtraction => "ðŸ“·",
            ProcessingStage.TagMapping => "ðŸ”„",
            ProcessingStage.DicomConversion => "ðŸ¥",
            ProcessingStage.PostProcessing => "ðŸ“‹",
            ProcessingStage.PacsUpload => "â˜ï¸",
            ProcessingStage.Complete => "âœ…",
            ProcessingStage.Error => "âŒ",
            _ => "ðŸ“"
        };

        public string FormattedDuration => DurationMs.HasValue ? $"{DurationMs}ms" : "";
    }

    /// <summary>
    /// Represents a group of log entries with the same correlation ID
    /// </summary>
    public class CorrelationGroup : ObservableObject
    {
        private bool _isExpanded;

        public string CorrelationId { get; set; } = string.Empty;
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Pipeline { get; set; } = string.Empty;
        public ProcessingStatus Status { get; set; }
        public ObservableCollection<StageGroup> Stages { get; } = new();
        public ObservableCollection<LogEntry> UngroupedEntries { get; } = new();

        public bool IsExpanded
        {
            get => _isExpanded;
            set => SetProperty(ref _isExpanded, value);
        }

        public TimeSpan Duration => EndTime - StartTime;
        public string DurationText => $"{Duration.TotalMilliseconds:0}ms";
        public int TotalEntries => Stages.Sum(s => s.Entries.Count) + UngroupedEntries.Count;

        public string StatusIcon => Status switch
        {
            ProcessingStatus.Completed => "âœ…",
            ProcessingStatus.Failed => "âŒ",
            ProcessingStatus.InProgress => "â³",
            _ => "â“"
        };

        public string StatusColor => Status switch
        {
            ProcessingStatus.Completed => "#4CAF50",
            ProcessingStatus.Failed => "#F44336",
            ProcessingStatus.InProgress => "#FFA500",
            _ => "#808080"
        };
    }

    /// <summary>
    /// Represents a group of log entries for a specific processing stage
    /// </summary>
    public class StageGroup : ObservableObject
    {
        private bool _isExpanded;

        public ProcessingStage Stage { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public ObservableCollection<LogEntry> Entries { get; } = new();

        public bool IsExpanded
        {
            get => _isExpanded;
            set => SetProperty(ref _isExpanded, value);
        }

        public TimeSpan Duration => EndTime - StartTime;
        public string DurationText => $"{Duration.TotalMilliseconds:0}ms";

        public string StageIcon => Entries.FirstOrDefault()?.StageIcon ?? "ðŸ“";
    }

    /// <summary>
    /// Processing status for correlation groups
    /// </summary>
    public enum ProcessingStatus
    {
        Unknown,
        InProgress,
        Completed,
        Failed
    }
}
<!-- src\CamBridge.Config\Views\LogViewerPage.xaml -->
<!-- Version: 0.8.7 -->
<!-- Description: Enhanced log viewer with FIXED tree view binding -->
<!-- Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions -->

<Page x:Class="CamBridge.Config.Views.LogViewerPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:CamBridge.Config.Views"
      xmlns:viewmodels="clr-namespace:CamBridge.Config.ViewModels"
      xmlns:converters="clr-namespace:CamBridge.Config.Converters"
      mc:Ignorable="d" 
      d:DesignHeight="600" d:DesignWidth="1000"
      d:DataContext="{d:DesignInstance Type=viewmodels:LogViewerViewModel}"
      Title="Log Viewer">

    <Page.Resources>
        <converters:BooleanToVisibilityConverter x:Key="BoolToVisibility"/>
        <converters:InverseBooleanToVisibilityConverter x:Key="InverseBoolToVisibility"/>

        <!-- Style for expandable group headers -->
        <Style x:Key="ExpandableGroupHeader" TargetType="Border">
            <Setter Property="Background" Value="#F5F5F5"/>
            <Setter Property="BorderBrush" Value="#E0E0E0"/>
            <Setter Property="BorderThickness" Value="0,0,0,1"/>
            <Setter Property="Padding" Value="8,4"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#E8E8E8"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- DataTemplate for log entries in tree view -->
        <DataTemplate x:Key="LogEntryTemplate" DataType="{x:Type viewmodels:LogEntry}">
            <Border Padding="24,2,8,2" BorderThickness="0,0,0,1" BorderBrush="#E0E0E0">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="100"/>
                        <ColumnDefinition Width="40"/>
                        <ColumnDefinition Width="60"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="80"/>
                    </Grid.ColumnDefinitions>

                    <TextBlock Grid.Column="0" Text="{Binding Timestamp, StringFormat='HH:mm:ss.fff'}" 
                               FontFamily="Consolas" FontSize="11" Opacity="0.7"/>

                    <TextBlock Grid.Column="1" Text="{Binding LevelText}" 
                               FontWeight="Bold" FontFamily="Consolas"
                               Foreground="{Binding LevelColor}"/>

                    <TextBlock Grid.Column="2" Text="{Binding StageIcon}" 
                               FontSize="14" VerticalAlignment="Center"/>

                    <TextBlock Grid.Column="3" Text="{Binding Message}" 
                               TextWrapping="Wrap" Margin="8,0,0,0"/>

                    <TextBlock Grid.Column="4" Text="{Binding FormattedDuration}" 
                               FontFamily="Consolas" FontSize="11" Opacity="0.7"
                               HorizontalAlignment="Right"/>
                </Grid>
            </Border>
        </DataTemplate>
    </Page.Resources>

    <DockPanel>
        <!-- Header with controls -->
        <Border DockPanel.Dock="Top" Padding="16" Background="White"
                BorderBrush="#E0E0E0" BorderThickness="0,0,0,1">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <!-- Title and Stats -->
                <DockPanel Grid.Row="0">
                    <StackPanel Orientation="Horizontal" DockPanel.Dock="Left">
                        <TextBlock Text="ðŸ“„" FontSize="28" VerticalAlignment="Center"/>
                        <TextBlock Text="Log Viewer" FontSize="24" FontWeight="Bold" 
                                   VerticalAlignment="Center" Margin="8,0,0,0"/>

                        <!-- Tree/Flat Toggle -->
                        <ToggleButton IsChecked="{Binding IsTreeViewEnabled}" 
                                      Margin="16,0,0,0" VerticalAlignment="Center"
                                      ToolTip="Toggle tree view" Padding="8,4">
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="ðŸŒ³" FontSize="16" Margin="0,0,4,0"/>
                                <TextBlock Text="Tree View"/>
                            </StackPanel>
                        </ToggleButton>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal" DockPanel.Dock="Right" 
                                HorizontalAlignment="Right" VerticalAlignment="Center">
                        <TextBlock Text="Last Update:" Opacity="0.7" Margin="0,0,4,0"/>
                        <TextBlock Text="{Binding LastUpdateTime, StringFormat='HH:mm:ss'}" FontWeight="Bold"/>
                        <TextBlock Text="Lines:" Opacity="0.7" Margin="16,0,4,0"/>
                        <TextBlock Text="{Binding DisplayedLineCount}" FontWeight="Bold"/>
                        <TextBlock Text="/" Opacity="0.5"/>
                        <TextBlock Text="{Binding TotalLineCount}" Opacity="0.7"/>
                    </StackPanel>
                </DockPanel>

                <!-- Pipeline Selection -->
                <Grid Grid.Row="1" Margin="0,8,0,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <TextBlock Grid.Column="0" Text="Pipelines:" VerticalAlignment="Center" Margin="0,0,8,0"/>

                    <ComboBox Grid.Column="1" ItemsSource="{Binding PipelineSelections}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <CheckBox IsChecked="{Binding IsSelected}" 
                                          Content="{Binding Name}"/>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                        <ComboBox.ItemContainerStyle>
                            <Style TargetType="ComboBoxItem">
                                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                            </Style>
                        </ComboBox.ItemContainerStyle>
                        <ComboBox.Text>
                            <MultiBinding StringFormat="{}{0} pipeline(s) selected" Mode="OneWay">
                                <Binding Path="SelectedPipelineCount" Mode="OneWay"/>
                            </MultiBinding>
                        </ComboBox.Text>
                    </ComboBox>

                    <StackPanel Grid.Column="2" Orientation="Horizontal" Margin="16,0,0,0">
                        <Button Command="{Binding RefreshCommand}" 
                                ToolTip="Refresh logs" Margin="0,0,8,0" Padding="8,4">
                            <TextBlock Text="ðŸ”„" FontSize="16"/>
                        </Button>

                        <Button Command="{Binding ExpandAllCommand}" 
                                ToolTip="Expand all" Margin="0,0,8,0" Padding="8,4"
                                Visibility="{Binding IsTreeViewEnabled, Converter={StaticResource BoolToVisibility}}">
                            <TextBlock Text="âŠ•" FontSize="16"/>
                        </Button>

                        <Button Command="{Binding CollapseAllCommand}" 
                                ToolTip="Collapse all" Margin="0,0,8,0" Padding="8,4"
                                Visibility="{Binding IsTreeViewEnabled, Converter={StaticResource BoolToVisibility}}">
                            <TextBlock Text="âŠ–" FontSize="16"/>
                        </Button>

                        <Button Command="{Binding ClearLogCommand}" 
                                ToolTip="Clear display" Margin="0,0,8,0" Padding="8,4">
                            <TextBlock Text="ðŸ§¹" FontSize="16"/>
                        </Button>

                        <Button Command="{Binding ExportLogCommand}" 
                                ToolTip="Export filtered logs" Padding="8,4">
                            <TextBlock Text="ðŸ’¾" FontSize="16"/>
                        </Button>
                    </StackPanel>
                </Grid>

                <!-- Filters -->
                <Grid Grid.Row="2" Margin="0,8,0,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <!-- Search Box -->
                    <TextBox Grid.Column="0" Text="{Binding SearchText, UpdateSourceTrigger=PropertyChanged}"
                             Tag="Search logs..." VerticalContentAlignment="Center" Padding="4">
                        <TextBox.InputBindings>
                            <KeyBinding Key="Escape" Command="{Binding ClearSearchCommand}"/>
                        </TextBox.InputBindings>
                    </TextBox>

                    <!-- Level Filters -->
                    <StackPanel Grid.Column="1" Orientation="Horizontal" Margin="16,0,0,0">
                        <TextBlock Text="Levels:" VerticalAlignment="Center" Margin="0,0,8,0"/>

                        <ToggleButton IsChecked="{Binding ShowDebug}" ToolTip="Debug" Padding="4,2">
                            <TextBlock Text="DBG" FontFamily="Consolas" FontWeight="Bold" Foreground="#808080"/>
                        </ToggleButton>

                        <ToggleButton IsChecked="{Binding ShowInformation}" ToolTip="Information" Padding="4,2">
                            <TextBlock Text="INF" FontFamily="Consolas" FontWeight="Bold" Foreground="#0078D4"/>
                        </ToggleButton>

                        <ToggleButton IsChecked="{Binding ShowWarning}" ToolTip="Warning" Padding="4,2">
                            <TextBlock Text="WRN" FontFamily="Consolas" FontWeight="Bold" Foreground="#FFA500"/>
                        </ToggleButton>

                        <ToggleButton IsChecked="{Binding ShowError}" ToolTip="Error" Padding="4,2">
                            <TextBlock Text="ERR" FontFamily="Consolas" FontWeight="Bold" Foreground="#FF0000"/>
                        </ToggleButton>

                        <ToggleButton IsChecked="{Binding ShowCritical}" ToolTip="Critical" Padding="4,2">
                            <TextBlock Text="CRT" FontFamily="Consolas" FontWeight="Bold" Foreground="#8B0000"/>
                        </ToggleButton>
                    </StackPanel>

                    <!-- Auto-scroll -->
                    <CheckBox Grid.Column="2" IsChecked="{Binding IsAutoScrollEnabled}" 
                              Content="Auto-scroll" VerticalAlignment="Center" Margin="16,0,0,0"/>
                </Grid>
            </Grid>
        </Border>

        <!-- Progress bar -->
        <ProgressBar DockPanel.Dock="Top" IsIndeterminate="True" Height="2"
                     Visibility="{Binding IsLoading, Converter={StaticResource BoolToVisibility}}"/>

        <!-- Main content area -->
        <Grid>
            <!-- Tree View (when enabled) -->
            <ScrollViewer Visibility="{Binding IsTreeViewEnabled, Converter={StaticResource BoolToVisibility}}"
                          VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">
                <ItemsControl ItemsSource="{Binding CorrelationGroups}" VirtualizingPanel.IsVirtualizing="True">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="{x:Type viewmodels:CorrelationGroup}">
                            <Border Margin="0,0,0,8" BorderBrush="#E0E0E0" 
                                    BorderThickness="1" CornerRadius="4">
                                <!-- Correlation Group Header -->
                                <StackPanel>
                                    <Border Style="{StaticResource ExpandableGroupHeader}"
                                            MouseLeftButtonDown="CorrelationHeader_Click"
                                            Tag="{Binding}">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>

                                            <TextBlock Grid.Column="0" FontFamily="Consolas">
                                                <TextBlock.Style>
                                                    <Style TargetType="TextBlock">
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding IsExpanded}" Value="False">
                                                                <Setter Property="Text" Value="â–¶"/>
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding IsExpanded}" Value="True">
                                                                <Setter Property="Text" Value="â–¼"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </TextBlock.Style>
                                            </TextBlock>

                                            <TextBlock Grid.Column="1" Text="{Binding StatusIcon}" 
                                                       FontSize="16" Margin="8,0"/>

                                            <TextBlock Grid.Column="2" FontWeight="Bold">
                                                <TextBlock.Text>
                                                    <MultiBinding StringFormat="{}{0} - {1}">
                                                        <Binding Path="CorrelationId"/>
                                                        <Binding Path="Pipeline"/>
                                                    </MultiBinding>
                                                </TextBlock.Text>
                                            </TextBlock>

                                            <TextBlock Grid.Column="3" Text="{Binding StartTime, StringFormat='HH:mm:ss.fff'}" 
                                                       FontFamily="Consolas" Opacity="0.7" Margin="8,0"/>

                                            <TextBlock Grid.Column="4" Text="{Binding DurationText}" 
                                                       FontFamily="Consolas" Foreground="{Binding StatusColor}" 
                                                       FontWeight="Bold" Margin="8,0"/>

                                            <TextBlock Grid.Column="5" Text="{Binding TotalEntries, StringFormat='({0} entries)'}" 
                                                       Opacity="0.7" Margin="8,0"/>
                                        </Grid>
                                    </Border>

                                    <!-- Stages (when expanded) -->
                                    <ItemsControl ItemsSource="{Binding Stages}" 
                                                  Visibility="{Binding IsExpanded, Converter={StaticResource BoolToVisibility}}">
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate DataType="{x:Type viewmodels:StageGroup}">
                                                <StackPanel>
                                                    <!-- Stage Header -->
                                                    <Border Style="{StaticResource ExpandableGroupHeader}"
                                                            Margin="16,0,0,0"
                                                            MouseLeftButtonDown="StageHeader_Click"
                                                            Tag="{Binding}">
                                                        <Grid>
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="Auto"/>
                                                                <ColumnDefinition Width="Auto"/>
                                                                <ColumnDefinition Width="*"/>
                                                                <ColumnDefinition Width="Auto"/>
                                                                <ColumnDefinition Width="Auto"/>
                                                            </Grid.ColumnDefinitions>

                                                            <TextBlock Grid.Column="0" FontFamily="Consolas" Width="16">
                                                                <TextBlock.Style>
                                                                    <Style TargetType="TextBlock">
                                                                        <Style.Triggers>
                                                                            <DataTrigger Binding="{Binding IsExpanded}" Value="False">
                                                                                <Setter Property="Text" Value="â–¶"/>
                                                                            </DataTrigger>
                                                                            <DataTrigger Binding="{Binding IsExpanded}" Value="True">
                                                                                <Setter Property="Text" Value="â–¼"/>
                                                                            </DataTrigger>
                                                                        </Style.Triggers>
                                                                    </Style>
                                                                </TextBlock.Style>
                                                            </TextBlock>

                                                            <TextBlock Grid.Column="1" Text="{Binding StageIcon}" 
                                                                       FontSize="14" Margin="4,0"/>

                                                            <TextBlock Grid.Column="2" Text="{Binding Stage}" 
                                                                       FontWeight="SemiBold"/>

                                                            <TextBlock Grid.Column="3" Text="{Binding DurationText}" 
                                                                       FontFamily="Consolas" FontSize="11" 
                                                                       Opacity="0.7" Margin="8,0"/>

                                                            <TextBlock Grid.Column="4" Text="{Binding Entries.Count, StringFormat='({0})'}" 
                                                                       FontSize="11" Opacity="0.7"/>
                                                        </Grid>
                                                    </Border>

                                                    <!-- Stage Entries (when expanded) -->
                                                    <ItemsControl ItemsSource="{Binding Entries}" 
                                                                  Visibility="{Binding IsExpanded, Converter={StaticResource BoolToVisibility}}"
                                                                  Margin="32,0,0,0"
                                                                  ItemTemplate="{StaticResource LogEntryTemplate}"/>
                                                </StackPanel>
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>

                                    <!-- Ungrouped Entries -->
                                    <ItemsControl ItemsSource="{Binding UngroupedEntries}" 
                                                  Visibility="{Binding IsExpanded, Converter={StaticResource BoolToVisibility}}"
                                                  Margin="16,0,0,0"
                                                  ItemTemplate="{StaticResource LogEntryTemplate}"/>
                                </StackPanel>
                            </Border>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </ScrollViewer>

            <!-- Flat View (when tree view disabled) -->
            <DataGrid ItemsSource="{Binding FilteredCombinedEntries}"
                      Visibility="{Binding IsTreeViewEnabled, Converter={StaticResource InverseBoolToVisibility}}"
                      AutoGenerateColumns="False"
                      CanUserAddRows="False"
                      CanUserDeleteRows="False"
                      GridLinesVisibility="Horizontal"
                      HeadersVisibility="Column"
                      IsReadOnly="True"
                      VirtualizingPanel.IsVirtualizing="True"
                      VirtualizingPanel.VirtualizationMode="Recycling"
                      ScrollViewer.CanContentScroll="True">
                <DataGrid.Resources>
                    <Style TargetType="DataGridCell">
                        <Setter Property="BorderThickness" Value="0"/>
                    </Style>
                </DataGrid.Resources>
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Time" Binding="{Binding Timestamp, StringFormat='HH:mm:ss.fff'}" 
                                        Width="100" FontFamily="Consolas"/>

                    <DataGridTextColumn Header="Level" Binding="{Binding LevelText}" Width="60">
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="TextBlock">
                                <Setter Property="Foreground" Value="{Binding LevelColor}"/>
                                <Setter Property="FontWeight" Value="Bold"/>
                                <Setter Property="FontFamily" Value="Consolas"/>
                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>

                    <DataGridTextColumn Header="Pipeline" Binding="{Binding Source}" Width="120"/>

                    <DataGridTextColumn Header="Correlation" Binding="{Binding CorrelationId}" Width="140" 
                                        FontFamily="Consolas" FontSize="11"/>

                    <DataGridTextColumn Header="Stage" Binding="{Binding Stage}" Width="120"/>

                    <DataGridTextColumn Header="Message" Binding="{Binding Message}" Width="*">
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="TextBlock">
                                <Setter Property="TextWrapping" Value="Wrap"/>
                                <Setter Property="VerticalAlignment" Value="Center"/>
                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>

                    <DataGridTextColumn Header="Duration" Binding="{Binding FormattedDuration}" 
                                        Width="80" FontFamily="Consolas" FontSize="11"/>
                </DataGrid.Columns>
            </DataGrid>
        </Grid>
    </DockPanel>
</Page>
// src/CamBridge.Core/Logging/LogContext.cs
// Version: 0.8.6
// Description: Context for hierarchical logging with correlation IDs and timing
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using CamBridge.Core.Enums; // Use LogVerbosity and ProcessingStage from Enums!

namespace CamBridge.Core.Logging
{
    /// <summary>
    /// Provides context for hierarchical logging with correlation IDs
    /// </summary>
    public class LogContext
    {
        private readonly ILogger _logger;
        private readonly Stack<StageContext> _stageStack = new();

        public string CorrelationId { get; }
        public string PipelineName { get; }
        public ProcessingStage CurrentStage { get; private set; }
        public DateTime StartTime { get; }
        public LogVerbosity Verbosity { get; }

        public LogContext(
            ILogger logger,
            string correlationId,
            string pipelineName,
            LogVerbosity verbosity = LogVerbosity.Detailed)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            CorrelationId = correlationId ?? throw new ArgumentNullException(nameof(correlationId));
            PipelineName = pipelineName ?? throw new ArgumentNullException(nameof(pipelineName));
            Verbosity = verbosity;
            StartTime = DateTime.UtcNow;
            CurrentStage = ProcessingStage.FileDetected;
        }

        /// <summary>
        /// Begins a new processing stage and returns a disposable that logs completion
        /// </summary>
        public IDisposable BeginStage(ProcessingStage stage, string? message = null)
        {
            CurrentStage = stage;
            var stageContext = new StageContext(this, stage, message);
            _stageStack.Push(stageContext);
            return stageContext;
        }

        /// <summary>
        /// Check if should log at this verbosity level
        /// </summary>
        public bool ShouldLog(LogVerbosity requiredLevel)
        {
            return Verbosity >= requiredLevel;
        }

        /// <summary>
        /// Log with correlation context
        /// </summary>
        public void Log(LogLevel level, string message, params object[] args)
        {
            var formattedArgs = new List<object> { CorrelationId, CurrentStage, message, PipelineName };
            if (args != null && args.Length > 0)
            {
                formattedArgs.AddRange(args);
            }

            _logger.Log(level, "[{CorrelationId}] [{Stage}] " + message + " [{Pipeline}]", formattedArgs.ToArray());
        }

        /// <summary>
        /// Log information with correlation context
        /// </summary>
        public void LogInformation(string message, params object[] args)
        {
            if (ShouldLog(LogVerbosity.Minimal))
            {
                Log(LogLevel.Information, message, args);
            }
        }

        /// <summary>
        /// Log debug with correlation context
        /// </summary>
        public void LogDebug(string message, params object[] args)
        {
            if (ShouldLog(LogVerbosity.Debug))
            {
                Log(LogLevel.Debug, message, args);
            }
        }

        /// <summary>
        /// Log warning with correlation context
        /// </summary>
        public void LogWarning(string message, params object[] args)
        {
            if (ShouldLog(LogVerbosity.Normal))
            {
                Log(LogLevel.Warning, message, args);
            }
        }

        /// <summary>
        /// Log error with correlation context
        /// </summary>
        public void LogError(Exception ex, string message, params object[] args)
        {
            // Always log errors
            var formattedArgs = new List<object> { CorrelationId, CurrentStage, message, PipelineName };
            if (args != null && args.Length > 0)
            {
                formattedArgs.AddRange(args);
            }

            _logger.LogError(ex, "[{CorrelationId}] [{Stage}] " + message + " [{Pipeline}]", formattedArgs.ToArray());
        }

        /// <summary>
        /// Context for a processing stage with timing
        /// </summary>
        private class StageContext : IDisposable
        {
            private readonly LogContext _logContext;
            private readonly ProcessingStage _stage;
            private readonly Stopwatch _stopwatch;
            private readonly string? _message;

            public StageContext(LogContext logContext, ProcessingStage stage, string? message)
            {
                _logContext = logContext;
                _stage = stage;
                _message = message;
                _stopwatch = Stopwatch.StartNew();

                // Log stage start if detailed logging
                if (_logContext.ShouldLog(LogVerbosity.Detailed))
                {
                    _logContext.LogInformation(_message ?? $"{stage} started");
                }
            }

            public void Dispose()
            {
                _stopwatch.Stop();

                // Log stage completion with timing
                if (_logContext.ShouldLog(LogVerbosity.Normal))
                {
                    var completionMessage = _message != null
                        ? $"{_message} completed"
                        : $"{_stage} completed";

                    _logContext.LogInformation($"{completionMessage} [{{Duration}}ms]", _stopwatch.ElapsedMilliseconds);
                }

                // Pop from stack
                if (_logContext._stageStack.Count > 0)
                {
                    _logContext._stageStack.Pop();
                }
            }
        }
    }

    // REMOVED: ProcessingStage enum - now in CamBridge.Core.Enums
    // REMOVED: LogVerbosity enum - now in CamBridge.Core.Enums

    /// <summary>
    /// Extension methods for clean logging
    /// </summary>
    public static class LogContextExtensions
    {
        /// <summary>
        /// Create a log context from a logger
        /// </summary>
        public static LogContext CreateContext(
            this ILogger logger,
            string correlationId,
            string pipelineName,
            LogVerbosity verbosity = LogVerbosity.Detailed)
        {
            return new LogContext(logger, correlationId, pipelineName, verbosity);
        }

        /// <summary>
        /// Log a processing stage with timing
        /// </summary>
        public static IDisposable LogStage(
            this LogContext context,
            ProcessingStage stage,
            string? message = null)
        {
            return context.BeginStage(stage, message);
        }
    }
}
// src/CamBridge.Core/Enums/ProcessingStage.cs
// Version: 0.8.6
// Created: Session 97 - Fixing hierarchical logging
// Purpose: Define processing stages for correlation tracking

namespace CamBridge.Core.Enums
{
    /// <summary>
    /// Processing stages for hierarchical logging and correlation tracking
    /// </summary>
    public enum ProcessingStage
    {
        /// <summary>
        /// File received from FTP Server (future feature)
        /// </summary>
        FtpReceived,

        /// <summary>
        /// File detected in watch folder
        /// </summary>
        FileDetected,

        /// <summary>
        /// Extracting metadata from JPEG using ExifTool
        /// </summary>
        ExifExtraction,

        /// <summary>
        /// Applying mapping rules to transform data
        /// </summary>
        TagMapping,

        /// <summary>
        /// Creating DICOM file from JPEG + metadata
        /// </summary>
        DicomConversion,

        /// <summary>
        /// Archive/Delete operations after conversion
        /// </summary>
        PostProcessing,

        /// <summary>
        /// Uploading to PACS server
        /// </summary>
        PacsUpload,

        /// <summary>
        /// Processing completed successfully
        /// </summary>
        Complete,

        /// <summary>
        /// Error occurred during processing
        /// </summary>
        Error
    }
}
