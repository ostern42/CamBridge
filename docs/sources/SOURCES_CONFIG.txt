# CamBridge Sources - CONFIG
# Generated: 2025-06-14 23:36:20
# Version: 0.7.11
# Purpose: Complete source code for project knowledge
# Token-efficient access to all implementations


================================================================================
FILE: src\CamBridge.Config\App.xaml.cs
================================================================================

// src\CamBridge.Config\App.xaml.cs
// Version: 0.7.12
// Description: Application entry point with WPF host
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Threading;
using CamBridge.Config.Services;
using CamBridge.Config.ViewModels;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

namespace CamBridge.Config
{
    /// <summary>
    /// Main application class
    /// </summary>
    public partial class App : Application
    {
        private IHost? _host;

        /// <summary>
        /// Gets the current host instance
        /// </summary>
        public IHost? Host => _host;

        /// <summary>
        /// Gets the current service provider
        /// </summary>
        public static IServiceProvider Services { get; private set; } = null!;

        /// <summary>
        /// Application startup
        /// </summary>
        protected override void OnStartup(StartupEventArgs e)
        {
            base.OnStartup(e);

            // Setup global exception handlers
            AppDomain.CurrentDomain.UnhandledException += OnUnhandledException;
            DispatcherUnhandledException += OnDispatcherUnhandledException;

            try
            {
                ConfigureHost();
            }
            catch (Exception ex)
            {
                LogException("Host configuration failed", ex);
                MessageBox.Show(
                    $"Failed to start application: {ex.Message}",
                    "Startup Error",
                    MessageBoxButton.OK,
                    MessageBoxImage.Error);
                Shutdown(1);
            }
        }

        /// <summary>
        /// Configure the dependency injection host
        /// </summary>
        private void ConfigureHost()
        {
            // Verify config file exists - Added in v0.5.32
            var appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            var configPath = System.IO.Path.Combine(appDataPath, "CamBridge", "appsettings.json");

            if (!System.IO.File.Exists(configPath))
            {
                // Also check ProgramData (where Service saves config)
                var programDataPath = System.IO.Path.Combine(
                    Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData),
                    "CamBridge",
                    "appsettings.json");

                if (System.IO.File.Exists(programDataPath))
                {
                    configPath = programDataPath;
                }
                else
                {
                    MessageBox.Show(
                        $"Configuration file not found.\nExpected at: {configPath}\n\nPlease run the service first to create initial configuration.",
                        "Configuration Error",
                        MessageBoxButton.OK,
                        MessageBoxImage.Warning);
                }
            }

            _host = Microsoft.Extensions.Hosting.Host.CreateDefaultBuilder()
                .ConfigureServices((context, services) =>
                {
                    // Services
                    services.AddSingleton<INavigationService, NavigationService>();
                    services.AddSingleton<IServiceManager, ServiceManager>();
                    services.AddSingleton<IConfigurationService, ConfigurationService>();

                    // HttpClient for API calls - FIXED PORT!
                    services.AddHttpClient<IApiService, HttpApiService>(client =>
                    {
                        // CRITICAL: Use port 5111, not 5050!
                        client.BaseAddress = new Uri("http://localhost:5111/");
                        client.Timeout = TimeSpan.FromSeconds(5);
                    });

                    // ViewModels - Updated for Pipeline Architecture!
                    services.AddTransient<MainViewModel>();
                    services.AddTransient<DashboardViewModel>();
                    services.AddTransient<ServiceControlViewModel>();
                    services.AddTransient<PipelineConfigViewModel>();  // NEW! Replaces SettingsViewModel
                    services.AddTransient<DeadLettersViewModel>();
                    services.AddTransient<MappingEditorViewModel>();
                    // SettingsViewModel REMOVED - Zero Global Settings!

                    // Views - No registration needed, created directly

                    // Logging
                    services.AddLogging(configure =>
                    {
                        configure.AddDebug();
                        configure.SetMinimumLevel(LogLevel.Debug);
                    });
                })
                .Build();

            Services = _host.Services;

            // Create and show main window
            var mainWindow = new MainWindow();
            mainWindow.Show();
        }

        /// <summary>
        /// Application exit cleanup
        /// </summary>
        protected override void OnExit(ExitEventArgs e)
        {
            _host?.Dispose();
            base.OnExit(e);
        }

        /// <summary>
        /// Handle unhandled exceptions
        /// </summary>
        private void OnUnhandledException(object sender, UnhandledExceptionEventArgs e)
        {
            LogException("Unhandled exception", e.ExceptionObject as Exception);

            MessageBox.Show(
                "An unexpected error occurred. The application will now close.",
                "Fatal Error",
                MessageBoxButton.OK,
                MessageBoxImage.Error);
        }

        /// <summary>
        /// Handle dispatcher unhandled exceptions
        /// </summary>
        private void OnDispatcherUnhandledException(object sender, DispatcherUnhandledExceptionEventArgs e)
        {
            LogException("Dispatcher exception", e.Exception);

            // Show error to user
            MessageBox.Show(
                $"An error occurred: {e.Exception.Message}",
                "Error",
                MessageBoxButton.OK,
                MessageBoxImage.Warning);

            // Mark as handled to prevent crash
            e.Handled = true;
        }

        /// <summary>
        /// Logs an exception
        /// </summary>
        private void LogException(string context, Exception? exception)
        {
            if (exception == null) return;

            try
            {
                var logger = Services?.GetService<ILogger<App>>();
                logger?.LogError(exception, "{Context}", context);
            }
            catch
            {
                // Fallback to debug output if logging fails
                System.Diagnostics.Debug.WriteLine($"{context}: {exception}");
            }
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\MainWindow.xaml.cs
================================================================================

// src\CamBridge.Config\MainWindow.xaml.cs
// Version: 0.7.7
// Description: Main window code-behind with dynamic version display

using System;
using System.Reflection;
using System.Windows;
using System.Windows.Controls;
using Microsoft.Extensions.DependencyInjection;
using ModernWpf.Controls;
using CamBridge.Config.Services;
using CamBridge.Config.ViewModels;
using CamBridge.Config.Views;

namespace CamBridge.Config
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private readonly INavigationService _navigationService;
        private readonly MainViewModel _viewModel;

        public MainWindow()
        {
            InitializeComponent();

            // Set version dynamically from assembly
            var version = Assembly.GetExecutingAssembly()
                .GetCustomAttribute<AssemblyInformationalVersionAttribute>()
                ?.InformationalVersion ?? "Unknown";

            Title = $"CamBridge Configuration v{version}";

            // Get services from DI
            var app = (App)App.Current;
            _navigationService = app.Host!.Services.GetRequiredService<INavigationService>();
            _viewModel = app.Host!.Services.GetRequiredService<MainViewModel>();

            DataContext = _viewModel;

            // Initialize navigation
            if (_navigationService is NavigationService navService)
            {
                navService.SetFrame(ContentFrame);
            }

            // Navigate to dashboard on startup
            NavView.SelectedItem = NavView.MenuItems[0];
        }

        private void NavigationView_SelectionChanged(NavigationView sender, NavigationViewSelectionChangedEventArgs args)
        {
            if (args.SelectedItem is NavigationViewItem item)
            {
                var tag = item.Tag?.ToString();
                if (!string.IsNullOrEmpty(tag))
                {
                    _navigationService.NavigateTo(tag);
                }
            }
        }

        protected override void OnClosed(EventArgs e)
        {
            base.OnClosed(e);

            // Clean shutdown
            Application.Current.Shutdown();
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\Converters\ValueConverters.cs
================================================================================

// src/CamBridge.Config/Converters/ValueConverters.cs
// Version: 0.7.7
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;
using System.Windows.Media;

namespace CamBridge.Config.Converters
{
    /// <summary>
    /// Converts boolean values to Visibility
    /// </summary>
    public class BooleanToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool boolValue = value is bool b && b;
            bool invert = parameter as string == "Inverse";

            if (invert)
                return boolValue ? Visibility.Collapsed : Visibility.Visible;
            else
                return boolValue ? Visibility.Visible : Visibility.Collapsed;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Inverts boolean to visibility conversion
    /// </summary>
    public class InverseBooleanToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool boolValue = value is bool b && b;
            return boolValue ? Visibility.Collapsed : Visibility.Visible;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts numeric values greater than zero to true
    /// </summary>
    public class GreaterThanZeroConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value == null) return false;

            try
            {
                double numValue = System.Convert.ToDouble(value);
                return numValue > 0;
            }
            catch
            {
                return false;
            }
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts null values to Visibility
    /// </summary>
    public class NullToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool isNull = value == null;
            bool invert = parameter as string == "Inverse";

            if (invert)
                return isNull ? Visibility.Visible : Visibility.Collapsed;
            else
                return isNull ? Visibility.Collapsed : Visibility.Visible;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts zero values to Visibility
    /// </summary>
    public class ZeroToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool isZero = false;

            if (value != null)
            {
                try
                {
                    double numValue = System.Convert.ToDouble(value);
                    isZero = Math.Abs(numValue) < 0.0001; // Floating point comparison
                }
                catch
                {
                    // If conversion fails, treat as non-zero
                }
            }

            bool invert = parameter as string == "Inverse";

            if (invert)
                return isZero ? Visibility.Collapsed : Visibility.Visible;
            else
                return isZero ? Visibility.Visible : Visibility.Collapsed;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts error count to color brush
    /// </summary>
    public class ErrorCountToColorConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            int errorCount = 0;

            if (value != null)
            {
                try
                {
                    errorCount = System.Convert.ToInt32(value);
                }
                catch
                {
                    // Default to 0 if conversion fails
                }
            }

            // Return red color if errors exist, otherwise default
            if (errorCount > 0)
            {
                return new SolidColorBrush(Color.FromRgb(255, 107, 107)); // Light red
            }

            return DependencyProperty.UnsetValue; // Use default style
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts boolean values to inverse boolean
    /// </summary>
    public class InverseBooleanConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return !(value is bool b && b);
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return !(value is bool b && b);
        }
    }

    /// <summary>
    /// Converts empty string to visibility
    /// </summary>
    public class EmptyStringToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            string? str = value as string;
            bool isEmpty = string.IsNullOrWhiteSpace(str);
            bool invert = parameter as string == "Inverse";

            if (invert)
                return isEmpty ? Visibility.Visible : Visibility.Collapsed;
            else
                return isEmpty ? Visibility.Collapsed : Visibility.Visible;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts service status to color
    /// </summary>
    public class ServiceStatusToColorConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            string status = value as string ?? "";

            return status.ToLower() switch
            {
                "running" => new SolidColorBrush(Colors.Green),
                "stopped" => new SolidColorBrush(Colors.Red),
                "paused" => new SolidColorBrush(Colors.Orange),
                _ => new SolidColorBrush(Colors.Gray)
            };
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts seconds to milliseconds
    /// </summary>
    public class SecondsToMillisecondsConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is double seconds)
                return seconds * 1000;
            if (value is int intSeconds)
                return intSeconds * 1000;
            return 0;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is double milliseconds)
                return milliseconds / 1000;
            if (value is int intMilliseconds)
                return intMilliseconds / 1000;
            return 0;
        }
    }

    /// <summary>
    /// Converts enum value to boolean based on parameter
    /// </summary>
    public class EnumToBooleanConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value == null || parameter == null)
                return false;

            string enumValue = value.ToString();
            string targetValue = parameter.ToString();

            return enumValue.Equals(targetValue, StringComparison.InvariantCultureIgnoreCase);
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is bool isChecked && isChecked)
            {
                if (parameter != null && targetType.IsEnum)
                {
                    return Enum.Parse(targetType, parameter.ToString());
                }
            }

            return Binding.DoNothing;
        }
    }

    /// <summary>
    /// Converter for file selection dialogs
    /// </summary>
    public class FileSelectConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            // Simply pass through the value
            return value;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            // Simply pass through the value
            return value;
        }
    }

    /// <summary>
    /// Multi-value boolean OR converter
    /// </summary>
    public class MultiBooleanOrConverter : IMultiValueConverter
    {
        public object Convert(object[] values, Type targetType, object parameter, CultureInfo culture)
        {
            if (values == null || values.Length == 0)
                return false;

            foreach (var value in values)
            {
                if (value is bool b && b)
                    return true;
            }

            return false;
        }

        public object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts enum types to collection for ComboBox binding
    /// </summary>
    public class EnumToCollectionConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return Enum.GetValues(parameter as Type ?? value?.GetType() ?? typeof(object));
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts file size to human-readable format
    /// </summary>
    public class FileSizeConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value == null) return "0 B";

            long bytes = System.Convert.ToInt64(value);
            string[] sizes = { "B", "KB", "MB", "GB", "TB" };
            int order = 0;
            double size = bytes;

            while (size >= 1024 && order < sizes.Length - 1)
            {
                order++;
                size /= 1024;
            }

            return $"{size:0.##} {sizes[order]}";
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Converts TimeSpan to readable string
    /// </summary>
    public class TimeSpanToStringConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is TimeSpan timeSpan)
            {
                if (timeSpan.TotalDays >= 1)
                    return $"{(int)timeSpan.TotalDays}d {timeSpan.Hours}h {timeSpan.Minutes}m";
                else if (timeSpan.TotalHours >= 1)
                    return $"{(int)timeSpan.TotalHours}h {timeSpan.Minutes}m";
                else
                    return $"{timeSpan.Minutes}m {timeSpan.Seconds}s";
            }
            return "0s";
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Multi-value boolean AND converter
    /// </summary>
    public class MultiBooleanAndConverter : IMultiValueConverter
    {
        public object Convert(object[] values, Type targetType, object parameter, CultureInfo culture)
        {
            if (values == null || values.Length == 0)
                return false;

            foreach (var value in values)
            {
                if (!(value is bool b) || !b)
                    return false;
            }

            return true;
        }

        public object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    /// <summary>
    /// Null and boolean AND converter
    /// </summary>
    public class NullBooleanAndConverter : IMultiValueConverter
    {
        public object Convert(object[] values, Type targetType, object parameter, CultureInfo culture)
        {
            if (values == null || values.Length < 2)
                return false;

            // First value should not be null, second should be true
            return values[0] != null && values[1] is bool b && b;
        }

        public object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\Dialogs\DicomTagBrowserDialog.xaml.cs
================================================================================

// src/CamBridge.Config/Dialogs/DicomTagBrowserDialog.xaml.cs
// Version: 0.5.26
// Fixed: Nullable warnings resolved

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.Versioning;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using ModernWpf.Controls;
// Use alias to avoid conflicts
using CoreDicomTag = CamBridge.Core.ValueObjects.DicomTag;

namespace CamBridge.Config.Dialogs
{
    /// <summary>
    /// Dialog for browsing and selecting DICOM tags with search functionality
    /// </summary>
    [SupportedOSPlatform("windows")]
    public partial class DicomTagBrowserDialog : Window, INotifyPropertyChanged
    {
        #region Properties

        private string? _searchText;
        public string? SearchText
        {
            get => _searchText;
            set
            {
                if (_searchText != value)
                {
                    _searchText = value;
                    OnPropertyChanged();
                    UpdateFilter();
                }
            }
        }

        public CoreDicomTag? SelectedTag { get; private set; }

        private CollectionViewSource _tagsViewSource = null!;
        public ICollectionView TagsView => _tagsViewSource.View;

        private List<DicomTagInfo> _allTags = null!;

        #endregion

        public DicomTagBrowserDialog()
        {
            InitializeComponent();
            DataContext = this;

            // Initialize collections before use
            _allTags = new List<DicomTagInfo>();
            _tagsViewSource = new CollectionViewSource();

            LoadDicomTags();
            SearchBox.Focus();
        }

        #region Initialization

        private void LoadDicomTags()
        {
            // Clear and reinitialize
            _allTags.Clear();

            // Patient Module
            AddTag("Patient", CoreDicomTag.PatientModule.PatientName, "Patient's Name", "PN");
            AddTag("Patient", CoreDicomTag.PatientModule.PatientID, "Patient ID", "LO");
            AddTag("Patient", CoreDicomTag.PatientModule.PatientBirthDate, "Patient's Birth Date", "DA");
            AddTag("Patient", CoreDicomTag.PatientModule.PatientSex, "Patient's Sex", "CS");
            AddTag("Patient", CoreDicomTag.PatientModule.OtherPatientIDs, "Other Patient IDs", "LO");
            AddTag("Patient", CoreDicomTag.PatientModule.PatientComments, "Patient Comments", "LT");

            // Study Module
            AddTag("Study", CoreDicomTag.StudyModule.StudyInstanceUID, "Study Instance UID", "UI");
            AddTag("Study", CoreDicomTag.StudyModule.StudyDate, "Study Date", "DA");
            AddTag("Study", CoreDicomTag.StudyModule.StudyTime, "Study Time", "TM");
            AddTag("Study", CoreDicomTag.StudyModule.StudyID, "Study ID", "SH");
            AddTag("Study", CoreDicomTag.StudyModule.AccessionNumber, "Accession Number", "SH");
            AddTag("Study", CoreDicomTag.StudyModule.StudyDescription, "Study Description", "LO");
            AddTag("Study", CoreDicomTag.StudyModule.ReferringPhysicianName, "Referring Physician's Name", "PN");

            // Series Module
            AddTag("Series", CoreDicomTag.SeriesModule.SeriesInstanceUID, "Series Instance UID", "UI");
            AddTag("Series", CoreDicomTag.SeriesModule.SeriesNumber, "Series Number", "IS");
            AddTag("Series", CoreDicomTag.SeriesModule.SeriesDate, "Series Date", "DA");
            AddTag("Series", CoreDicomTag.SeriesModule.SeriesTime, "Series Time", "TM");
            AddTag("Series", CoreDicomTag.SeriesModule.SeriesDescription, "Series Description", "LO");
            AddTag("Series", CoreDicomTag.SeriesModule.Modality, "Modality", "CS");

            // Instance Module (was ImageModule)
            AddTag("Instance", CoreDicomTag.InstanceModule.SOPInstanceUID, "SOP Instance UID", "UI");
            AddTag("Instance", CoreDicomTag.InstanceModule.InstanceNumber, "Instance Number", "IS");
            AddTag("Instance", CoreDicomTag.InstanceModule.ContentDate, "Content Date", "DA");
            AddTag("Instance", CoreDicomTag.InstanceModule.ContentTime, "Content Time", "TM");
            AddTag("Instance", CoreDicomTag.InstanceModule.AcquisitionDateTime, "Acquisition DateTime", "DT");

            // Equipment Module
            AddTag("Equipment", CoreDicomTag.EquipmentModule.Manufacturer, "Manufacturer", "LO");
            AddTag("Equipment", CoreDicomTag.EquipmentModule.InstitutionName, "Institution Name", "LO");
            AddTag("Equipment", CoreDicomTag.EquipmentModule.StationName, "Station Name", "SH");
            AddTag("Equipment", CoreDicomTag.EquipmentModule.ManufacturerModelName, "Manufacturer's Model Name", "LO");
            AddTag("Equipment", CoreDicomTag.EquipmentModule.SoftwareVersions, "Software Versions", "LO");

            // Setup CollectionViewSource with grouping
            _tagsViewSource = new CollectionViewSource { Source = _allTags };
            _tagsViewSource.GroupDescriptions.Add(new PropertyGroupDescription("Module"));
            _tagsViewSource.SortDescriptions.Add(new SortDescription("Module", ListSortDirection.Ascending));
            _tagsViewSource.SortDescriptions.Add(new SortDescription("Name", ListSortDirection.Ascending));

            // Notify UI
            OnPropertyChanged(nameof(TagsView));
        }

        private void AddTag(string module, CoreDicomTag tag, string name, string vr)
        {
            _allTags.Add(new DicomTagInfo
            {
                Module = module,
                Tag = tag,
                Name = name,
                VR = vr,
                TagString = tag.ToString(),
                DisplayText = $"{tag} - {name} ({vr})"
            });
        }

        #endregion

        #region Search and Filter

        private void UpdateFilter()
        {
            if (TagsView == null) return;

            if (string.IsNullOrWhiteSpace(SearchText))
            {
                TagsView.Filter = null;
            }
            else
            {
                TagsView.Filter = obj =>
                {
                    if (obj is DicomTagInfo tagInfo)
                    {
                        var searchLower = SearchText.ToLower();
                        return tagInfo.Name.ToLower().Contains(searchLower) ||
                               tagInfo.TagString.Contains(searchLower) ||
                               tagInfo.Module.ToLower().Contains(searchLower) ||
                               tagInfo.VR.ToLower().Contains(searchLower);
                    }
                    return false;
                };
            }

            // Select first item if any
            TagsView.MoveCurrentToFirst();
        }

        #endregion

        #region Event Handlers

        private void OkButton_Click(object sender, RoutedEventArgs e)
        {
            if (TagsListView.SelectedItem is DicomTagInfo tagInfo)
            {
                SelectedTag = tagInfo.Tag;
                DialogResult = true;
            }
        }

        private void CancelButton_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
        }

        private void TagsListView_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            if (TagsListView.SelectedItem != null)
            {
                OkButton_Click(sender, e);
            }
        }

        private void SearchBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Down && TagsListView.Items.Count > 0)
            {
                TagsListView.Focus();
                TagsListView.SelectedIndex = 0;
            }
        }

        private void Window_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Escape)
            {
                DialogResult = false;
            }
            else if (e.Key == Key.Enter && TagsListView.SelectedItem != null)
            {
                OkButton_Click(sender, e);
            }
        }

        #endregion

        #region INotifyPropertyChanged

        public event PropertyChangedEventHandler? PropertyChanged;

        protected void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion

        #region Inner Classes

        /// <summary>
        /// DICOM tag information for display
        /// </summary>
        public class DicomTagInfo
        {
            public string Module { get; set; } = string.Empty;
            public CoreDicomTag Tag { get; set; } = null!;
            public string Name { get; set; } = string.Empty;
            public string VR { get; set; } = string.Empty;
            public string TagString { get; set; } = string.Empty;
            public string DisplayText { get; set; } = string.Empty;
        }

        #endregion
    }
}


================================================================================
FILE: src\CamBridge.Config\Extensions\MappingConfigurationExtensions.cs
================================================================================

// File: src/CamBridge.Config/Extensions/MappingConfigurationExtensions.cs
// Version: 0.5.24
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions
// Modified: 2025-06-04
// Status: Development/Local

using System.Threading.Tasks;
using CamBridge.Core.Interfaces;
using CamBridge.Infrastructure.Services;

namespace CamBridge.Config.Extensions
{
    /// <summary>
    /// Extension methods for MappingConfigurationLoader to provide UI-expected methods
    /// </summary>
    public static class MappingConfigurationExtensions
    {
        /// <summary>
        /// Load configuration from file (UI-expected method name)
        /// </summary>
        public static async Task<IMappingConfiguration> LoadFromFileAsync(
            this MappingConfigurationLoader loader,
            string filePath)
        {
            await loader.LoadConfigurationAsync(filePath);
            return loader;
        }

        /// <summary>
        /// Save configuration to file (UI-expected method name)
        /// </summary>
        public static async Task SaveToFileAsync(
            this MappingConfigurationLoader loader,
            IMappingConfiguration config,
            string filePath)
        {
            // The loader itself implements IMappingConfiguration
            // So we just save its current rules
            await loader.SaveConfigurationAsync(loader.GetMappingRules(), filePath);
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\Extensions\MappingRuleExtensions.cs
================================================================================

// File: src/CamBridge.Config/Extensions/MappingRuleExtensions.cs
// Version: 0.6.2
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions
// Modified: 2025-06-07
// Status: Development/Local

using System;
using CamBridge.Core;

namespace CamBridge.Config.Extensions
{
    /// <summary>
    /// Extension methods for MappingRule to support UI-specific functionality
    /// </summary>
    public static class MappingRuleExtensions
    {
        // HINWEIS: Die ApplyTransform Methode ist jetzt direkt in MappingRule.cs implementiert!
        // Diese Klasse kÃ¶nnte gelÃ¶scht werden, oder wir behalten sie fÃ¼r andere UI-spezifische Extensions

        /// <summary>
        /// Gets a display-friendly description of the transform
        /// </summary>
        public static string GetTransformDescription(this MappingRule rule)
        {
            return rule.TransformEnum switch
            {
                ValueTransform.None => "No transformation",
                ValueTransform.DateToDicom => "Convert date to DICOM format (YYYYMMDD)",
                ValueTransform.TimeToDicom => "Convert time to DICOM format (HHMMSS)",
                ValueTransform.DateTimeToDicom => "Convert datetime to DICOM format",
                ValueTransform.MapGender => "Map gender to DICOM values (M/F/O)",
                ValueTransform.RemovePrefix => "Remove prefix from value",
                ValueTransform.ExtractDate => "Extract date from datetime",
                ValueTransform.ExtractTime => "Extract time from datetime",
                ValueTransform.ToUpperCase => "Convert to uppercase",
                ValueTransform.ToLowerCase => "Convert to lowercase",
                ValueTransform.Trim => "Remove leading/trailing spaces",
                _ => "Unknown transformation"
            };
        }

        /// <summary>
        /// Validates if the rule is properly configured
        /// </summary>
        public static bool IsValid(this MappingRule rule)
        {
            if (string.IsNullOrWhiteSpace(rule.SourceField))
                return false;

            if (string.IsNullOrWhiteSpace(rule.DicomTag))
                return false;

            // Validate DICOM tag format (XXXX,XXXX)
            if (!System.Text.RegularExpressions.Regex.IsMatch(rule.DicomTag, @"^\([0-9A-Fa-f]{4},[0-9A-Fa-f]{4}\)$"))
                return false;

            return true;
        }

        /// <summary>
        /// Gets a UI-friendly display name for the rule
        /// </summary>
        public static string GetDisplayName(this MappingRule rule)
        {
            if (!string.IsNullOrWhiteSpace(rule.Description))
                return rule.Description;

            if (!string.IsNullOrWhiteSpace(rule.Name))
                return rule.Name;

            return $"{rule.SourceType}.{rule.SourceField} â†’ {rule.DicomTag}";
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\Helpers\PasswordBoxHelper.cs
================================================================================

// src\CamBridge.Config\Helpers\PasswordBoxHelper.cs
// Version: 0.5.26
// Helper for binding PasswordBox (which doesn't support direct binding)

using System.Windows;
using System.Windows.Controls;

namespace CamBridge.Config.Helpers
{
    /// <summary>
    /// Helper class to enable binding on PasswordBox
    /// </summary>
    public static class PasswordBoxHelper
    {
        public static readonly DependencyProperty BoundPasswordProperty =
            DependencyProperty.RegisterAttached("BoundPassword", typeof(string), typeof(PasswordBoxHelper),
                new PropertyMetadata(string.Empty, OnBoundPasswordChanged));

        public static readonly DependencyProperty BindPasswordProperty =
            DependencyProperty.RegisterAttached("BindPassword", typeof(bool), typeof(PasswordBoxHelper),
                new PropertyMetadata(false, OnBindPasswordChanged));

        private static readonly DependencyProperty UpdatingPasswordProperty =
            DependencyProperty.RegisterAttached("UpdatingPassword", typeof(bool), typeof(PasswordBoxHelper),
                new PropertyMetadata(false));

        public static void SetBindPassword(DependencyObject dp, bool value)
        {
            dp.SetValue(BindPasswordProperty, value);
        }

        public static bool GetBindPassword(DependencyObject dp)
        {
            return (bool)dp.GetValue(BindPasswordProperty);
        }

        public static string GetBoundPassword(DependencyObject dp)
        {
            return (string)dp.GetValue(BoundPasswordProperty);
        }

        public static void SetBoundPassword(DependencyObject dp, string value)
        {
            dp.SetValue(BoundPasswordProperty, value);
        }

        private static bool GetUpdatingPassword(DependencyObject dp)
        {
            return (bool)dp.GetValue(UpdatingPasswordProperty);
        }

        private static void SetUpdatingPassword(DependencyObject dp, bool value)
        {
            dp.SetValue(UpdatingPasswordProperty, value);
        }

        private static void OnBoundPasswordChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            if (d is PasswordBox passwordBox)
            {
                // Disconnect the handler while we're updating
                passwordBox.PasswordChanged -= HandlePasswordChanged;

                if (!GetUpdatingPassword(passwordBox))
                {
                    passwordBox.Password = (string)e.NewValue;
                }

                passwordBox.PasswordChanged += HandlePasswordChanged;
            }
        }

        private static void OnBindPasswordChanged(DependencyObject dp, DependencyPropertyChangedEventArgs e)
        {
            if (dp is PasswordBox passwordBox)
            {
                if ((bool)e.OldValue)
                {
                    passwordBox.PasswordChanged -= HandlePasswordChanged;
                }

                if ((bool)e.NewValue)
                {
                    passwordBox.PasswordChanged += HandlePasswordChanged;
                }
            }
        }

        private static void HandlePasswordChanged(object sender, RoutedEventArgs e)
        {
            if (sender is PasswordBox passwordBox)
            {
                SetUpdatingPassword(passwordBox, true);
                SetBoundPassword(passwordBox, passwordBox.Password);
                SetUpdatingPassword(passwordBox, false);
            }
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\Models\DeadLetterModels.cs
================================================================================

// src\CamBridge.Config\Models\DeadLetterModels.cs
// Version: 0.7.1
// Description: Dead letter queue models for API communication
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using System;
using System.Collections.Generic;

namespace CamBridge.Config.Models
{
    /// <summary>
    /// Dead letter item from API
    /// </summary>
    public class DeadLetterItemModel
    {
        public Guid Id { get; set; }
        public string FileName { get; set; } = string.Empty;
        public string FilePath { get; set; } = string.Empty;
        public string PipelineName { get; set; } = string.Empty;
        public DateTime FailedAt { get; set; }
        public DateTime FirstAttempt { get; set; }
        public DateTime LastAttempt { get; set; }
        public string ErrorMessage { get; set; } = string.Empty;
        public int RetryCount { get; set; }
        public int AttemptCount { get; set; }
        public string OriginalPath { get; set; } = string.Empty;
        public long FileSize { get; set; }
    }

    /// <summary>
    /// Detailed statistics from API
    /// </summary>
    public class DetailedStatisticsModel
    {
        public int TotalProcessed { get; set; }
        public int TotalSuccessful { get; set; }
        public int TotalFailed { get; set; }
        public int TotalQueued { get; set; }
        public double AverageProcessingTimeMs { get; set; }
        public DateTime LastUpdate { get; set; }

        // Per-pipeline statistics
        public Dictionary<string, PipelineStatistics>? PipelineStats { get; set; }
    }

    /// <summary>
    /// Statistics for a single pipeline
    /// </summary>
    public class PipelineStatistics
    {
        public string PipelineId { get; set; } = string.Empty;
        public string PipelineName { get; set; } = string.Empty;
        public int Processed { get; set; }
        public int Successful { get; set; }
        public int Failed { get; set; }
        public int Queued { get; set; }
        public double SuccessRate { get; set; }
    }
}


================================================================================
FILE: src\CamBridge.Config\Models\ServiceStatusModel.cs
================================================================================

// src\CamBridge.Config\Models\ServiceStatusModel.cs
// Version: 0.7.1
// Description: Service status model with config path information
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using System;
using System.Collections.Generic;

namespace CamBridge.Config.Models
{
    /// <summary>
    /// Service status information from API
    /// </summary>
    public class ServiceStatusModel
    {
        public string ServiceStatus { get; set; } = "Unknown";
        public string Version { get; set; } = "Unknown";
        public string Mode { get; set; } = "Unknown";
        public TimeSpan Uptime { get; set; }

        // Config information (new in v0.7.1)
        public string? ConfigPath { get; set; }
        public bool ConfigExists { get; set; }

        // Pipeline statistics
        public int PipelineCount { get; set; }
        public int ActivePipelines { get; set; }
        public int QueueLength { get; set; }
        public int ActiveProcessing { get; set; }
        public int TotalSuccessful { get; set; }
        public int TotalFailed { get; set; }
        public double SuccessRate { get; set; }

        // Individual pipeline data
        public List<PipelineStatusData>? Pipelines { get; set; }

        // Configuration info
        public ServiceConfigurationInfo? Configuration { get; set; }
    }

    /// <summary>
    /// Individual pipeline status from service
    /// </summary>
    public class PipelineStatusData
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public bool IsActive { get; set; }
        public int QueueLength { get; set; }
        public int ActiveProcessing { get; set; }
        public int TotalProcessed { get; set; }
        public int TotalSuccessful { get; set; }
        public int TotalFailed { get; set; }
        public List<string>? WatchedFolders { get; set; }
    }

    /// <summary>
    /// Service configuration information
    /// </summary>
    public class ServiceConfigurationInfo
    {
        public string? DefaultOutputFolder { get; set; }
        public string? ExifToolPath { get; set; }
        public string? Version { get; set; }
    }
}


================================================================================
FILE: src\CamBridge.Config\obj\x64\Debug\net8.0-windows\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
================================================================================

// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]


================================================================================
FILE: src\CamBridge.Config\obj\x64\Debug\net8.0-windows\CamBridge.Config.AssemblyInfo.cs
================================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Ã„nderungen an dieser Datei kÃ¶nnen falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Claude\'s Improbably Reliable Software Solutions")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyCopyrightAttribute("Â© 2025 Claude\'s Improbably Reliable Software Solutions")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("0.7.13.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("0.7.13+bd6c551932659d66de143f36c1a1a04233329e68")]
[assembly: System.Reflection.AssemblyProductAttribute("CamBridge Medical Image Converter")]
[assembly: System.Reflection.AssemblyTitleAttribute("CamBridge.Config")]
[assembly: System.Reflection.AssemblyVersionAttribute("0.7.13.0")]
[assembly: System.Reflection.AssemblyMetadataAttribute("RepositoryUrl", "https://github.com/yourusername/CamBridge")]
[assembly: System.Resources.NeutralResourcesLanguageAttribute("en-US")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Von der MSBuild WriteCodeFragment-Klasse generiert.



================================================================================
FILE: src\CamBridge.Config\obj\x64\Release\net8.0-windows\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
================================================================================

// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]


================================================================================
FILE: src\CamBridge.Config\obj\x64\Release\net8.0-windows\CamBridge.Config.AssemblyInfo.cs
================================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Ã„nderungen an dieser Datei kÃ¶nnen falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Claude\'s Improbably Reliable Software Solutions")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyCopyrightAttribute("Â© 2025 Claude\'s Improbably Reliable Software Solutions")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("0.7.13.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("0.7.13+bd6c551932659d66de143f36c1a1a04233329e68")]
[assembly: System.Reflection.AssemblyProductAttribute("CamBridge Medical Image Converter")]
[assembly: System.Reflection.AssemblyTitleAttribute("CamBridge.Config")]
[assembly: System.Reflection.AssemblyVersionAttribute("0.7.13.0")]
[assembly: System.Reflection.AssemblyMetadataAttribute("RepositoryUrl", "https://github.com/yourusername/CamBridge")]
[assembly: System.Resources.NeutralResourcesLanguageAttribute("en-US")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Von der MSBuild WriteCodeFragment-Klasse generiert.



================================================================================
FILE: src\CamBridge.Config\obj\x64\Release\net8.0-windows\CamBridge.Config_jrvm2coz_wpftmp.AssemblyInfo.cs
================================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Ã„nderungen an dieser Datei kÃ¶nnen falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Claude\'s Improbably Reliable Software Solutions")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyCopyrightAttribute("Â© 2025 Claude\'s Improbably Reliable Software Solutions")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("0.7.13.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("0.7.13+bd6c551932659d66de143f36c1a1a04233329e68")]
[assembly: System.Reflection.AssemblyProductAttribute("CamBridge Medical Image Converter")]
[assembly: System.Reflection.AssemblyTitleAttribute("CamBridge.Config")]
[assembly: System.Reflection.AssemblyVersionAttribute("0.7.13.0")]
[assembly: System.Reflection.AssemblyMetadataAttribute("RepositoryUrl", "https://github.com/yourusername/CamBridge")]
[assembly: System.Resources.NeutralResourcesLanguageAttribute("en-US")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Von der MSBuild WriteCodeFragment-Klasse generiert.



================================================================================
FILE: src\CamBridge.Config\Services\ConfigurationService.cs
================================================================================

// src\CamBridge.Config\Services\ConfigurationService.cs
// Version: 0.7.10
// Description: Simplified configuration service - V2 format ONLY!
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using CamBridge.Core;                    // FÃ¼r alle Core-Klassen
using CamBridge.Core.Infrastructure;     // FÃ¼r ConfigurationPaths
using System.Diagnostics;  // FÃ¼r Debug.WriteLine

namespace CamBridge.Config.Services
{
    /// <summary>
    /// Configuration service using centralized config management
    /// KISS: One config path, one format (V2 with CamBridge wrapper)!
    /// </summary>
    public class ConfigurationService : IConfigurationService
    {
        private readonly JsonSerializerOptions _jsonOptions;
        private readonly string _configPath;

        public ConfigurationService()
        {
            _jsonOptions = new JsonSerializerOptions
            {
                WriteIndented = true,
                PropertyNameCaseInsensitive = true
            };

            // SINGLE SOURCE OF TRUTH!
            _configPath = ConfigurationPaths.GetPrimaryConfigPath();

            Debug.WriteLine("=== ConfigurationService INIT ===");
            Debug.WriteLine($"Config Path: {_configPath}");
            Debug.WriteLine($"Config Exists: {File.Exists(_configPath)}");
            Debug.WriteLine("=================================");
        }

        public async Task<T?> LoadConfigurationAsync<T>() where T : class
        {
            Debug.WriteLine($"\n=== LOADING {typeof(T).Name} ===");
            Debug.WriteLine($"From: {_configPath}");

            try
            {
                if (!File.Exists(_configPath))
                {
                    Debug.WriteLine("Config file not found - will be created by InitializePrimaryConfig");
                    return null;
                }

                var json = await File.ReadAllTextAsync(_configPath);
                Debug.WriteLine($"Read {json.Length} characters");

                // Special handling for CamBridgeSettingsV2 - ALWAYS load from "CamBridge" section
                if (typeof(T) == typeof(CamBridgeSettingsV2))
                {
                    using var doc = JsonDocument.Parse(json);
                    var root = doc.RootElement;

                    // We REQUIRE a "CamBridge" section - no fallbacks!
                    if (!root.TryGetProperty("CamBridge", out var cambridgeSection))
                    {
                        throw new InvalidOperationException(
                            "Configuration file is missing required 'CamBridge' section! " +
                            "This is not a valid V2 configuration file.");
                    }

                    // Deserialize from the CamBridge section
                    var settings = JsonSerializer.Deserialize<CamBridgeSettingsV2>(
                        cambridgeSection.GetRawText(),
                        _jsonOptions);

                    if (settings == null)
                    {
                        throw new InvalidOperationException(
                            "Failed to deserialize CamBridge section to CamBridgeSettingsV2");
                    }

                    Debug.WriteLine($"âœ… Loaded settings from CamBridge section");
                    Debug.WriteLine($"   Version: {settings.Version}");
                    Debug.WriteLine($"   Pipelines: {settings.Pipelines.Count}");
                    Debug.WriteLine($"   MappingSets: {settings.MappingSets.Count}");

                    return settings as T;
                }
                else
                {
                    // Generic deserialization (for other types if needed)
                    var config = JsonSerializer.Deserialize<T>(json, _jsonOptions);
                    if (config != null)
                    {
                        Debug.WriteLine($"âœ… Loaded {typeof(T).Name} successfully");
                        return config;
                    }
                }

                Debug.WriteLine("âŒ Failed to deserialize config");
                return null;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"ERROR loading config: {ex.Message}");
                Debug.WriteLine($"Stack: {ex.StackTrace}");
                throw;
            }
        }

        public async Task SaveConfigurationAsync<T>(T configuration) where T : class
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            try
            {
                Debug.WriteLine($"\n=== SAVING {typeof(T).Name} ===");
                Debug.WriteLine($"To: {_configPath}");

                // Create backup before saving
                // Create backup before saving
                if (File.Exists(_configPath))
                {
                    try
                    {
                        // Simple inline backup implementation
                        var backupPath = $"{_configPath}.backup_{DateTime.Now:yyyyMMdd_HHmmss}";
                        File.Copy(_configPath, backupPath, true);
                        Debug.WriteLine($"Created backup: {backupPath}");
                    }
                    catch (Exception backupEx)
                    {
                        Debug.WriteLine($"Backup failed (continuing): {backupEx.Message}");
                    }
                }

                // For CamBridgeSettingsV2, we ALWAYS wrap it in the CamBridge section
                if (configuration is CamBridgeSettingsV2 v2Settings)
                {
                    // Create wrapper object with proper V2 format
                    var wrapper = new Dictionary<string, object>
                    {
                        ["CamBridge"] = v2Settings,
                        ["Logging"] = new
                        {
                            LogLevel = new
                            {
                                Default = "Information",
                                Microsoft = "Warning",
                                CamBridge = "Information"
                            }
                        }
                    };

                    var json = JsonSerializer.Serialize(wrapper, _jsonOptions);
                    await File.WriteAllTextAsync(_configPath, json);

                    Debug.WriteLine($"âœ… Config saved with CamBridge wrapper ({json.Length} characters)");
                    Debug.WriteLine($"   Pipelines saved: {v2Settings.Pipelines.Count}");
                }
                else
                {
                    // Generic save (shouldn't happen in normal use)
                    var json = JsonSerializer.Serialize(configuration, _jsonOptions);
                    await File.WriteAllTextAsync(_configPath, json);
                    Debug.WriteLine($"âœ… Config saved successfully ({json.Length} characters)");
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"ERROR saving config: {ex.Message}");
                throw new InvalidOperationException($"Failed to save configuration to {_configPath}", ex);
            }
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\Services\HttpApiService.cs
================================================================================

/**************************************************************************
*  HttpApiService.cs                                                      *
*  PATH: src\CamBridge.Config\Services\HttpApiService.cs                  *
*  VERSION: 0.7.11 | SIZE: ~7KB | MODIFIED: 2025-06-13                   *
*                                                                         *
*  DESCRIPTION: HTTP client for CamBridge Service API with PORT FIX      *
*  Copyright (c) 2025 Claude's Improbably Reliable Software Solutions     *
**************************************************************************/

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Net.Http;
using System.Text.Json;
using System.Threading.Tasks;
using CamBridge.Config.Models;

namespace CamBridge.Config.Services
{
    /// <summary>
    /// KISS implementation of IApiService - now with correct port!
    /// </summary>
    public class HttpApiService : IApiService
    {
        private readonly HttpClient _httpClient;

        public HttpApiService(HttpClient httpClient, object? unused = null)
        {
            _httpClient = httpClient;
            // CRITICAL FIX: Use port 5111 to match Service configuration!
            _httpClient.BaseAddress = new Uri("http://localhost:5111/"); // FIX: Was 5050!
            _httpClient.Timeout = TimeSpan.FromSeconds(5);
        }

        public async Task<ServiceStatusModel?> GetStatusAsync()
        {
            return await TryGetAsync<ServiceStatusModel>("api/status");
        }

        public async Task<bool> IsServiceAvailableAsync()
        {
            return await TryGetAsync<object>("health") != null;
        }

        public async Task<DetailedStatisticsModel?> GetStatisticsAsync()
        {
            // KISS: Not implemented yet, return null
            await Task.CompletedTask;
            return null;
        }

        /// <summary>
        /// KISS Helper: One method to rule them all!
        /// </summary>
        private async Task<T?> TryGetAsync<T>(string endpoint) where T : class
        {
            try
            {
                var response = await _httpClient.GetAsync(endpoint);
                if (!response.IsSuccessStatusCode)
                {
                    Debug.WriteLine($"API call failed ({endpoint}): {response.StatusCode}");
                    return null;
                }

                var json = await response.Content.ReadAsStringAsync();
                Debug.WriteLine($"API Response ({endpoint}): {json.Length} characters");

                var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };

                return JsonSerializer.Deserialize<T>(json, options);
            }
            catch (HttpRequestException httpEx)
            {
                Debug.WriteLine($"HTTP error ({endpoint}): {httpEx.Message}");
                return null;
            }
            catch (TaskCanceledException)
            {
                Debug.WriteLine($"API call timeout ({endpoint})");
                return null;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"API call failed ({endpoint}): {ex.Message}");
                return null;
            }
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\Services\IApiService.cs
================================================================================

// src/CamBridge.Config/Services/IApiService.cs
// Version: 0.7.8
// Description: Interface for CamBridge Service API - KISS without DeadLetter!
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using CamBridge.Config.Models;

namespace CamBridge.Config.Services
{
    /// <summary>
    /// Interface for CamBridge Service API communication
    /// KISS: Removed DeadLetter methods!
    /// </summary>
    public interface IApiService
    {
        /// <summary>
        /// Gets the current service status
        /// </summary>
        Task<ServiceStatusModel?> GetStatusAsync();

        /// <summary>
        /// Gets detailed statistics
        /// </summary>
        Task<DetailedStatisticsModel?> GetStatisticsAsync();

        /// <summary>
        /// Checks if the service is reachable
        /// </summary>
        Task<bool> IsServiceAvailableAsync();
    }
}


================================================================================
FILE: src\CamBridge.Config\Services\IConfigurationService.cs
================================================================================

using System.Threading.Tasks;

namespace CamBridge.Config.Services
{
    public interface IConfigurationService
    {
        Task<T?> LoadConfigurationAsync<T>() where T : class;
        Task SaveConfigurationAsync<T>(T configuration) where T : class;
    }
}


================================================================================
FILE: src\CamBridge.Config\Services\INavigationService.cs
================================================================================

using System;

namespace CamBridge.Config.Services
{
    /// <summary>
    /// Navigation service interface
    /// </summary>
    public interface INavigationService
    {
        bool CanGoBack { get; }
        void NavigateTo(string pageKey);
        void GoBack();
    }
}


================================================================================
FILE: src\CamBridge.Config\Services\IServiceManager.cs
================================================================================

// src/CamBridge.Config/Services/IServiceManager.cs
using System;
using System.Threading.Tasks;

namespace CamBridge.Config.Services
{
    /// <summary>
    /// Interface for managing the CamBridge Windows Service
    /// </summary>
    public interface IServiceManager
    {
        /// <summary>
        /// Checks if the application is running with administrator privileges
        /// </summary>
        bool IsRunningAsAdministrator();

        /// <summary>
        /// Checks if the CamBridge service is installed
        /// </summary>
        Task<bool> IsServiceInstalledAsync();

        /// <summary>
        /// Gets the current status of the CamBridge service
        /// </summary>
        Task<ServiceStatus> GetServiceStatusAsync();

        /// <summary>
        /// Gets the start time of the service if it's running
        /// </summary>
        Task<DateTime?> GetServiceStartTimeAsync();

        /// <summary>
        /// Installs the CamBridge service
        /// </summary>
        Task<bool> InstallServiceAsync();

        /// <summary>
        /// Uninstalls the CamBridge service
        /// </summary>
        Task<bool> UninstallServiceAsync();

        /// <summary>
        /// Starts the CamBridge service
        /// </summary>
        Task<bool> StartServiceAsync();

        /// <summary>
        /// Stops the CamBridge service
        /// </summary>
        Task<bool> StopServiceAsync();

        /// <summary>
        /// Restarts the CamBridge service
        /// </summary>
        Task<bool> RestartServiceAsync();
    }

    /// <summary>
    /// Service status enumeration
    /// </summary>
    public enum ServiceStatus
    {
        Unknown,
        Running,
        Stopped,
        Starting,
        Stopping
    }
}


================================================================================
FILE: src\CamBridge.Config\Services\ISettingsService.cs
================================================================================

// src\CamBridge.Config\Services\ISettingsService.cs
// Version: 0.7.3
// Description: Multi-layer settings service interface
// Â© 2025 Claude's Improbably Reliable Software Solutions

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using CamBridge.Core;

namespace CamBridge.Config.Services
{
    /// <summary>
    /// Service for managing the 3-layer settings architecture:
    /// - System settings (shared between Service and Config Tool)
    /// - Pipeline configurations (shared, multiple instances)
    /// - User preferences (per-user UI settings)
    /// </summary>
    public interface ISettingsService
    {
        // === SYSTEM-WIDE SETTINGS ===

        /// <summary>
        /// Gets the current system settings
        /// </summary>
        Task<SystemSettings> GetSystemSettingsAsync();

        /// <summary>
        /// Saves system settings with backup
        /// </summary>
        Task SaveSystemSettingsAsync(SystemSettings settings);

        /// <summary>
        /// Reloads system settings from disk
        /// </summary>
        Task ReloadSystemSettingsAsync();

        /// <summary>
        /// Validates system settings
        /// </summary>
        Task<SettingsValidationResult> ValidateSystemSettingsAsync(SystemSettings settings);

        // === PIPELINE CONFIGURATIONS ===

        /// <summary>
        /// Gets all available pipeline configurations
        /// </summary>
        Task<IList<PipelineConfiguration>> GetPipelinesAsync();

        /// <summary>
        /// Gets a specific pipeline configuration
        /// </summary>
        Task<PipelineConfiguration?> GetPipelineAsync(Guid pipelineId);

        /// <summary>
        /// Saves a pipeline configuration
        /// </summary>
        Task SavePipelineAsync(PipelineConfiguration pipeline);

        /// <summary>
        /// Deletes a pipeline configuration
        /// </summary>
        Task DeletePipelineAsync(Guid pipelineId);

        /// <summary>
        /// Imports a pipeline configuration from file
        /// </summary>
        Task<PipelineConfiguration> ImportPipelineAsync(string filePath);

        /// <summary>
        /// Exports a pipeline configuration to file
        /// </summary>
        Task ExportPipelineAsync(Guid pipelineId, string filePath);

        /// <summary>
        /// Creates a copy of an existing pipeline
        /// </summary>
        Task<PipelineConfiguration> ClonePipelineAsync(Guid sourcePipelineId, string newName);

        // === USER PREFERENCES ===

        /// <summary>
        /// Gets the current user preferences
        /// </summary>
        Task<UserPreferences> GetUserPreferencesAsync();

        /// <summary>
        /// Saves user preferences
        /// </summary>
        Task SaveUserPreferencesAsync(UserPreferences preferences);

        /// <summary>
        /// Resets user preferences to defaults
        /// </summary>
        Task ResetUserPreferencesAsync();

        /// <summary>
        /// Exports user preferences for backup
        /// </summary>
        Task ExportUserPreferencesAsync(string filePath);

        /// <summary>
        /// Imports user preferences from backup
        /// </summary>
        Task ImportUserPreferencesAsync(string filePath);

        // === MIGRATION AND MAINTENANCE ===

        /// <summary>
        /// Checks if settings migration is needed and performs it
        /// </summary>
        Task<SettingsMigrationResult> MigrateSettingsIfNeededAsync();

        /// <summary>
        /// Creates backups of all settings
        /// </summary>
        Task<SettingsBackupResult> BackupAllSettingsAsync();

        /// <summary>
        /// Restores settings from a backup
        /// </summary>
        Task RestoreFromBackupAsync(string backupPath);

        /// <summary>
        /// Validates all settings files
        /// </summary>
        Task<SettingsHealthCheckResult> ValidateAllSettingsAsync();

        /// <summary>
        /// Cleans up old backups and temporary files
        /// </summary>
        Task CleanupAsync(int keepBackupCount = 10);

        // === EVENTS ===

        /// <summary>
        /// Raised when system settings change
        /// </summary>
        event EventHandler<SettingsChangedEventArgs>? SystemSettingsChanged;

        /// <summary>
        /// Raised when a pipeline configuration changes
        /// </summary>
        event EventHandler<PipelineChangedEventArgs>? PipelineChanged;

        /// <summary>
        /// Raised when user preferences change
        /// </summary>
        event EventHandler<SettingsChangedEventArgs>? UserPreferencesChanged;
    }

    /// <summary>
    /// Result of settings validation
    /// </summary>
    public class SettingsValidationResult
    {
        public bool IsValid { get; set; }
        public List<string> Errors { get; set; } = new();
        public List<string> Warnings { get; set; } = new();
    }

    /// <summary>
    /// Result of settings migration
    /// </summary>
    public class SettingsMigrationResult
    {
        public bool MigrationPerformed { get; set; }
        public string FromVersion { get; set; } = string.Empty;
        public string ToVersion { get; set; } = string.Empty;
        public List<string> MigratedFiles { get; set; } = new();
        public List<string> Warnings { get; set; } = new();
    }

    /// <summary>
    /// Result of backup operation
    /// </summary>
    public class SettingsBackupResult
    {
        public bool Success { get; set; }
        public string BackupPath { get; set; } = string.Empty;
        public List<string> BackedUpFiles { get; set; } = new();
        public long TotalSizeBytes { get; set; }
    }

    /// <summary>
    /// Result of health check
    /// </summary>
    public class SettingsHealthCheckResult
    {
        public bool IsHealthy { get; set; }
        public Dictionary<string, FileHealthStatus> FileStatuses { get; set; } = new();
        public List<string> Issues { get; set; } = new();
    }

    /// <summary>
    /// Health status of a settings file
    /// </summary>
    public class FileHealthStatus
    {
        public bool Exists { get; set; }
        public bool IsReadable { get; set; }
        public bool IsWritable { get; set; }
        public bool IsValidJson { get; set; }
        public long SizeBytes { get; set; }
        public DateTime LastModified { get; set; }
    }

    /// <summary>
    /// Event args for settings changes
    /// </summary>
    public class SettingsChangedEventArgs : EventArgs
    {
        public string SettingsType { get; set; } = string.Empty;
        public string ChangedBy { get; set; } = string.Empty;
        public DateTime ChangeTime { get; set; } = DateTime.UtcNow;
    }

    /// <summary>
    /// Event args for pipeline changes
    /// </summary>
    public class PipelineChangedEventArgs : SettingsChangedEventArgs
    {
        public Guid PipelineId { get; set; }
        public string PipelineName { get; set; } = string.Empty;
        public PipelineChangeType ChangeType { get; set; }
    }

    /// <summary>
    /// Type of pipeline change
    /// </summary>
    public enum PipelineChangeType
    {
        Created,
        Updated,
        Deleted,
        Imported,
        Exported
    }
}


================================================================================
FILE: src\CamBridge.Config\Services\NavigationService.cs
================================================================================

// src\CamBridge.Config\Services\NavigationService.cs
// Version: 0.7.7
// Description: Navigation service with PipelineConfig instead of Settings

using System;
using System.Collections.Generic;
using System.Windows.Controls;
using CamBridge.Config.Views;

namespace CamBridge.Config.Services
{
    public class NavigationService : INavigationService
    {
        private Frame? _frame;
        private readonly Dictionary<string, Type> _pages = new();

        public NavigationService()
        {
            // Register pages - New order, no Settings!
            _pages["Dashboard"] = typeof(DashboardPage);
            _pages["PipelineConfig"] = typeof(PipelineConfigPage);      // NEW!
            _pages["DeadLetters"] = typeof(DeadLettersPage);
            _pages["MappingEditor"] = typeof(MappingEditorPage);
            _pages["ServiceControl"] = typeof(ServiceControlPage);
            _pages["About"] = typeof(AboutPage);
            // Settings REMOVED - Zero Global Settings!
        }

        public bool CanGoBack => _frame?.CanGoBack ?? false;

        public void SetFrame(object frame)
        {
            _frame = frame as Frame;
        }

        public void NavigateTo(string pageKey)
        {
            if (_frame != null && _pages.TryGetValue(pageKey, out var pageType))
            {
                var page = Activator.CreateInstance(pageType);
                if (page != null)
                {
                    _frame.Navigate(page);
                }
            }
        }

        public void GoBack()
        {
            if (_frame?.CanGoBack == true)
            {
                _frame.GoBack();
            }
        }
    }
}



================================================================================
FILE: src\CamBridge.Config\Services\ServiceManager.cs
================================================================================

// src/CamBridge.Config/Services/ServiceManager.cs
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Security.Principal;
using System.ServiceProcess;
using System.Text;
using System.Threading.Tasks;

namespace CamBridge.Config.Services
{
    /// <summary>
    /// Implementation of service management functionality
    /// </summary>
    public class ServiceManager : IServiceManager
    {
        private const string ServiceName = "CamBridgeService";
        private const string ServiceDisplayName = "CamBridge Image Processing Service";
        private const string ServiceDescription = "Monitors folders for JPEG images and converts them to DICOM format.";

        public bool IsRunningAsAdministrator()
        {
            var identity = WindowsIdentity.GetCurrent();
            var principal = new WindowsPrincipal(identity);
            return principal.IsInRole(WindowsBuiltInRole.Administrator);
        }

        public async Task<bool> IsServiceInstalledAsync()
        {
            return await Task.Run(() =>
            {
                try
                {
                    using var controller = ServiceController.GetServices()
                        .FirstOrDefault(s => s.ServiceName == ServiceName);
                    return controller != null;
                }
                catch
                {
                    return false;
                }
            });
        }

        public async Task<ServiceStatus> GetServiceStatusAsync()
        {
            return await Task.Run(() =>
            {
                try
                {
                    using var controller = new ServiceController(ServiceName);
                    controller.Refresh();

                    return controller.Status switch
                    {
                        ServiceControllerStatus.Running => ServiceStatus.Running,
                        ServiceControllerStatus.Stopped => ServiceStatus.Stopped,
                        ServiceControllerStatus.StartPending => ServiceStatus.Starting,
                        ServiceControllerStatus.StopPending => ServiceStatus.Stopping,
                        _ => ServiceStatus.Unknown
                    };
                }
                catch
                {
                    return ServiceStatus.Unknown;
                }
            });
        }

        public async Task<DateTime?> GetServiceStartTimeAsync()
        {
            return await Task.Run(() =>
            {
                try
                {
                    // Try to get start time from Windows Management
                    using var process = Process.GetProcessesByName("CamBridge.Service").FirstOrDefault();
                    return process?.StartTime;
                }
                catch
                {
                    return null;
                }
            });
        }

        public async Task<bool> InstallServiceAsync()
        {
            return await Task.Run(() =>
            {
                try
                {
                    // Find the service executable
                    var serviceExePath = FindServiceExecutable();
                    if (string.IsNullOrEmpty(serviceExePath))
                    {
                        // Log all searched paths for debugging
                        var searchPaths = GetSearchPaths();
                        var pathList = string.Join("\n", searchPaths);

                        // Create a detailed error message
                        var errorMsg = new StringBuilder();
                        errorMsg.AppendLine("Could not find CamBridge.Service.exe");
                        errorMsg.AppendLine("\nSearched in:");
                        foreach (var path in searchPaths)
                        {
                            var exists = File.Exists(path);
                            errorMsg.AppendLine($"  {(exists ? "âœ“" : "âœ—")} {path}");
                        }

                        throw new FileNotFoundException(errorMsg.ToString());
                    }

                    // Log the found path
                    Debug.WriteLine($"Found service executable at: {serviceExePath}");

                    // Use sc.exe to install the service
                    var processInfo = new ProcessStartInfo
                    {
                        FileName = "sc.exe",
                        Arguments = $"create {ServiceName} binPath= \"{serviceExePath}\" DisplayName= \"{ServiceDisplayName}\" start= auto",
                        UseShellExecute = false,
                        RedirectStandardOutput = true,
                        RedirectStandardError = true,
                        CreateNoWindow = true,
                        Verb = "runas"
                    };

                    using var process = Process.Start(processInfo);
                    if (process == null)
                    {
                        throw new InvalidOperationException("Failed to start sc.exe process");
                    }

                    var output = process.StandardOutput.ReadToEnd();
                    var error = process.StandardError.ReadToEnd();
                    process.WaitForExit();

                    Debug.WriteLine($"sc.exe output: {output}");
                    if (!string.IsNullOrEmpty(error))
                    {
                        Debug.WriteLine($"sc.exe error: {error}");
                    }

                    if (process.ExitCode == 0)
                    {
                        // Set service description
                        var descProcessInfo = new ProcessStartInfo
                        {
                            FileName = "sc.exe",
                            Arguments = $"description {ServiceName} \"{ServiceDescription}\"",
                            UseShellExecute = false,
                            CreateNoWindow = true,
                            Verb = "runas"
                        };

                        using var descProcess = Process.Start(descProcessInfo);
                        descProcess?.WaitForExit();

                        // Configure recovery options
                        ConfigureServiceRecovery();

                        return true;
                    }
                    else
                    {
                        var errorMessage = $"sc.exe failed with exit code {process.ExitCode}";
                        if (!string.IsNullOrEmpty(error))
                        {
                            errorMessage += $"\nError: {error}";
                        }
                        if (!string.IsNullOrEmpty(output) && output.Contains("error", StringComparison.OrdinalIgnoreCase))
                        {
                            errorMessage += $"\nOutput: {output}";
                        }

                        throw new InvalidOperationException(errorMessage);
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"Service installation failed: {ex}");
                    throw;
                }
            });
        }

        public async Task<bool> UninstallServiceAsync()
        {
            return await Task.Run(() =>
            {
                try
                {
                    // Use sc.exe to delete the service
                    var processInfo = new ProcessStartInfo
                    {
                        FileName = "sc.exe",
                        Arguments = $"delete {ServiceName}",
                        UseShellExecute = false,
                        RedirectStandardOutput = true,
                        RedirectStandardError = true,
                        CreateNoWindow = true,
                        Verb = "runas"
                    };

                    using var process = Process.Start(processInfo);
                    process?.WaitForExit();

                    return process?.ExitCode == 0;
                }
                catch
                {
                    return false;
                }
            });
        }

        public async Task<bool> StartServiceAsync()
        {
            try
            {
                using var controller = new ServiceController(ServiceName);

                if (controller.Status == ServiceControllerStatus.Running)
                    return true;

                controller.Start();
                await WaitForServiceStatusAsync(controller, ServiceControllerStatus.Running, TimeSpan.FromSeconds(30));

                return controller.Status == ServiceControllerStatus.Running;
            }
            catch
            {
                return false;
            }
        }

        public async Task<bool> StopServiceAsync()
        {
            try
            {
                using var controller = new ServiceController(ServiceName);

                if (controller.Status == ServiceControllerStatus.Stopped)
                    return true;

                controller.Stop();
                await WaitForServiceStatusAsync(controller, ServiceControllerStatus.Stopped, TimeSpan.FromSeconds(30));

                return controller.Status == ServiceControllerStatus.Stopped;
            }
            catch
            {
                return false;
            }
        }

        public async Task<bool> RestartServiceAsync()
        {
            try
            {
                // Stop service
                var stopResult = await StopServiceAsync();
                if (!stopResult)
                    return false;

                // Wait a bit before starting
                await Task.Delay(1000);

                // Start service
                return await StartServiceAsync();
            }
            catch
            {
                return false;
            }
        }

        private async Task WaitForServiceStatusAsync(ServiceController controller, ServiceControllerStatus desiredStatus, TimeSpan timeout)
        {
            await Task.Run(() =>
            {
                try
                {
                    controller.WaitForStatus(desiredStatus, timeout);
                }
                catch (System.ServiceProcess.TimeoutException)
                {
                    // Status change timed out
                }
            });
        }

        private string? FindServiceExecutable()
        {
            var possiblePaths = GetSearchPaths();

            foreach (var path in possiblePaths)
            {
                try
                {
                    var normalizedPath = Path.GetFullPath(path);
                    Debug.WriteLine($"Checking: {normalizedPath}");
                    if (File.Exists(normalizedPath))
                    {
                        Debug.WriteLine($"Found service at: {normalizedPath}");
                        return normalizedPath;
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"Error checking path {path}: {ex.Message}");
                }
            }

            return null;
        }

        private string[] GetSearchPaths()
        {
            var paths = new List<string>
            {
                // Same directory as config app
                Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) ?? "", "CamBridge.Service.exe"),
                // Parent directory (if config is in subfolder)
                Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) ?? "", "..", "CamBridge.Service.exe"),
                // Debug/Release output paths
                Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "CamBridge.Service.exe"),
            };

            // Find solution directory first for more accurate paths
            var solutionDir = FindSolutionDirectory();
            if (!string.IsNullOrEmpty(solutionDir))
            {
                // Add all known locations from PROJECT_WISDOM
                paths.AddRange(new[]
                {
                    // Standard debug/release paths
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "Debug", "net8.0", "CamBridge.Service.exe"),
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "Release", "net8.0", "CamBridge.Service.exe"),
                    
                    // win-x64 specific paths (from PROJECT_WISDOM)
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "Debug", "net8.0", "win-x64", "CamBridge.Service.exe"),
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "Release", "net8.0", "win-x64", "CamBridge.Service.exe"),
                    
                    // x64 configuration paths
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "x64", "Debug", "net8.0", "CamBridge.Service.exe"),
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "x64", "Release", "net8.0", "CamBridge.Service.exe"),
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "x64", "Debug", "net8.0", "win-x64", "CamBridge.Service.exe"),
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "x64", "Release", "net8.0", "win-x64", "CamBridge.Service.exe"),
                    
                    // net8.0-windows paths (this was missing!)
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "Debug", "net8.0-windows", "CamBridge.Service.exe"),
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "Release", "net8.0-windows", "CamBridge.Service.exe"),
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "Debug", "net8.0-windows", "win-x64", "CamBridge.Service.exe"),
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "Release", "net8.0-windows", "win-x64", "CamBridge.Service.exe"),
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "x64", "Debug", "net8.0-windows", "win-x64", "CamBridge.Service.exe"),
                    Path.Combine(solutionDir, "src", "CamBridge.Service", "bin", "x64", "Release", "net8.0-windows", "win-x64", "CamBridge.Service.exe"),
                    
                    // Published output
                    Path.Combine(solutionDir, "publish", "CamBridge.Service.exe")
                });
            }
            else
            {
                // Fallback paths relative to current directory
                paths.AddRange(new[]
                {
                    Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..", "..", "..", "CamBridge.Service", "bin", "Debug", "net8.0", "CamBridge.Service.exe"),
                    Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..", "..", "..", "CamBridge.Service", "bin", "Release", "net8.0", "CamBridge.Service.exe"),
                    Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..", "..", "..", "CamBridge.Service", "bin", "Debug", "net8.0", "win-x64", "CamBridge.Service.exe"),
                    Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..", "..", "..", "CamBridge.Service", "bin", "x64", "Debug", "net8.0", "win-x64", "CamBridge.Service.exe"),
                    Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..", "..", "..", "CamBridge.Service", "bin", "x64", "Debug", "net8.0-windows", "win-x64", "CamBridge.Service.exe"),
                    Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..", "..", "..", "publish", "CamBridge.Service.exe")
                });
            }

            return paths.Distinct().ToArray();
        }

        private string? FindSolutionDirectory()
        {
            var directory = new DirectoryInfo(AppDomain.CurrentDomain.BaseDirectory);

            while (directory != null && directory.Parent != null)
            {
                if (directory.GetFiles("CamBridge.sln").Any())
                {
                    return directory.FullName;
                }
                directory = directory.Parent;
            }

            return null;
        }

        private void ConfigureServiceRecovery()
        {
            try
            {
                // Configure service to restart on failure
                var processInfo = new ProcessStartInfo
                {
                    FileName = "sc.exe",
                    Arguments = $"failure {ServiceName} reset= 86400 actions= restart/60000/restart/60000/restart/60000",
                    UseShellExecute = false,
                    CreateNoWindow = true,
                    Verb = "runas"
                };

                using var process = Process.Start(processInfo);
                process?.WaitForExit();
            }
            catch
            {
                // Recovery configuration is optional, so we don't fail the installation
            }
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\ViewModels\DashboardViewModel.cs
================================================================================

/**************************************************************************
*  DashboardViewModel.cs                                                  *
*  PATH: src\CamBridge.Config\ViewModels\DashboardViewModel.cs           *
*  VERSION: 0.7.11 | SIZE: ~10KB | MODIFIED: 2025-06-13                  *
*                                                                         *
*  DESCRIPTION: ViewModel for the main dashboard display                  *
*  Copyright (c) 2025 Claude's Improbably Reliable Software Solutions     *
**************************************************************************/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Threading;
using CamBridge.Config.Models;
using CamBridge.Config.Services;
using CamBridge.Core;
using CamBridge.Core.Infrastructure;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;

namespace CamBridge.Config.ViewModels
{
    /// <summary>
    /// ViewModel for the dashboard page showing service and pipeline status
    /// KISS Edition - Works with actual API!
    /// </summary>
    public partial class DashboardViewModel : ObservableObject
    {
        private readonly IApiService _apiService;
        private readonly IConfigurationService _configurationService;
        private DispatcherTimer? _refreshTimer;
        private bool _isInitialized = false;

        [ObservableProperty]
        private string serviceStatus = "Checking...";

        [ObservableProperty]
        private int totalQueueLength;

        [ObservableProperty]
        private int totalActiveProcessing;

        [ObservableProperty]
        private int totalSuccessCount;

        [ObservableProperty]
        private int totalErrorCount;

        [ObservableProperty]
        private double overallSuccessRate;

        [ObservableProperty]
        private TimeSpan uptime;

        [ObservableProperty]
        private DateTime lastUpdate = DateTime.Now;

        [ObservableProperty]
        private bool isConnected;

        [ObservableProperty]
        private string connectionStatus = "Connecting...";

        [ObservableProperty]
        private string statusMessage = "";

        [ObservableProperty]
        private string configPath = "";

        [ObservableProperty]
        private bool isLoading;

        // Collections - created on UI thread
        public ObservableCollection<PipelineStatusViewModel> PipelineStatuses { get; }
        public ObservableCollection<RecentActivityViewModel> RecentActivities { get; }

        // Commands
        public IAsyncRelayCommand RefreshDataCommand { get; }
        public IRelayCommand ShowConfigPathCommand { get; }

        public DashboardViewModel(
            IApiService apiService,
            IConfigurationService? configurationService = null)
        {
            _apiService = apiService ?? throw new ArgumentNullException(nameof(apiService));
            _configurationService = configurationService ?? new ConfigurationService();

            // Initialize collections on UI thread (MUST be in constructor!)
            PipelineStatuses = new ObservableCollection<PipelineStatusViewModel>();
            RecentActivities = new ObservableCollection<RecentActivityViewModel>();

            // Initialize commands
            RefreshDataCommand = new AsyncRelayCommand(RefreshDataAsync);
            ShowConfigPathCommand = new RelayCommand(ShowConfigPath);

            // Set config path for display
            ConfigPath = ConfigurationPaths.GetPrimaryConfigPath();

            Debug.WriteLine("DashboardViewModel created - waiting for initialization");
        }

        public async Task InitializeAsync()
        {
            if (_isInitialized) return;

            Debug.WriteLine("=== DashboardViewModel.InitializeAsync START ===");

            // Initial data load
            await RefreshDataAsync();

            // Set up refresh timer on UI thread
            Application.Current.Dispatcher.Invoke(() =>
            {
                _refreshTimer = new DispatcherTimer
                {
                    Interval = TimeSpan.FromSeconds(5)
                };
                _refreshTimer.Tick += async (s, e) => await RefreshDataAsync();
                _refreshTimer.Start();
            });

            _isInitialized = true;
            Debug.WriteLine("=== DashboardViewModel.InitializeAsync END ===");
        }

        private async Task RefreshDataAsync()
        {
            try
            {
                Debug.WriteLine($"\n=== DASHBOARD REFRESH START (Thread: {Thread.CurrentThread.ManagedThreadId}) ===");
                Debug.WriteLine($"Config Path: {ConfigPath}");

                IsLoading = true;
                StatusMessage = "Refreshing...";

                // Check service availability
                var isAvailable = await _apiService.IsServiceAvailableAsync();
                IsConnected = isAvailable;

                if (isAvailable)
                {
                    // Get service status
                    var status = await _apiService.GetStatusAsync();
                    if (status != null)
                    {
                        UpdateServiceStatus(status);
                    }

                    ConnectionStatus = "Connected";
                    StatusMessage = "Service is running";
                }
                else
                {
                    ConnectionStatus = "Service Offline";
                    ServiceStatus = "Offline";
                    StatusMessage = "Service is not running. Please start the service.";
                }

                // Load configuration for pipeline info
                var settings = await _configurationService.LoadConfigurationAsync<CamBridgeSettingsV2>();
                if (settings?.Pipelines != null && settings.Pipelines.Count > 0)
                {
                    UpdatePipelinesFromConfig(settings.Pipelines);
                }

                LastUpdate = DateTime.Now;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error refreshing dashboard: {ex.Message}");
                HandleError(ex);
            }
            finally
            {
                IsLoading = false;
            }
        }

        private void UpdateServiceStatus(ServiceStatusModel status)
        {
            ServiceStatus = status.ServiceStatus == "Running" ? "Running" : "Stopped";
            Uptime = status.Uptime;

            // Update totals from service
            TotalQueueLength = status.QueueLength;
            TotalActiveProcessing = status.ActiveProcessing;
            TotalSuccessCount = status.TotalSuccessful;
            TotalErrorCount = status.TotalFailed;
            OverallSuccessRate = status.SuccessRate;

            // Update pipeline statuses if available
            if (status.Pipelines != null)
            {
                Application.Current.Dispatcher.InvokeAsync(() =>
                {
                    foreach (var pipelineData in status.Pipelines)
                    {
                        // FIX: Use PipelineName instead of Name
                        var existing = PipelineStatuses.FirstOrDefault(p => p.PipelineName == pipelineData.Name);
                        if (existing != null)
                        {
                            existing.IsEnabled = pipelineData.IsActive;
                            existing.Status = pipelineData.IsActive ? "Active" : "Inactive";
                            existing.QueueLength = pipelineData.QueueLength;

                            // Map to existing properties in PipelineStatusViewModel
                            existing.ProcessedToday = pipelineData.TotalSuccessful + pipelineData.TotalFailed;
                            existing.ErrorsToday = pipelineData.TotalFailed;

                            var total = pipelineData.TotalSuccessful + pipelineData.TotalFailed;
                            existing.SuccessRate = total > 0 ?
                                (double)pipelineData.TotalSuccessful / total * 100 : 0;
                        }
                    }
                });
            }
        }

        private void UpdatePipelinesFromConfig(List<PipelineConfiguration> pipelines)
        {
            Application.Current.Dispatcher.InvokeAsync(() =>
            {
                try
                {
                    // Update existing or add new
                    foreach (var pipeline in pipelines)
                    {
                        // FIX 1: Use PipelineName instead of Name
                        var existing = PipelineStatuses.FirstOrDefault(p => p.PipelineName == pipeline.Name);
                        if (existing == null)
                        {
                            PipelineStatuses.Add(new PipelineStatusViewModel
                            {
                                // FIX 2: Use correct property names
                                PipelineName = pipeline.Name,
                                IsEnabled = pipeline.Enabled,
                                Status = pipeline.Enabled ? "Ready" : "Disabled",  // FIX 3: Complete ternary operator!
                                PipelineId = pipeline.Id,
                                WatchFolder = pipeline.WatchSettings?.Path ?? ""   // FIX 4: Use Path not WatchFolder
                            });
                        }
                        else
                        {
                            existing.IsEnabled = pipeline.Enabled;
                            existing.Status = pipeline.Enabled ? "Ready" : "Disabled";
                            existing.WatchFolder = pipeline.WatchSettings?.Path ?? "";  // FIX 5: Use Path
                        }
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"Error updating pipelines: {ex.Message}");
                }
            });
        }

        private void HandleError(Exception ex)
        {
            IsConnected = false;
            ConnectionStatus = "Error";
            StatusMessage = $"Error: {ex.Message}";
            ServiceStatus = "Error";
        }

        private void ShowConfigPath()
        {
            try
            {
                var dir = Path.GetDirectoryName(ConfigPath);
                if (Directory.Exists(dir))
                {
                    Process.Start("explorer.exe", dir);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error opening config path: {ex.Message}");
            }
        }

        /// <summary>
        /// Cleanup when view model is disposed
        /// </summary>
        public void Cleanup()
        {
            _refreshTimer?.Stop();
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\ViewModels\DeadLettersViewModel.cs
================================================================================

// src/CamBridge.Config/ViewModels/DeadLettersViewModel.cs
// Version: 0.7.8
// Description: SIMPLE error folder viewer - KISS approach!

using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using System;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;

namespace CamBridge.Config.ViewModels
{
    /// <summary>
    /// Simple ViewModel for error folder viewing - KISS!
    /// </summary>
    public partial class DeadLettersViewModel : ViewModelBase
    {
        [ObservableProperty] private string _errorFolder;
        [ObservableProperty] private bool _errorFolderExists;
        [ObservableProperty] private int _errorFileCount;

        public DeadLettersViewModel()
        {
            // Default error folder from ProcessingOptions
            _errorFolder = @"C:\CamBridge\Errors";
            CheckErrorFolder();
        }

        /// <summary>
        /// Open error folder in Windows Explorer
        /// </summary>
        [RelayCommand]
        private void OpenErrorFolder()
        {
            try
            {
                if (!Directory.Exists(ErrorFolder))
                {
                    Directory.CreateDirectory(ErrorFolder);
                }

                Process.Start("explorer.exe", ErrorFolder);
            }
            catch (Exception ex)
            {
                System.Windows.MessageBox.Show(
                    $"Could not open error folder: {ex.Message}",
                    "Error",
                    System.Windows.MessageBoxButton.OK,
                    System.Windows.MessageBoxImage.Warning);
            }
        }

        /// <summary>
        /// Refresh error folder status
        /// </summary>
        [RelayCommand]
        private async Task RefreshAsync()
        {
            await Task.Run(() => CheckErrorFolder());
        }

        /// <summary>
        /// Check if error folder exists and count files
        /// </summary>
        private void CheckErrorFolder()
        {
            try
            {
                ErrorFolderExists = Directory.Exists(ErrorFolder);

                if (ErrorFolderExists)
                {
                    var errorFiles = Directory.GetFiles(ErrorFolder, "*.jpg", SearchOption.AllDirectories);
                    ErrorFileCount = errorFiles.Length;
                }
                else
                {
                    ErrorFileCount = 0;
                }
            }
            catch
            {
                ErrorFileCount = 0;
            }
        }

        public void Cleanup()
        {
            // Nothing to cleanup in simple implementation
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\ViewModels\MainViewModel.cs
================================================================================

// src\CamBridge.Config\ViewModels\MainViewModel.cs
// Version: 0.6.8
// Description: Main view model with correct version
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

namespace CamBridge.Config.ViewModels
{
    public class MainViewModel : ViewModelBase
    {
        public string Title => "CamBridge Configuration v0.6.8";
    }
}


================================================================================
FILE: src\CamBridge.Config\ViewModels\MappingEditorViewModel.cs
================================================================================

// src/CamBridge.Config/ViewModels/MappingEditorViewModel.cs
// Version: 0.7.7
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions
// Modified: 2025-06-08
// Status: Development/Local - Fixed Command Names

using CamBridge.Config.Dialogs;
using CamBridge.Config.Extensions;
using CamBridge.Config.Services;
using CamBridge.Core;
using CamBridge.Core.Interfaces;
using CamBridge.Core.ValueObjects;
using CamBridge.Infrastructure.Services;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Abstractions;
using Microsoft.Win32;
using System;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;

// Alias to avoid ambiguity with FellowOakDicom.DicomTag
using DicomTag = CamBridge.Core.ValueObjects.DicomTag;

namespace CamBridge.Config.ViewModels
{
    /// <summary>
    /// ViewModel for the mapping editor with multiple mapping sets support
    /// </summary>
    public partial class MappingEditorViewModel : ViewModelBase
    {
        private readonly ILogger<MappingEditorViewModel> _logger;
        private readonly IConfigurationService _configurationService;
        private IMappingConfiguration? _mappingConfiguration;
        private bool _isInitialized = false;

        #region Properties

        // Mapping Sets
        [ObservableProperty] private ObservableCollection<MappingSet> _mappingSets = new();
        [ObservableProperty] private MappingSet? _selectedMappingSet;
        [ObservableProperty] private bool _canEditCurrentSet = true;

        // Mapping Rules
        [ObservableProperty] private ObservableCollection<MappingRuleViewModel> _mappingRules = new();
        [ObservableProperty] private MappingRuleViewModel? _selectedRule;

        // Preview
        [ObservableProperty] private string? _previewInput;
        [ObservableProperty] private string? _previewOutput;

        // State
        [ObservableProperty] private bool _isModified;
        [ObservableProperty] private string? _statusMessage;
        [ObservableProperty] private bool _isLoading;

        // Available source fields
        public ObservableCollection<SourceFieldInfo> QRBridgeFields { get; } = new();
        public ObservableCollection<SourceFieldInfo> ExifFields { get; } = new();

        #endregion

        public MappingEditorViewModel(
            ILogger<MappingEditorViewModel> logger,
            IConfigurationService configurationService)
        {
            _logger = logger;
            _configurationService = configurationService;

            InitializeSourceFields();
            StatusMessage = "Ready";
        }

        /// <summary>
        /// Initialize the ViewModel - call this from the View's Loaded event
        /// </summary>
        public async Task InitializeAsync()
        {
            if (_isInitialized) return;

            try
            {
                IsLoading = true;
                StatusMessage = "Initializing mapping editor...";

                // Create MappingConfigurationLoader with proper logger
                var nullLoggerFactory = new NullLoggerFactory();
                var mappingLoaderLogger = nullLoggerFactory.CreateLogger<MappingConfigurationLoader>();
                _mappingConfiguration = new MappingConfigurationLoader(mappingLoaderLogger);

                // Load mapping sets
                await LoadMappingSetsAsync();

                _isInitialized = true;
                StatusMessage = "Mapping editor ready";
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to initialize mapping editor");
                StatusMessage = "Initialization failed";
                MessageBox.Show(
                    $"Failed to initialize mapping editor:\n{ex.Message}",
                    "Error",
                    MessageBoxButton.OK,
                    MessageBoxImage.Error);
            }
            finally
            {
                IsLoading = false;
            }
        }

        #region Initialization

        private void InitializeSourceFields()
        {
            // QRBridge fields (from QR code data)
            QRBridgeFields.Add(new SourceFieldInfo("examid", "Examination ID", "string"));
            QRBridgeFields.Add(new SourceFieldInfo("name", "Patient Name", "string"));
            QRBridgeFields.Add(new SourceFieldInfo("birthdate", "Birth Date", "date"));
            QRBridgeFields.Add(new SourceFieldInfo("gender", "Gender", "string"));
            QRBridgeFields.Add(new SourceFieldInfo("comment", "Comment", "string"));
            QRBridgeFields.Add(new SourceFieldInfo("patientid", "Patient ID", "string"));

            // EXIF fields (from image metadata)
            ExifFields.Add(new SourceFieldInfo("Make", "Camera Manufacturer", "string"));
            ExifFields.Add(new SourceFieldInfo("Model", "Camera Model", "string"));
            ExifFields.Add(new SourceFieldInfo("DateTimeOriginal", "Capture Date/Time", "datetime"));
            ExifFields.Add(new SourceFieldInfo("Software", "Software Version", "string"));
            ExifFields.Add(new SourceFieldInfo("ImageDescription", "Image Description", "string"));
        }

        private async Task LoadMappingSetsAsync()
        {
            try
            {
                IsLoading = true;
                StatusMessage = "Loading mapping sets...";

                // IMMER zuerst System Defaults laden - sie sind die Basis!
                LoadSystemDefaults();
                _logger.LogInformation("Loaded system default mapping sets");

                // Try to load v2 settings
                var settingsV2 = await _configurationService.LoadConfigurationAsync<CamBridgeSettingsV2>();

                bool hasUserSets = false;
                bool needsMigration = true;

                if (settingsV2 != null && settingsV2.MappingSets.Count > 0)
                {
                    // Add user sets from v2 settings
                    foreach (var set in settingsV2.MappingSets.Where(s => !s.IsSystemDefault))
                    {
                        MappingSets.Add(set);
                        hasUserSets = true;
                    }
                    needsMigration = false;
                    _logger.LogInformation($"Loaded {settingsV2.MappingSets.Count(s => !s.IsSystemDefault)} user mapping sets from settings");
                }

                // If no user sets exist, try migration from v1
                if (needsMigration && !hasUserSets)
                {
                    await MigrateFromV1Async();
                }

                // Debug: Log all loaded sets
                _logger.LogInformation($"Total mapping sets loaded: {MappingSets.Count}");
                foreach (var set in MappingSets)
                {
                    _logger.LogInformation($"  - {set.Name} (System: {set.IsSystemDefault}, Rules: {set.Rules?.Count ?? 0})");
                }

                // Select appropriate set - prefer Ricoh for initial experience
                SelectedMappingSet = MappingSets.FirstOrDefault(m => m.Name.Contains("Ricoh") && m.IsSystemDefault) ??
                                    MappingSets.FirstOrDefault(m => !m.IsSystemDefault) ??
                                    MappingSets.FirstOrDefault();

                IsModified = false;
                StatusMessage = $"Loaded {MappingSets.Count} mapping sets";
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to load mapping sets");
                StatusMessage = "Failed to load mapping sets";

                // Ensure we at least have system defaults
                if (!MappingSets.Any(m => m.IsSystemDefault))
                {
                    LoadSystemDefaults();
                }
                SelectedMappingSet = MappingSets.FirstOrDefault();
            }
            finally
            {
                IsLoading = false;
            }
        }

        private async Task MigrateFromV1Async()
        {
            try
            {
                _logger.LogInformation("Attempting to migrate from v1 mappings...");

                // First try to load v1 settings
                var v1Settings = await _configurationService.LoadConfigurationAsync<CamBridgeSettings>();

                string mappingFile = "mappings.json";

                if (v1Settings != null && !string.IsNullOrEmpty(v1Settings.MappingConfigurationFile))
                {
                    mappingFile = v1Settings.MappingConfigurationFile;
                }
                else
                {
                    // No v1 settings - try common locations for mappings.json
                    var assemblyLocation = System.Reflection.Assembly.GetExecutingAssembly().Location;
                    var assemblyDir = Path.GetDirectoryName(assemblyLocation) ?? "";

                    var possiblePaths = new[]
                    {
                        Path.Combine(assemblyDir, "mappings.json"),
                        Path.Combine(assemblyDir, "..", "..", "..", "..", "..", "CamBridge.Service", "mappings.json"),
                        Path.Combine(Environment.CurrentDirectory, "mappings.json"),
                        Path.Combine(Environment.CurrentDirectory, "src", "CamBridge.Service", "mappings.json"),
                        @"C:\Users\oliver.stern\source\repos\CamBridge\src\CamBridge.Service\mappings.json"
                    };

                    foreach (var path in possiblePaths)
                    {
                        var fullPath = Path.GetFullPath(path);
                        _logger.LogDebug($"Checking for mappings at: {fullPath}");
                        if (File.Exists(fullPath))
                        {
                            mappingFile = fullPath;
                            _logger.LogInformation($"Found mappings.json at: {fullPath}");
                            break;
                        }
                    }
                }

                if (_mappingConfiguration != null && File.Exists(mappingFile))
                {
                    // Try to load existing mapping rules
                    await _mappingConfiguration.LoadConfigurationAsync(mappingFile);
                    var rules = _mappingConfiguration.GetMappingRules().ToList();

                    if (rules.Count > 0)
                    {
                        // Fix transform names from old format
                        foreach (var rule in rules)
                        {
                            rule.Transform = rule.Transform switch
                            {
                                "GenderToDicom" => "MapGender",
                                "TruncateTo16" => "None", // Not available in current version
                                _ => rule.Transform
                            };
                        }

                        // Create migrated set from v1 rules
                        var migratedSet = new MappingSet
                        {
                            Id = Guid.NewGuid(),
                            Name = "[Migrated] Default Mapping Set",
                            Description = $"Migrated from {Path.GetFileName(mappingFile)}",
                            IsSystemDefault = false,
                            Rules = rules,
                            CreatedAt = DateTime.UtcNow,
                            UpdatedAt = DateTime.UtcNow
                        };

                        MappingSets.Add(migratedSet);
                        _logger.LogInformation($"Migrated {rules.Count} rules from {mappingFile}");
                    }
                }
                else
                {
                    _logger.LogWarning($"Could not find mappings file at: {mappingFile}");
                }
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Could not migrate v1 mappings");
            }
        }

        private void LoadSystemDefaults()
        {
            // Ricoh G900 Standard Set
            var ricohSet = new MappingSet
            {
                Id = Guid.Parse("00000000-0000-0000-0000-000000000001"),
                Name = "[System] Ricoh G900 Standard",
                Description = "Standard mapping for Ricoh G900 II cameras",
                IsSystemDefault = true,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow,
                Rules = new List<MappingRule>
                {
                    // Patient identification
                    new() { SourceField = "name", DicomTag = "(0010,0010)", Description = "Patient Name",
                            SourceType = "QRBridge", Transform = "None", Required = true },
                    new() { SourceField = "patientid", DicomTag = "(0010,0020)", Description = "Patient ID",
                            SourceType = "QRBridge", Transform = "None", Required = true },
                    new() { SourceField = "birthdate", DicomTag = "(0010,0030)", Description = "Patient Birth Date",
                            SourceType = "QRBridge", Transform = "DateToDicom" },
                    new() { SourceField = "gender", DicomTag = "(0010,0040)", Description = "Patient Sex",
                            SourceType = "QRBridge", Transform = "MapGender" },
                    
                    // Study information
                    new() { SourceField = "examid", DicomTag = "(0020,0010)", Description = "Study ID",
                            SourceType = "QRBridge", Transform = "None" },
                    new() { SourceField = "comment", DicomTag = "(0008,1030)", Description = "Study Description",
                            SourceType = "QRBridge", Transform = "None" },
                    
                    // Image date/time from EXIF
                    new() { SourceField = "DateTimeOriginal", DicomTag = "(0008,0020)", Description = "Study Date",
                            SourceType = "EXIF", Transform = "ExtractDate" },
                    new() { SourceField = "DateTimeOriginal", DicomTag = "(0008,0030)", Description = "Study Time",
                            SourceType = "EXIF", Transform = "ExtractTime" },
                    
                    // Equipment info
                    new() { SourceField = "Make", DicomTag = "(0008,0070)", Description = "Manufacturer",
                            SourceType = "EXIF", Transform = "None" },
                    new() { SourceField = "Model", DicomTag = "(0008,1090)", Description = "Manufacturer Model Name",
                            SourceType = "EXIF", Transform = "None" }
                }
            };

            // Minimal Required Set
            var minimalSet = new MappingSet
            {
                Id = Guid.Parse("00000000-0000-0000-0000-000000000002"),
                Name = "[System] Minimal Required",
                Description = "Only the required DICOM fields",
                IsSystemDefault = true,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow,
                Rules = new List<MappingRule>
                {
                    new() { SourceField = "name", DicomTag = "(0010,0010)", Description = "Patient Name",
                            SourceType = "QRBridge", Transform = "None", Required = true },
                    new() { SourceField = "patientid", DicomTag = "(0010,0020)", Description = "Patient ID",
                            SourceType = "QRBridge", Transform = "None", Required = true },
                    new() { SourceField = "examid", DicomTag = "(0020,0010)", Description = "Study ID",
                            SourceType = "QRBridge", Transform = "None" }
                }
            };

            // Full Comprehensive Set
            var fullSet = new MappingSet
            {
                Id = Guid.Parse("00000000-0000-0000-0000-000000000003"),
                Name = "[System] Full Comprehensive",
                Description = "Comprehensive mapping with all standard fields",
                IsSystemDefault = true,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow,
                Rules = new List<MappingRule>
                {
                    // Patient Module
                    new() { SourceField = "name", DicomTag = "(0010,0010)", Description = "Patient Name",
                            SourceType = "QRBridge", Transform = "None", Required = true },
                    new() { SourceField = "patientid", DicomTag = "(0010,0020)", Description = "Patient ID",
                            SourceType = "QRBridge", Transform = "None", Required = true },
                    new() { SourceField = "birthdate", DicomTag = "(0010,0030)", Description = "Patient Birth Date",
                            SourceType = "QRBridge", Transform = "DateToDicom" },
                    new() { SourceField = "gender", DicomTag = "(0010,0040)", Description = "Patient Sex",
                            SourceType = "QRBridge", Transform = "MapGender" },
                    new() { SourceField = "comment", DicomTag = "(0010,4000)", Description = "Patient Comments",
                            SourceType = "QRBridge", Transform = "None" },
                    
                    // Study Module
                    new() { SourceField = "examid", DicomTag = "(0020,0010)", Description = "Study ID",
                            SourceType = "QRBridge", Transform = "None" },
                    new() { SourceField = "examid", DicomTag = "(0008,0050)", Description = "Accession Number",
                            SourceType = "QRBridge", Transform = "None" },
                    new() { SourceField = "comment", DicomTag = "(0008,1030)", Description = "Study Description",
                            SourceType = "QRBridge", Transform = "None" },
                    new() { SourceField = "DateTimeOriginal", DicomTag = "(0008,0020)", Description = "Study Date",
                            SourceType = "EXIF", Transform = "ExtractDate" },
                    new() { SourceField = "DateTimeOriginal", DicomTag = "(0008,0030)", Description = "Study Time",
                            SourceType = "EXIF", Transform = "ExtractTime" },
                    
                    // Equipment Module
                    new() { SourceField = "Make", DicomTag = "(0008,0070)", Description = "Manufacturer",
                            SourceType = "EXIF", Transform = "None" },
                    new() { SourceField = "Model", DicomTag = "(0008,1090)", Description = "Manufacturer Model Name",
                            SourceType = "EXIF", Transform = "None" },
                    new() { SourceField = "Software", DicomTag = "(0018,1020)", Description = "Software Versions",
                            SourceType = "EXIF", Transform = "None" },
                    
                    // Image Module
                    new() { SourceField = "DateTimeOriginal", DicomTag = "(0008,002A)", Description = "Acquisition DateTime",
                            SourceType = "EXIF", Transform = "DateTimeToDicom" }
                }
            };

            MappingSets.Add(ricohSet);
            MappingSets.Add(minimalSet);
            MappingSets.Add(fullSet);
        }

        private MappingRuleViewModel CreateRuleViewModel(MappingRule rule)
        {
            var vm = new MappingRuleViewModel(rule);

            // Attach property changed handler
            vm.PropertyChanged += (s, e) =>
            {
                // Avoid recursive updates
                if (!IsLoading)
                {
                    IsModified = true;
                    if (s == SelectedRule && e.PropertyName != nameof(MappingRuleViewModel.DisplayName))
                    {
                        UpdatePreview();
                    }
                }
            };

            return vm;
        }

        #endregion

        #region Mapping Set Commands

        [RelayCommand]
        private async Task AddMappingSetAsync()
        {
            var newSet = new MappingSet
            {
                Name = $"New Mapping Set {DateTime.Now:HHmmss}",
                Description = "Custom mapping configuration",
                Rules = new List<MappingRule>(),
                IsSystemDefault = false,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            };

            MappingSets.Add(newSet);
            SelectedMappingSet = newSet;
            IsModified = true;
            StatusMessage = $"Created new mapping set: {newSet.Name}";
        }

        [RelayCommand(CanExecute = nameof(CanDuplicateMappingSet))]
        private async Task DuplicateMappingSetAsync()
        {
            if (SelectedMappingSet == null) return;

            var duplicate = new MappingSet
            {
                Name = $"{SelectedMappingSet.Name} (Copy)",
                Description = SelectedMappingSet.Description,
                Rules = SelectedMappingSet.Rules.Select(r => new MappingRule
                {
                    SourceField = r.SourceField,
                    DicomTag = r.DicomTag,
                    Description = r.Description,
                    SourceType = r.SourceType,
                    Transform = r.Transform,
                    Required = r.Required,
                    DefaultValue = r.DefaultValue
                }).ToList(),
                IsSystemDefault = false,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            };

            MappingSets.Add(duplicate);
            SelectedMappingSet = duplicate;
            IsModified = true;
            StatusMessage = $"Duplicated mapping set: {duplicate.Name}";
        }

        private bool CanDuplicateMappingSet() => SelectedMappingSet != null;

        [RelayCommand(CanExecute = nameof(CanDeleteMappingSet))]
        private async Task DeleteMappingSetAsync()
        {
            if (SelectedMappingSet == null || SelectedMappingSet.IsSystemDefault) return;

            var result = MessageBox.Show(
                $"Delete mapping set '{SelectedMappingSet.Name}'?\n\nThis action cannot be undone.",
                "Confirm Delete",
                MessageBoxButton.YesNo,
                MessageBoxImage.Question);

            if (result == MessageBoxResult.Yes)
            {
                var setName = SelectedMappingSet.Name;
                MappingSets.Remove(SelectedMappingSet);
                SelectedMappingSet = MappingSets.FirstOrDefault();
                IsModified = true;
                StatusMessage = $"Deleted mapping set: {setName}";
            }
        }

        private bool CanDeleteMappingSet() => SelectedMappingSet != null && !SelectedMappingSet.IsSystemDefault;

        #endregion

        #region Rule Commands

        [RelayCommand(CanExecute = nameof(CanEditCurrentSet))]
        private void AddRule()
        {
            if (SelectedMappingSet == null || SelectedMappingSet.IsSystemDefault) return;

            var newRule = new MappingRule
            {
                SourceField = "newField",
                DicomTag = "(0010,0010)",
                Description = $"New Rule {DateTime.Now:HHmmss}",
                SourceType = "QRBridge",
                Transform = ValueTransform.None.ToString(),
                Required = false
            };

            var vm = CreateRuleViewModel(newRule);
            MappingRules.Add(vm);
            SelectedRule = vm;

            // Update the set's rules
            SelectedMappingSet.Rules = MappingRules.Select(r => r.ToMappingRule()).ToList();
            SelectedMappingSet.UpdatedAt = DateTime.UtcNow;

            IsModified = true;
        }

        [RelayCommand(CanExecute = nameof(CanEditSelectedRule))]
        private void RemoveRule()
        {
            if (SelectedRule != null && SelectedMappingSet != null && !SelectedMappingSet.IsSystemDefault)
            {
                MappingRules.Remove(SelectedRule);

                // Update the set's rules
                SelectedMappingSet.Rules = MappingRules.Select(r => r.ToMappingRule()).ToList();
                SelectedMappingSet.UpdatedAt = DateTime.UtcNow;

                IsModified = true;
                SelectedRule = MappingRules.FirstOrDefault();
            }
        }

        private bool CanEditSelectedRule() => SelectedRule != null && CanEditCurrentSet;

        [RelayCommand(CanExecute = nameof(CanEditSelectedRule))]
        private void MoveRuleUp()
        {
            if (SelectedRule == null || SelectedMappingSet?.IsSystemDefault == true) return;

            var index = MappingRules.IndexOf(SelectedRule);
            if (index > 0)
            {
                MappingRules.Move(index, index - 1);

                // Update the set's rules
                SelectedMappingSet.Rules = MappingRules.Select(r => r.ToMappingRule()).ToList();
                SelectedMappingSet.UpdatedAt = DateTime.UtcNow;

                IsModified = true;
            }
        }

        [RelayCommand(CanExecute = nameof(CanEditSelectedRule))]
        private void MoveRuleDown()
        {
            if (SelectedRule == null || SelectedMappingSet?.IsSystemDefault == true) return;

            var index = MappingRules.IndexOf(SelectedRule);
            if (index < MappingRules.Count - 1)
            {
                MappingRules.Move(index, index + 1);

                // Update the set's rules
                SelectedMappingSet.Rules = MappingRules.Select(r => r.ToMappingRule()).ToList();
                SelectedMappingSet.UpdatedAt = DateTime.UtcNow;

                IsModified = true;
            }
        }

        #endregion

        #region Save/Load Commands

        [RelayCommand]
        private async Task SaveMappingsAsync()
        {
            try
            {
                IsLoading = true;
                StatusMessage = "Saving mapping sets...";

                // Update rules in selected set if it's not read-only
                if (SelectedMappingSet != null && !SelectedMappingSet.IsSystemDefault)
                {
                    SelectedMappingSet.Rules = MappingRules.Select(vm => vm.ToMappingRule()).ToList();
                    SelectedMappingSet.UpdatedAt = DateTime.UtcNow;
                }

                // Load current v2 settings or create new
                var settingsV2 = await _configurationService.LoadConfigurationAsync<CamBridgeSettingsV2>()
                                 ?? new CamBridgeSettingsV2();

                // Update mapping sets - nur User Sets speichern!
                settingsV2.MappingSets = MappingSets.Where(s => !s.IsSystemDefault).ToList();

                // Save
                await _configurationService.SaveConfigurationAsync(settingsV2);

                IsModified = false;
                StatusMessage = "Mapping sets saved successfully";

                _logger.LogInformation($"Saved {settingsV2.MappingSets.Count} user mapping sets");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to save mapping sets");
                StatusMessage = "Failed to save mapping sets";
                MessageBox.Show($"Error saving mapping sets: {ex.Message}", "Error",
                    MessageBoxButton.OK, MessageBoxImage.Error);
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task ImportMappingsAsync()
        {
            try
            {
                var dialog = new OpenFileDialog
                {
                    Title = "Import Mapping Configuration",
                    Filter = "JSON files (*.json)|*.json|All files (*.*)|*.*",
                    DefaultExt = ".json"
                };

                if (dialog.ShowDialog() == true)
                {
                    IsLoading = true;
                    StatusMessage = "Importing mappings...";

                    // Load mappings from file
                    if (_mappingConfiguration != null)
                    {
                        await _mappingConfiguration.LoadConfigurationAsync(dialog.FileName);
                        var rules = _mappingConfiguration.GetMappingRules().ToList();

                        if (rules.Count > 0)
                        {
                            // Create new set from imported rules
                            var importedSet = new MappingSet
                            {
                                Name = $"Imported from {Path.GetFileName(dialog.FileName)}",
                                Description = $"Imported on {DateTime.Now:yyyy-MM-dd HH:mm}",
                                Rules = rules,
                                IsSystemDefault = false,
                                CreatedAt = DateTime.UtcNow,
                                UpdatedAt = DateTime.UtcNow
                            };

                            MappingSets.Add(importedSet);
                            SelectedMappingSet = importedSet;
                            IsModified = true;
                            StatusMessage = $"Imported {rules.Count} mapping rules";
                        }
                        else
                        {
                            StatusMessage = "No mapping rules found in file";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to import mappings");
                MessageBox.Show($"Error importing mappings: {ex.Message}", "Error",
                    MessageBoxButton.OK, MessageBoxImage.Error);
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand(CanExecute = nameof(CanExportMappings))]
        private async Task ExportMappingsAsync()
        {
            if (SelectedMappingSet == null) return;

            try
            {
                var dialog = new SaveFileDialog
                {
                    Title = "Export Mapping Configuration",
                    Filter = "JSON files (*.json)|*.json|All files (*.*)|*.*",
                    DefaultExt = ".json",
                    FileName = $"{SelectedMappingSet.Name.Replace("[System]", "").Trim()}_{DateTime.Now:yyyyMMdd_HHmmss}.json"
                };

                if (dialog.ShowDialog() == true)
                {
                    IsLoading = true;
                    StatusMessage = "Exporting mappings...";

                    if (_mappingConfiguration != null)
                    {
                        await _mappingConfiguration.SaveConfigurationAsync(SelectedMappingSet.Rules, dialog.FileName);
                        StatusMessage = $"Exported {SelectedMappingSet.Rules.Count} rules to {Path.GetFileName(dialog.FileName)}";
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to export mappings");
                MessageBox.Show($"Error exporting mappings: {ex.Message}", "Error",
                    MessageBoxButton.OK, MessageBoxImage.Error);
            }
            finally
            {
                IsLoading = false;
            }
        }

        private bool CanExportMappings() => SelectedMappingSet != null;

        [RelayCommand]
        private async Task TestMappingAsync()
        {
            if (SelectedMappingSet == null)
            {
                MessageBox.Show("Please select a mapping set to test", "No Mapping Set",
                    MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            try
            {
                IsLoading = true;
                StatusMessage = "Testing mapping configuration...";

                // Create test data
                var testData = new System.Collections.Generic.Dictionary<string, string>
                {
                    { "examid", "TEST001" },
                    { "name", "Test, Patient" },
                    { "birthdate", "1990-01-15" },
                    { "gender", "M" },
                    { "comment", "Test mapping" },
                    { "patientid", "PAT001" },
                    { "Make", "RICOH" },
                    { "Model", "G900 II" },
                    { "DateTimeOriginal", DateTime.Now.ToString("yyyy:MM:dd HH:mm:ss") },
                    { "Software", "CamBridge Test" }
                };

                var results = new System.Text.StringBuilder();
                results.AppendLine($"Testing Mapping Set: {SelectedMappingSet.Name}");
                results.AppendLine($"Rules: {SelectedMappingSet.Rules.Count}");
                results.AppendLine();

                int successCount = 0;
                int errorCount = 0;

                foreach (var rule in SelectedMappingSet.Rules)
                {
                    try
                    {
                        if (testData.TryGetValue(rule.SourceField, out var sourceValue))
                        {
                            var transformedValue = rule.ApplyTransform(sourceValue);
                            results.AppendLine($"âœ“ {rule.SourceField} â†’ {rule.DicomTag}: '{transformedValue}'");
                            successCount++;
                        }
                        else
                        {
                            results.AppendLine($"âš  {rule.SourceField}: No test data available");
                        }
                    }
                    catch (Exception ex)
                    {
                        results.AppendLine($"âœ— {rule.SourceField}: Error - {ex.Message}");
                        errorCount++;
                    }
                }

                results.AppendLine();
                results.AppendLine($"Summary: {successCount} successful, {errorCount} errors");

                // Show results
                MessageBox.Show(results.ToString(), "Mapping Test Results",
                    MessageBoxButton.OK,
                    errorCount > 0 ? MessageBoxImage.Warning : MessageBoxImage.Information);

                StatusMessage = $"Test completed: {successCount} successful, {errorCount} errors";
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to test mappings");
                MessageBox.Show($"Error testing mappings: {ex.Message}", "Error",
                    MessageBoxButton.OK, MessageBoxImage.Error);
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand(CanExecute = nameof(CanEditSelectedRule))]
        private void SelectDicomTag()
        {
            if (SelectedRule == null || SelectedMappingSet?.IsSystemDefault == true) return;

            var dialog = new DicomTagBrowserDialog
            {
                Owner = Application.Current.MainWindow
            };

            if (dialog.ShowDialog() == true && dialog.SelectedTag != null)
            {
                // Convert DicomTag object to string format
                SelectedRule.DicomTagString = dialog.SelectedTag.ToString();
                UpdatePreview();

                // Update the set
                if (SelectedMappingSet != null)
                {
                    SelectedMappingSet.UpdatedAt = DateTime.UtcNow;
                    IsModified = true;
                }
            }
        }

        #endregion

        #region Template Commands

        [RelayCommand(CanExecute = nameof(CanEditCurrentSet))]
        private void ApplyRicohTemplate()
        {
            if (SelectedMappingSet == null || SelectedMappingSet.IsSystemDefault) return;

            if (MessageBox.Show(
                "This will replace all current mappings with the Ricoh G900 II template. Continue?",
                "Apply Template",
                MessageBoxButton.YesNo,
                MessageBoxImage.Question) != MessageBoxResult.Yes)
            {
                return;
            }

            // Find the Ricoh system template
            var ricohTemplate = MappingSets.FirstOrDefault(s => s.Name.Contains("Ricoh") && s.IsSystemDefault);
            if (ricohTemplate != null)
            {
                MappingRules.Clear();
                foreach (var rule in ricohTemplate.Rules)
                {
                    // Create copies of the rules
                    var newRule = new MappingRule
                    {
                        SourceField = rule.SourceField,
                        DicomTag = rule.DicomTag,
                        Description = rule.Description,
                        SourceType = rule.SourceType,
                        Transform = rule.Transform,
                        Required = rule.Required,
                        DefaultValue = rule.DefaultValue
                    };
                    var vm = CreateRuleViewModel(newRule);
                    MappingRules.Add(vm);
                }

                // Update the set
                SelectedMappingSet.Rules = MappingRules.Select(r => r.ToMappingRule()).ToList();
                SelectedMappingSet.UpdatedAt = DateTime.UtcNow;

                IsModified = true;
                StatusMessage = "Ricoh template applied";
            }
        }

        [RelayCommand(CanExecute = nameof(CanEditCurrentSet))]
        private void ApplyMinimalTemplate()
        {
            if (SelectedMappingSet == null || SelectedMappingSet.IsSystemDefault) return;

            if (MessageBox.Show(
                "This will replace all current mappings with a minimal template. Continue?",
                "Apply Template",
                MessageBoxButton.YesNo,
                MessageBoxImage.Question) != MessageBoxResult.Yes)
            {
                return;
            }

            // Find the minimal system template
            var minimalTemplate = MappingSets.FirstOrDefault(s => s.Name.Contains("Minimal") && s.IsSystemDefault);
            if (minimalTemplate != null)
            {
                MappingRules.Clear();
                foreach (var rule in minimalTemplate.Rules)
                {
                    // Create copies of the rules
                    var newRule = new MappingRule
                    {
                        SourceField = rule.SourceField,
                        DicomTag = rule.DicomTag,
                        Description = rule.Description,
                        SourceType = rule.SourceType,
                        Transform = rule.Transform,
                        Required = rule.Required,
                        DefaultValue = rule.DefaultValue
                    };
                    var vm = CreateRuleViewModel(newRule);
                    MappingRules.Add(vm);
                }

                // Update the set
                SelectedMappingSet.Rules = MappingRules.Select(r => r.ToMappingRule()).ToList();
                SelectedMappingSet.UpdatedAt = DateTime.UtcNow;

                IsModified = true;
                StatusMessage = "Minimal template applied";
            }
        }

        [RelayCommand(CanExecute = nameof(CanEditCurrentSet))]
        private void ApplyFullTemplate()
        {
            if (SelectedMappingSet == null || SelectedMappingSet.IsSystemDefault) return;

            if (MessageBox.Show(
                "This will replace all current mappings with a comprehensive template. Continue?",
                "Apply Template",
                MessageBoxButton.YesNo,
                MessageBoxImage.Question) != MessageBoxResult.Yes)
            {
                return;
            }

            // Find the full system template
            var fullTemplate = MappingSets.FirstOrDefault(s => s.Name.Contains("Full") && s.IsSystemDefault);
            if (fullTemplate != null)
            {
                MappingRules.Clear();
                foreach (var rule in fullTemplate.Rules)
                {
                    // Create copies of the rules
                    var newRule = new MappingRule
                    {
                        SourceField = rule.SourceField,
                        DicomTag = rule.DicomTag,
                        Description = rule.Description,
                        SourceType = rule.SourceType,
                        Transform = rule.Transform,
                        Required = rule.Required,
                        DefaultValue = rule.DefaultValue
                    };
                    var vm = CreateRuleViewModel(newRule);
                    MappingRules.Add(vm);
                }

                // Update the set
                SelectedMappingSet.Rules = MappingRules.Select(r => r.ToMappingRule()).ToList();
                SelectedMappingSet.UpdatedAt = DateTime.UtcNow;

                IsModified = true;
                StatusMessage = "Full template applied";
            }
        }

        #endregion

        #region Preview

        public void UpdatePreview()
        {
            if (SelectedRule == null || string.IsNullOrWhiteSpace(PreviewInput))
            {
                PreviewOutput = string.Empty;
                return;
            }

            try
            {
                var rule = SelectedRule.ToMappingRule();
                PreviewOutput = rule.ApplyTransform(PreviewInput);
            }
            catch (Exception ex)
            {
                PreviewOutput = $"Error: {ex.Message}";
            }
        }

        partial void OnPreviewInputChanged(string? value)
        {
            UpdatePreview();
        }

        partial void OnSelectedRuleChanged(MappingRuleViewModel? value)
        {
            UpdatePreview();
        }

        partial void OnSelectedMappingSetChanged(MappingSet? value)
        {
            if (value == null) return;

            CanEditCurrentSet = !value.IsSystemDefault;
            LoadRulesFromSet(value);

            // Update command states
            DuplicateMappingSetCommand.NotifyCanExecuteChanged();
            DeleteMappingSetCommand.NotifyCanExecuteChanged();
            AddRuleCommand.NotifyCanExecuteChanged();
            RemoveRuleCommand.NotifyCanExecuteChanged();
            MoveRuleUpCommand.NotifyCanExecuteChanged();
            MoveRuleDownCommand.NotifyCanExecuteChanged();
            SelectDicomTagCommand.NotifyCanExecuteChanged();
            ExportMappingsCommand.NotifyCanExecuteChanged();
            ApplyRicohTemplateCommand.NotifyCanExecuteChanged();
            ApplyMinimalTemplateCommand.NotifyCanExecuteChanged();
            ApplyFullTemplateCommand.NotifyCanExecuteChanged();
        }

        private void LoadRulesFromSet(MappingSet set)
        {
            IsLoading = true;
            try
            {
                MappingRules.Clear();

                if (set.Rules != null)
                {
                    foreach (var rule in set.Rules)
                    {
                        var vm = CreateRuleViewModel(rule);
                        MappingRules.Add(vm);
                    }

                    StatusMessage = $"Loaded {set.Rules.Count} rules from '{set.Name}'";
                }
                else
                {
                    StatusMessage = $"Selected '{set.Name}' (no rules defined)";
                }
            }
            finally
            {
                IsLoading = false;
            }
        }

        #endregion

        #region Inner Classes

        public class SourceFieldInfo
        {
            public string FieldName { get; }
            public string DisplayName { get; }
            public string DataType { get; }

            public SourceFieldInfo(string fieldName, string displayName, string dataType)
            {
                FieldName = fieldName;
                DisplayName = displayName;
                DataType = dataType;
            }
        }

        #endregion
    }

    /// <summary>
    /// ViewModel wrapper for MappingRule
    /// </summary>
    public partial class MappingRuleViewModel : ObservableObject
    {
        private readonly MappingRule _rule;

        // UI-friendly properties that map to Core properties
        [ObservableProperty] private string _displayName;
        [ObservableProperty] private string _sourceType;
        [ObservableProperty] private string _sourceField;
        [ObservableProperty] private string _dicomTagString;
        [ObservableProperty] private ValueTransform _transform;
        [ObservableProperty] private bool _isRequired;
        [ObservableProperty] private string? _defaultValue;

        public MappingRuleViewModel(MappingRule rule)
        {
            _rule = rule;

            // Map Core properties to UI properties
            _displayName = rule.Description ?? $"{rule.SourceType}.{rule.SourceField}";
            _sourceType = rule.SourceType ?? "QRBridge";
            _sourceField = rule.SourceField;
            _dicomTagString = rule.DicomTag;
            _transform = Enum.TryParse<ValueTransform>(rule.Transform, out var t) ? t : ValueTransform.None;
            _isRequired = rule.Required;
            _defaultValue = rule.DefaultValue;
        }

        public MappingRule ToMappingRule()
        {
            // Update Core rule with UI values
            _rule.Description = DisplayName;
            _rule.SourceType = SourceType;
            _rule.SourceField = SourceField;
            _rule.DicomTag = DicomTagString;
            _rule.Transform = Transform.ToString();
            _rule.Required = IsRequired;
            _rule.DefaultValue = DefaultValue;

            return _rule;
        }

        partial void OnDicomTagStringChanged(string value)
        {
            // Validate DICOM tag format
            try
            {
                var tag = DicomTag.Parse(value);
                // Valid tag
            }
            catch
            {
                // Invalid tag format - could show error in UI
            }
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\ViewModels\PipelineConfigViewModel.cs
================================================================================

// src\CamBridge.Config\ViewModels\PipelineConfigViewModel.cs
// Version: 0.7.7
// Description: Pipeline Configuration ViewModel - Zero Global Settings!

using CamBridge.Config.Services;
using CamBridge.Core;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Runtime.Versioning;
using System.Threading.Tasks;
using System.Windows;
using System.Collections.Generic;

namespace CamBridge.Config.ViewModels
{
    [SupportedOSPlatform("windows")]
    public partial class PipelineConfigViewModel : ViewModelBase
    {
        private readonly IConfigurationService _configurationService;
        private CamBridgeSettingsV2? _originalSettings;
        private bool _isInitializing = false;

        // Collections
        [ObservableProperty]
        private ObservableCollection<PipelineConfiguration> _pipelines = new();

        [ObservableProperty]
        private ObservableCollection<MappingSet> _mappingSets = new();

        // Selected Pipeline
        private PipelineConfiguration? _selectedPipeline;
        public PipelineConfiguration? SelectedPipeline
        {
            get => _selectedPipeline;
            set
            {
                if (SetProperty(ref _selectedPipeline, value))
                {
                    OnPropertyChanged(nameof(SelectedPipelineDicomOverrides));
                    OnPropertyChanged(nameof(UseCustomLogging));
                    OnPropertyChanged(nameof(UseCustomNotifications));
                    UpdateCommands();
                }
            }
        }

        // Pipeline-specific properties for binding
        public DicomOverrides? SelectedPipelineDicomOverrides
        {
            get
            {
                if (SelectedPipeline?.DicomOverrides == null && SelectedPipeline != null)
                {
                    SelectedPipeline.DicomOverrides = new DicomOverrides();
                }
                return SelectedPipeline?.DicomOverrides;
            }
        }

        // ComboBox Collections
        public ObservableCollection<string> LogLevels { get; } = new()
        {
            "Trace", "Debug", "Information", "Warning", "Error", "Critical"
        };

        public ObservableCollection<PostProcessingAction> ProcessingActions { get; } = new()
        {
            PostProcessingAction.Leave,
            PostProcessingAction.Archive,
            PostProcessingAction.Delete,
            PostProcessingAction.MoveToError
        };

        public ObservableCollection<OutputOrganization> OutputOrganizations { get; } = new()
        {
            OutputOrganization.None,
            OutputOrganization.ByPatient,
            OutputOrganization.ByDate,
            OutputOrganization.ByPatientAndDate
        };

        public ObservableCollection<NotificationLevel> NotificationLevels { get; } = new()
        {
            NotificationLevel.Information,
            NotificationLevel.Warning,
            NotificationLevel.Error,
            NotificationLevel.Critical
        };

        // Pipeline-specific logging settings
        [ObservableProperty]
        private bool _useCustomLogging;

        [ObservableProperty]
        private string _pipelineLogLevel = "Information";

        [ObservableProperty]
        private string _pipelineLogFolder = @"C:\CamBridge\Logs";

        [ObservableProperty]
        private int _pipelineLogRetentionDays = 30;

        // Pipeline-specific notification settings
        [ObservableProperty]
        private bool _useCustomNotifications;

        [ObservableProperty]
        private string? _pipelineEmailTo;

        [ObservableProperty]
        private NotificationLevel _pipelineAlertLevel = NotificationLevel.Warning;

        [ObservableProperty]
        private bool _pipelineSendDailySummary;

        [ObservableProperty]
        private bool _pipelineAlertOnErrors = true;

        // Status properties
        [ObservableProperty]
        private bool _isLoading;

        [ObservableProperty]
        private bool _isSaving;

        [ObservableProperty]
        private string _statusMessage = "Ready";

        [ObservableProperty]
        private bool _isError;

        [ObservableProperty]
        private bool _hasUnsavedChanges;

        [ObservableProperty]
        private int _unsavedChangesCount;

        [ObservableProperty]
        private bool _selectedPipelineHasChanges;

        public PipelineConfigViewModel(IConfigurationService configurationService)
        {
            _configurationService = configurationService;

            // Subscribe to collection changes
            Pipelines.CollectionChanged += (s, e) =>
            {
                if (!IsLoading && !_isInitializing)
                {
                    HasUnsavedChanges = true;
                    UnsavedChangesCount++;
                }
            };
        }

        public async Task InitializeAsync()
        {
            try
            {
                _isInitializing = true;
                await LoadSettingsAsync();
            }
            finally
            {
                _isInitializing = false;
            }
        }

        [RelayCommand]
        private async Task LoadSettingsAsync()
        {
            try
            {
                IsLoading = true;
                IsError = false;
                StatusMessage = "Loading pipeline configuration...";

                var settings = await _configurationService.LoadConfigurationAsync<CamBridgeSettingsV2>();
                if (settings != null)
                {
                    _originalSettings = settings;
                    MapFromSettings(settings);

                    // Create system default mapping sets if needed
                    EnsureSystemDefaults();

                    HasUnsavedChanges = false;
                    UnsavedChangesCount = 0;
                    StatusMessage = $"Loaded {Pipelines.Count} pipelines";
                }
                else
                {
                    // Create default settings
                    CreateDefaultPipeline();
                    StatusMessage = "Created default pipeline configuration";
                }
            }
            catch (Exception ex)
            {
                StatusMessage = $"Error loading settings: {ex.Message}";
                IsError = true;
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand(CanExecute = nameof(CanSaveAll))]
        private async Task SaveAllAsync()
        {
            try
            {
                IsSaving = true;
                IsError = false;
                StatusMessage = "Saving all pipelines...";

                var settings = MapToSettings();
                await _configurationService.SaveConfigurationAsync(settings);

                _originalSettings = settings;
                HasUnsavedChanges = false;
                UnsavedChangesCount = 0;
                SelectedPipelineHasChanges = false;
                StatusMessage = "All pipelines saved successfully";

                // Notify success
                MessageBox.Show("Pipeline configuration saved successfully!",
                               "Success",
                               MessageBoxButton.OK,
                               MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                StatusMessage = $"Error saving: {ex.Message}";
                IsError = true;

                MessageBox.Show($"Failed to save configuration:\n{ex.Message}",
                               "Error",
                               MessageBoxButton.OK,
                               MessageBoxImage.Error);
            }
            finally
            {
                IsSaving = false;
            }
        }

        private bool CanSaveAll() => HasUnsavedChanges && !IsLoading && !IsSaving;

        [RelayCommand]
        private void AddPipeline()
        {
            var newPipeline = new PipelineConfiguration
            {
                Name = $"Pipeline {Pipelines.Count + 1}",
                Description = "New pipeline configuration",
                Enabled = true,
                WatchSettings = new PipelineWatchSettings
                {
                    Path = @"C:\CamBridge\NewPipeline\Input",
                    FilePattern = "*.jpg;*.jpeg",
                    IncludeSubdirectories = false
                },
                ProcessingOptions = new ProcessingOptions
                {
                    ArchiveFolder = @"C:\CamBridge\NewPipeline\Archive",
                    ErrorFolder = @"C:\CamBridge\NewPipeline\Errors",
                    DeadLetterFolder = @"C:\CamBridge\NewPipeline\DeadLetters",
                    SuccessAction = PostProcessingAction.Archive,
                    FailureAction = PostProcessingAction.MoveToError,
                    CreateBackup = true,
                    BackupFolder = @"C:\CamBridge\NewPipeline\Backup",
                    MaxConcurrentProcessing = 2,
                    RetryOnFailure = true,
                    MaxRetryAttempts = 3,
                    OutputOrganization = OutputOrganization.ByPatientAndDate
                },
                MappingSetId = MappingSets.FirstOrDefault(m => !m.IsSystemDefault)?.Id
            };

            // Add to collection
            Pipelines.Add(newPipeline);
            SelectedPipeline = newPipeline;

            HasUnsavedChanges = true;
            UnsavedChangesCount++;
            StatusMessage = $"Added new pipeline: {newPipeline.Name}";
        }

        [RelayCommand(CanExecute = nameof(CanDeletePipeline))]
        private void DeletePipeline()
        {
            if (SelectedPipeline == null) return;

            var result = MessageBox.Show(
                $"Are you sure you want to delete the pipeline '{SelectedPipeline.Name}'?\n\nThis action cannot be undone.",
                "Confirm Delete",
                MessageBoxButton.YesNo,
                MessageBoxImage.Warning);

            if (result == MessageBoxResult.Yes)
            {
                var pipelineName = SelectedPipeline.Name;
                Pipelines.Remove(SelectedPipeline);
                SelectedPipeline = Pipelines.FirstOrDefault();

                HasUnsavedChanges = true;
                UnsavedChangesCount++;
                StatusMessage = $"Deleted pipeline: {pipelineName}";
            }
        }

        private bool CanDeletePipeline() => SelectedPipeline != null && Pipelines.Count > 1;

        [RelayCommand(CanExecute = nameof(CanApplyPipeline))]
        private void ApplyPipeline()
        {
            if (SelectedPipeline == null) return;

            // Mark changes as applied
            SelectedPipelineHasChanges = false;
            StatusMessage = $"Applied changes to {SelectedPipeline.Name}";
        }

        private bool CanApplyPipeline() => SelectedPipelineHasChanges && !IsLoading && !IsSaving;

        [RelayCommand(CanExecute = nameof(CanResetPipeline))]
        private void ResetPipeline()
        {
            if (SelectedPipeline == null || _originalSettings == null) return;

            // Find original pipeline by ID
            var originalPipeline = _originalSettings.Pipelines.FirstOrDefault(p => p.Id == SelectedPipeline.Id);
            if (originalPipeline != null)
            {
                // Reset to original values
                var index = Pipelines.IndexOf(SelectedPipeline);
                if (index >= 0)
                {
                    Pipelines[index] = ClonePipeline(originalPipeline);
                    SelectedPipeline = Pipelines[index];
                }
            }

            SelectedPipelineHasChanges = false;
            StatusMessage = $"Reset {SelectedPipeline.Name} to last saved state";
        }

        private bool CanResetPipeline() => SelectedPipelineHasChanges && !IsLoading && !IsSaving;

        private void MapFromSettings(CamBridgeSettingsV2 settings)
        {
            // Clear existing
            Pipelines.Clear();
            MappingSets.Clear();

            // Map mapping sets
            foreach (var mappingSet in settings.MappingSets)
            {
                MappingSets.Add(mappingSet);
            }

            // Map pipelines
            foreach (var pipeline in settings.Pipelines)
            {
                var clonedPipeline = ClonePipeline(pipeline);

                // Subscribe to property changes
                clonedPipeline.PropertyChanged += Pipeline_PropertyChanged;
                clonedPipeline.WatchSettings.PropertyChanged += Pipeline_PropertyChanged;
                clonedPipeline.ProcessingOptions.PropertyChanged += Pipeline_PropertyChanged;

                Pipelines.Add(clonedPipeline);
            }

            // Select first pipeline
            SelectedPipeline = Pipelines.FirstOrDefault();
        }

        private void Pipeline_PropertyChanged(object? sender, PropertyChangedEventArgs e)
        {
            if (!IsLoading && !_isInitializing)
            {
                SelectedPipelineHasChanges = true;
                HasUnsavedChanges = true;
            }
        }

        private CamBridgeSettingsV2 MapToSettings()
        {
            var settings = new CamBridgeSettingsV2
            {
                Version = "2.0",
                GlobalDicomSettings = _originalSettings?.GlobalDicomSettings ?? new DicomSettings(),
                DefaultProcessingOptions = _originalSettings?.DefaultProcessingOptions ?? new ProcessingOptions(),
                Logging = _originalSettings?.Logging ?? new LoggingSettings(),
                Service = _originalSettings?.Service ?? new ServiceSettings(),
                Notifications = _originalSettings?.Notifications ?? new NotificationSettings()
            };

            // Map pipelines
            settings.Pipelines.Clear();
            foreach (var pipeline in Pipelines)
            {
                settings.Pipelines.Add(ClonePipeline(pipeline));
            }

            // Map mapping sets
            settings.MappingSets.Clear();
            foreach (var mappingSet in MappingSets)
            {
                settings.MappingSets.Add(mappingSet);
            }

            return settings;
        }

        private PipelineConfiguration ClonePipeline(PipelineConfiguration source)
        {
            return new PipelineConfiguration
            {
                Id = source.Id,
                Name = source.Name,
                Description = source.Description,
                Enabled = source.Enabled,
                WatchSettings = new PipelineWatchSettings
                {
                    Path = source.WatchSettings.Path,
                    FilePattern = source.WatchSettings.FilePattern,
                    IncludeSubdirectories = source.WatchSettings.IncludeSubdirectories,
                    OutputPath = source.WatchSettings.OutputPath,
                    MinimumFileAgeSeconds = source.WatchSettings.MinimumFileAgeSeconds
                },
                ProcessingOptions = CloneProcessingOptions(source.ProcessingOptions),
                DicomOverrides = source.DicomOverrides != null ? new DicomOverrides
                {
                    InstitutionName = source.DicomOverrides.InstitutionName,
                    InstitutionDepartment = source.DicomOverrides.InstitutionDepartment,
                    StationName = source.DicomOverrides.StationName
                } : null,
                MappingSetId = source.MappingSetId,
                CreatedAt = source.CreatedAt,
                UpdatedAt = DateTime.UtcNow
            };
        }

        private ProcessingOptions CloneProcessingOptions(ProcessingOptions source)
        {
            return new ProcessingOptions
            {
                SuccessAction = source.SuccessAction,
                FailureAction = source.FailureAction,
                ArchiveFolder = source.ArchiveFolder,
                ErrorFolder = source.ErrorFolder,
                BackupFolder = source.BackupFolder,
                CreateBackup = source.CreateBackup,
                MaxConcurrentProcessing = source.MaxConcurrentProcessing,
                RetryOnFailure = source.RetryOnFailure,
                MaxRetryAttempts = source.MaxRetryAttempts,
                OutputOrganization = source.OutputOrganization,
                ProcessExistingOnStartup = source.ProcessExistingOnStartup,
                DeadLetterFolder = source.DeadLetterFolder
            };
        }

        private void CreateDefaultPipeline()
        {
            // Create default mapping set
            var defaultMappingSet = new MappingSet
            {
                Name = "Ricoh Standard",
                Description = "Standard mapping for Ricoh cameras",
                IsSystemDefault = false
            };
            MappingSets.Add(defaultMappingSet);

            // Create default pipeline
            var defaultPipeline = new PipelineConfiguration
            {
                Name = "Default Pipeline",
                Description = "Default processing pipeline",
                Enabled = true,
                WatchSettings = new PipelineWatchSettings
                {
                    Path = @"C:\CamBridge\Input",
                    FilePattern = "*.jpg;*.jpeg",
                    IncludeSubdirectories = false
                },
                ProcessingOptions = new ProcessingOptions
                {
                    ArchiveFolder = @"C:\CamBridge\Archive",
                    ErrorFolder = @"C:\CamBridge\Errors",
                    DeadLetterFolder = @"C:\CamBridge\DeadLetters",
                    SuccessAction = PostProcessingAction.Archive,
                    FailureAction = PostProcessingAction.MoveToError,
                    CreateBackup = true,
                    BackupFolder = @"C:\CamBridge\Backup",
                    MaxConcurrentProcessing = 2,
                    RetryOnFailure = true,
                    MaxRetryAttempts = 3,
                    OutputOrganization = OutputOrganization.ByPatientAndDate
                },
                MappingSetId = defaultMappingSet.Id
            };

            defaultPipeline.PropertyChanged += Pipeline_PropertyChanged;
            defaultPipeline.WatchSettings.PropertyChanged += Pipeline_PropertyChanged;
            defaultPipeline.ProcessingOptions.PropertyChanged += Pipeline_PropertyChanged;

            Pipelines.Add(defaultPipeline);
            SelectedPipeline = defaultPipeline;
        }

        private void EnsureSystemDefaults()
        {
            // Check if we have system default mapping sets
            if (!MappingSets.Any(m => m.IsSystemDefault))
            {
                // Add Ricoh Standard as system default
                var ricohStandard = new MappingSet
                {
                    Id = Guid.Parse("00000000-0000-0000-0000-000000000001"),
                    Name = "Ricoh Standard",
                    Description = "Built-in mapping for Ricoh cameras",
                    IsSystemDefault = true,
                    CreatedAt = DateTime.UtcNow,
                    UpdatedAt = DateTime.UtcNow
                };

                MappingSets.Insert(0, ricohStandard);
            }
        }

        private void UpdateCommands()
        {
            DeletePipelineCommand.NotifyCanExecuteChanged();
            ApplyPipelineCommand.NotifyCanExecuteChanged();
            ResetPipelineCommand.NotifyCanExecuteChanged();
        }

        // Handle property changes
        protected override void OnPropertyChanged(PropertyChangedEventArgs e)
        {
            base.OnPropertyChanged(e);

            // Update save command when changes occur
            if (e.PropertyName == nameof(HasUnsavedChanges))
            {
                SaveAllCommand.NotifyCanExecuteChanged();
            }
        }
    }
}



================================================================================
FILE: src\CamBridge.Config\ViewModels\PipelineStatusViewModel.cs
================================================================================

/**************************************************************************
*  PipelineStatusViewModel.cs                                             *
*  PATH: src\CamBridge.Config\ViewModels\PipelineStatusViewModel.cs      *
*  VERSION: 0.7.11 | SIZE: ~2.5KB | MODIFIED: 2025-06-13                 *
*                                                                         *
*  DESCRIPTION: ViewModel for individual pipeline status display          *
*  Copyright (c) 2025 Claude's Improbably Reliable Software Solutions     *
**************************************************************************/

using CommunityToolkit.Mvvm.ComponentModel;
using System;

namespace CamBridge.Config.ViewModels
{
    public partial class PipelineStatusViewModel : ObservableObject
    {
        private Guid _pipelineId;
        private string _pipelineName = string.Empty;
        private bool _isEnabled;
        private string _status = "Unknown";
        private int _processedToday;
        private int _errorsToday;
        private int _queueLength;
        private double _successRate;
        private DateTime? _lastProcessed;
        private string _watchFolder = string.Empty;

        public Guid PipelineId
        {
            get => _pipelineId;
            set => SetProperty(ref _pipelineId, value);
        }

        public string PipelineName
        {
            get => _pipelineName;
            set => SetProperty(ref _pipelineName, value);
        }

        public bool IsEnabled
        {
            get => _isEnabled;
            set => SetProperty(ref _isEnabled, value);
        }

        public string Status
        {
            get => _status;
            set => SetProperty(ref _status, value);
        }

        public int ProcessedToday
        {
            get => _processedToday;
            set => SetProperty(ref _processedToday, value);
        }

        public int ErrorsToday
        {
            get => _errorsToday;
            set => SetProperty(ref _errorsToday, value);
        }

        public int QueueLength
        {
            get => _queueLength;
            set => SetProperty(ref _queueLength, value);
        }

        public double SuccessRate
        {
            get => _successRate;
            set => SetProperty(ref _successRate, value);
        }

        public DateTime? LastProcessed
        {
            get => _lastProcessed;
            set => SetProperty(ref _lastProcessed, value);
        }

        public string WatchFolder
        {
            get => _watchFolder;
            set => SetProperty(ref _watchFolder, value);
        }

        public string StatusColor => Status switch
        {
            "Processing" => "#4CAF50",
            "Active" => "#2196F3",
            "Idle" => "#FFC107",
            "Disabled" => "#9E9E9E",
            "Error" => "#F44336",
            _ => "#9E9E9E"
        };
    }
}


================================================================================
FILE: src\CamBridge.Config\ViewModels\RecentActivityViewModel.cs
================================================================================

/**************************************************************************
*  RecentActivityViewModel.cs                                             *
*  PATH: src\CamBridge.Config\ViewModels\RecentActivityViewModel.cs      *
*  VERSION: 0.7.11 | SIZE: ~1.3KB | MODIFIED: 2025-06-13                 *
*                                                                         *
*  DESCRIPTION: ViewModel for recent activity display                     *
*  Copyright (c) 2025 Claude's Improbably Reliable Software Solutions     *
**************************************************************************/

using CommunityToolkit.Mvvm.ComponentModel;
using System;

namespace CamBridge.Config.ViewModels
{
    public partial class RecentActivityViewModel : ObservableObject
    {
        private bool _isSuccess;
        private string _message = string.Empty;
        private DateTime _timestamp;
        private string _pipelineName = string.Empty;

        public bool IsSuccess
        {
            get => _isSuccess;
            set => SetProperty(ref _isSuccess, value);
        }

        public string Message
        {
            get => _message;
            set => SetProperty(ref _message, value);
        }

        public DateTime Timestamp
        {
            get => _timestamp;
            set => SetProperty(ref _timestamp, value);
        }

        public string PipelineName
        {
            get => _pipelineName;
            set => SetProperty(ref _pipelineName, value);
        }

        public string StatusIcon => IsSuccess ? "âœ“" : "âœ—";
        public string StatusColor => IsSuccess ? "#4CAF50" : "#F44336";
    }
}


================================================================================
FILE: src\CamBridge.Config\ViewModels\ServiceControlViewModel.cs
================================================================================

// src/CamBridge.Config/ViewModels/ServiceControlViewModel.cs
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using System;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using CamBridge.Config.Services;

namespace CamBridge.Config.ViewModels
{
    public partial class ServiceControlViewModel : ViewModelBase
    {
        private readonly IServiceManager _serviceManager;
        private Timer? _statusTimer;

        [ObservableProperty]
        private ServiceStatus serviceStatus = ServiceStatus.Unknown;

        [ObservableProperty]
        private string statusText = "Checking...";

        [ObservableProperty]
        private string statusColor = "Gray";

        [ObservableProperty]
        private bool canStart = false;

        [ObservableProperty]
        private bool canStop = false;

        [ObservableProperty]
        private bool canRestart = false;

        [ObservableProperty]
        private bool isServiceInstalled = false;

        [ObservableProperty]
        private string? uptime;

        [ObservableProperty]
        private bool requiresElevation = false;

        public ServiceControlViewModel(IServiceManager serviceManager)
        {
            _serviceManager = serviceManager ?? throw new ArgumentNullException(nameof(serviceManager));

            // Start monitoring
            _ = InitializeAsync();
        }

        private async Task InitializeAsync()
        {
            // Check if running as admin
            RequiresElevation = !_serviceManager.IsRunningAsAdministrator();

            // Initial status check
            await RefreshStatusAsync();

            // Start periodic updates
            _statusTimer = new Timer(
                async _ => await RefreshStatusAsync(),
                null,
                TimeSpan.FromSeconds(1),
                TimeSpan.FromSeconds(2));
        }

        [RelayCommand]
        private async Task RefreshStatusAsync()
        {
            try
            {
                // Check if service is installed
                IsServiceInstalled = await _serviceManager.IsServiceInstalledAsync();

                if (!IsServiceInstalled)
                {
                    ServiceStatus = ServiceStatus.Unknown;
                    StatusText = "Service Not Installed";
                    StatusColor = "Red";
                    UpdateButtons();
                    return;
                }

                // Get current status
                ServiceStatus = await _serviceManager.GetServiceStatusAsync();
                UpdateStatusDisplay();
                UpdateButtons();

                // Get uptime if running
                if (ServiceStatus == ServiceStatus.Running)
                {
                    var startTime = await _serviceManager.GetServiceStartTimeAsync();
                    if (startTime.HasValue)
                    {
                        var uptimeSpan = DateTime.Now - startTime.Value;
                        Uptime = FormatUptime(uptimeSpan);
                    }
                }
                else
                {
                    Uptime = null;
                }
            }
            catch (Exception ex)
            {
                StatusText = $"Error: {ex.Message}";
                StatusColor = "Red";
            }
        }

        [RelayCommand]
        private async Task InstallServiceAsync()
        {
            if (RequiresElevation)
            {
                var result = MessageBox.Show(
                    "Installing the service requires administrator privileges. Restart the application as administrator?",
                    "Administrator Required",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Warning);

                if (result == MessageBoxResult.Yes)
                {
                    RestartAsAdministrator();
                }
                return;
            }

            IsLoading = true;

            try
            {
                StatusText = "Installing service...";
                StatusColor = "Orange";

                var success = await _serviceManager.InstallServiceAsync();

                if (success)
                {
                    StatusText = "Service installed successfully";
                    StatusColor = "Green";

                    // Wait a moment for the service to be fully registered
                    await Task.Delay(1000);

                    // Refresh status to update UI
                    await RefreshStatusAsync();

                    MessageBox.Show(
                        "CamBridge Service has been installed successfully!\n\n" +
                        "You can now start the service using the Start button.",
                        "Installation Complete",
                        MessageBoxButton.OK,
                        MessageBoxImage.Information);
                }
                else
                {
                    StatusText = "Failed to install service";
                    StatusColor = "Red";

                    MessageBox.Show(
                        "Failed to install the CamBridge Service.\n\n" +
                        "Please check the Event Viewer for more details.",
                        "Installation Failed",
                        MessageBoxButton.OK,
                        MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                StatusText = "Installation error";
                StatusColor = "Red";

                MessageBox.Show(
                    $"An error occurred while installing the service:\n\n{ex.Message}",
                    "Installation Error",
                    MessageBoxButton.OK,
                    MessageBoxImage.Error);
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task UninstallServiceAsync()
        {
            if (RequiresElevation)
            {
                var result = MessageBox.Show(
                    "Uninstalling the service requires administrator privileges. Restart the application as administrator?",
                    "Administrator Required",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Warning);

                if (result == MessageBoxResult.Yes)
                {
                    RestartAsAdministrator();
                }
                return;
            }

            var confirmResult = MessageBox.Show(
                "Are you sure you want to uninstall the CamBridge Service?\n\n" +
                "This will permanently remove the service from your system.",
                "Confirm Uninstall",
                MessageBoxButton.YesNo,
                MessageBoxImage.Warning);

            if (confirmResult != MessageBoxResult.Yes)
                return;

            IsLoading = true;

            try
            {
                // Stop service first if running
                if (ServiceStatus == ServiceStatus.Running)
                {
                    StatusText = "Stopping service before uninstall...";
                    StatusColor = "Orange";
                    await _serviceManager.StopServiceAsync();
                    await Task.Delay(2000); // Wait for service to stop
                }

                StatusText = "Uninstalling service...";
                StatusColor = "Orange";

                var success = await _serviceManager.UninstallServiceAsync();

                if (success)
                {
                    StatusText = "Service uninstalled";
                    StatusColor = "Gray";

                    // Wait a moment for the service to be fully removed
                    await Task.Delay(1000);

                    // Refresh status to update UI
                    await RefreshStatusAsync();

                    MessageBox.Show(
                        "CamBridge Service has been uninstalled successfully.",
                        "Uninstall Complete",
                        MessageBoxButton.OK,
                        MessageBoxImage.Information);
                }
                else
                {
                    StatusText = "Failed to uninstall service";
                    StatusColor = "Red";

                    MessageBox.Show(
                        "Failed to uninstall the CamBridge Service.\n\n" +
                        "Please check the Event Viewer for more details.",
                        "Uninstall Failed",
                        MessageBoxButton.OK,
                        MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                StatusText = "Uninstall error";
                StatusColor = "Red";

                MessageBox.Show(
                    $"An error occurred while uninstalling the service:\n\n{ex.Message}",
                    "Uninstall Error",
                    MessageBoxButton.OK,
                    MessageBoxImage.Error);
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task StartServiceAsync()
        {
            if (RequiresElevation)
            {
                var result = MessageBox.Show(
                    "Starting the service requires administrator privileges. Restart the application as administrator?",
                    "Administrator Required",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Warning);

                if (result == MessageBoxResult.Yes)
                {
                    RestartAsAdministrator();
                }
                return;
            }

            IsLoading = true;
            CanStart = false;

            try
            {
                StatusText = "Starting service...";
                StatusColor = "Orange";

                var success = await _serviceManager.StartServiceAsync();

                if (success)
                {
                    StatusText = "Service started successfully";
                    StatusColor = "Green";
                }
                else
                {
                    StatusText = "Failed to start service";
                    StatusColor = "Red";
                }

                await RefreshStatusAsync();
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task StopServiceAsync()
        {
            if (RequiresElevation)
            {
                var result = MessageBox.Show(
                    "Stopping the service requires administrator privileges. Restart the application as administrator?",
                    "Administrator Required",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Warning);

                if (result == MessageBoxResult.Yes)
                {
                    RestartAsAdministrator();
                }
                return;
            }

            var confirmResult = MessageBox.Show(
                "Are you sure you want to stop the CamBridge Service? This will halt all file processing.",
                "Confirm Stop",
                MessageBoxButton.YesNo,
                MessageBoxImage.Question);

            if (confirmResult != MessageBoxResult.Yes)
                return;

            IsLoading = true;
            CanStop = false;

            try
            {
                StatusText = "Stopping service...";
                StatusColor = "Orange";

                var success = await _serviceManager.StopServiceAsync();

                if (success)
                {
                    StatusText = "Service stopped";
                    StatusColor = "Gray";
                }
                else
                {
                    StatusText = "Failed to stop service";
                    StatusColor = "Red";
                }

                await RefreshStatusAsync();
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private async Task RestartServiceAsync()
        {
            if (RequiresElevation)
            {
                var result = MessageBox.Show(
                    "Restarting the service requires administrator privileges. Restart the application as administrator?",
                    "Administrator Required",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Warning);

                if (result == MessageBoxResult.Yes)
                {
                    RestartAsAdministrator();
                }
                return;
            }

            IsLoading = true;
            CanRestart = false;

            try
            {
                StatusText = "Restarting service...";
                StatusColor = "Orange";

                var success = await _serviceManager.RestartServiceAsync();

                if (success)
                {
                    StatusText = "Service restarted successfully";
                    StatusColor = "Green";
                }
                else
                {
                    StatusText = "Failed to restart service";
                    StatusColor = "Red";
                }

                await RefreshStatusAsync();
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        private void OpenServices()
        {
            try
            {
                var processInfo = new System.Diagnostics.ProcessStartInfo
                {
                    FileName = "services.msc",
                    UseShellExecute = true
                };
                System.Diagnostics.Process.Start(processInfo);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to open Services: {ex.Message}", "Error",
                    MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        [RelayCommand]
        private void OpenEventViewer()
        {
            try
            {
                var processInfo = new System.Diagnostics.ProcessStartInfo
                {
                    FileName = "eventvwr.msc",
                    UseShellExecute = true
                };
                System.Diagnostics.Process.Start(processInfo);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to open Event Viewer: {ex.Message}", "Error",
                    MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void UpdateStatusDisplay()
        {
            (StatusText, StatusColor) = ServiceStatus switch
            {
                ServiceStatus.Running => ("Running", "Green"),
                ServiceStatus.Stopped => ("Stopped", "Gray"),
                ServiceStatus.Starting => ("Starting...", "Orange"),
                ServiceStatus.Stopping => ("Stopping...", "Orange"),
                _ => ("Unknown", "Red")
            };
        }

        private void UpdateButtons()
        {
            CanStart = IsServiceInstalled && ServiceStatus == ServiceStatus.Stopped && !IsLoading;
            CanStop = IsServiceInstalled && ServiceStatus == ServiceStatus.Running && !IsLoading;
            CanRestart = IsServiceInstalled && ServiceStatus == ServiceStatus.Running && !IsLoading;
        }

        private string FormatUptime(TimeSpan uptime)
        {
            if (uptime.TotalDays >= 1)
                return $"{(int)uptime.TotalDays}d {uptime.Hours}h {uptime.Minutes}m";
            else if (uptime.TotalHours >= 1)
                return $"{uptime.Hours}h {uptime.Minutes}m {uptime.Seconds}s";
            else
                return $"{uptime.Minutes}m {uptime.Seconds}s";
        }

        private void RestartAsAdministrator()
        {
            try
            {
                var currentProcess = System.Diagnostics.Process.GetCurrentProcess();
                var fileName = currentProcess.MainModule?.FileName;

                if (string.IsNullOrEmpty(fileName))
                {
                    MessageBox.Show("Could not determine application path", "Error",
                        MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }

                var startInfo = new System.Diagnostics.ProcessStartInfo
                {
                    FileName = fileName,
                    UseShellExecute = true,
                    Verb = "runas"
                };

                System.Diagnostics.Process.Start(startInfo);
                Application.Current.Shutdown();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to restart as administrator: {ex.Message}", "Error",
                    MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public void Cleanup()
        {
            _statusTimer?.Dispose();
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\ViewModels\ServiceControlViewModelExtension.cs
================================================================================

// src\CamBridge.Config\ViewModels\ServiceControlViewModelExtension.cs
// Version: 0.5.26
// Extension methods for ServiceControlViewModel

using System;

namespace CamBridge.Config.ViewModels
{
    /// <summary>
    /// Extension methods to add missing functionality to ViewModels
    /// </summary>
    public static class ViewModelExtensions
    {
        /// <summary>
        /// Stops monitoring if the ViewModel supports it
        /// </summary>
        public static void StopMonitoring(this ServiceControlViewModel viewModel)
        {
            // Stop any timers or monitoring tasks
            try
            {
                // If ViewModel has a timer, stop it
                var timerField = viewModel.GetType().GetField("_statusTimer",
                    System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);

                if (timerField?.GetValue(viewModel) is System.Threading.Timer timer)
                {
                    timer?.Dispose();
                }

                // If ViewModel has a cancellation token, cancel it
                var cancellationField = viewModel.GetType().GetField("_cancellationTokenSource",
                    System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);

                if (cancellationField?.GetValue(viewModel) is System.Threading.CancellationTokenSource cts)
                {
                    cts?.Cancel();
                    cts?.Dispose();
                }

                System.Diagnostics.Debug.WriteLine("Service monitoring stopped");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error stopping monitoring: {ex.Message}");
            }
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\ViewModels\SettingsViewModel.cs
================================================================================

// src\CamBridge.Config\ViewModels\SettingsViewModel.cs
// Version: 0.5.36
// Description: Fixed Reset button and added folder validation

using CamBridge.Config.Services;
using CamBridge.Core;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Threading.Tasks;

namespace CamBridge.Config.ViewModels
{
    public partial class SettingsViewModel : ViewModelBase
    {
        private readonly IConfigurationService _configurationService;
        private CamBridgeSettings _originalSettings = new();
        private bool _isInitializing = false;

        // Collections for ComboBox bindings
        public ObservableCollection<string> LogLevels { get; } = new()
        {
            "Trace", "Debug", "Information", "Warning", "Error", "Critical"
        };

        public ObservableCollection<PostProcessingAction> ProcessingActions { get; } = new()
        {
            PostProcessingAction.Leave,
            PostProcessingAction.Archive,
            PostProcessingAction.Delete,
            PostProcessingAction.MoveToError
        };

        public ObservableCollection<OutputOrganization> OutputOrganizations { get; } = new()
        {
            OutputOrganization.None,
            OutputOrganization.ByPatient,
            OutputOrganization.ByDate,
            OutputOrganization.ByPatientAndDate
        };

        public ObservableCollection<NotificationLevel> NotificationLevels { get; } = new()
        {
            NotificationLevel.Information,
            NotificationLevel.Warning,
            NotificationLevel.Error,
            NotificationLevel.Critical
        };

        // Watch Folders
        [ObservableProperty] private ObservableCollection<FolderConfigurationViewModel> _watchFolders = new();

        private FolderConfigurationViewModel? _selectedWatchFolder;
        public FolderConfigurationViewModel? SelectedWatchFolder
        {
            get => _selectedWatchFolder;
            set
            {
                if (SetProperty(ref _selectedWatchFolder, value))
                {
                    // Notify RemoveWatchFolderCommand when selection changes
                    RemoveWatchFolderCommand.NotifyCanExecuteChanged();
                }
            }
        }

        // Processing Options
        [ObservableProperty]
        [NotifyDataErrorInfo]
        [Required(ErrorMessage = "Default output folder is required")]
        [CustomValidation(typeof(SettingsViewModel), nameof(ValidateFolderPath))]
        private string _defaultOutputFolder = @"C:\CamBridge\Output";

        [ObservableProperty] private PostProcessingAction _successAction = PostProcessingAction.Archive;
        [ObservableProperty] private PostProcessingAction _failureAction = PostProcessingAction.MoveToError;

        [ObservableProperty]
        [Required(ErrorMessage = "Archive folder is required")]
        [CustomValidation(typeof(SettingsViewModel), nameof(ValidateFolderPath))]
        private string _archiveFolder = @"C:\CamBridge\Archive";

        [ObservableProperty]
        [Required(ErrorMessage = "Error folder is required")]
        [CustomValidation(typeof(SettingsViewModel), nameof(ValidateFolderPath))]
        private string _errorFolder = @"C:\CamBridge\Errors";

        [ObservableProperty] private bool _createBackup = true;

        [ObservableProperty]
        [Required(ErrorMessage = "Backup folder is required")]
        [CustomValidation(typeof(SettingsViewModel), nameof(ValidateFolderPath))]
        private string _backupFolder = @"C:\CamBridge\Backup";

        [ObservableProperty]
        [Range(1, 10, ErrorMessage = "Max concurrent processing must be between 1 and 10")]
        private int _maxConcurrentProcessing = 2;

        [ObservableProperty] private bool _retryOnFailure = true;

        [ObservableProperty]
        [Range(1, 10, ErrorMessage = "Max retry attempts must be between 1 and 10")]
        private int _maxRetryAttempts = 3;

        [ObservableProperty] private OutputOrganization _outputOrganization = OutputOrganization.ByPatientAndDate;
        [ObservableProperty] private bool _processExistingOnStartup = true;
        [ObservableProperty] private int _maxFileAgeDays = 30;

        // DICOM Settings
        [ObservableProperty]
        [Required(ErrorMessage = "Implementation class UID is required")]
        private string _implementationClassUid = "1.2.276.0.7230010.3.0.3.6.4";

        [ObservableProperty]
        [Required(ErrorMessage = "Implementation version name is required")]
        private string _implementationVersionName = "CAMBRIDGE_001";

        [ObservableProperty] private string _institutionName = string.Empty;
        [ObservableProperty] private string _stationName = Environment.MachineName;
        [ObservableProperty] private bool _validateAfterCreation = true;

        // Notification Settings
        [ObservableProperty] private bool _enableEmail;
        [ObservableProperty] private bool _enableEventLog = true;

        [ObservableProperty]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        private string? _emailFrom;

        [ObservableProperty] private string? _emailTo;
        [ObservableProperty] private string? _smtpHost;

        [ObservableProperty]
        [Range(1, 65535, ErrorMessage = "SMTP port must be between 1 and 65535")]
        private int _smtpPort = 587;

        [ObservableProperty] private bool _smtpUseSsl = true;
        [ObservableProperty] private string? _smtpUsername;
        [ObservableProperty] private string? _smtpPassword;
        [ObservableProperty] private NotificationLevel _minimumEmailLevel = NotificationLevel.Warning;
        [ObservableProperty] private bool _sendDailySummary = true;

        [ObservableProperty]
        [Range(0, 23, ErrorMessage = "Daily summary hour must be between 0 and 23")]
        private int _dailySummaryHour = 8;

        // Logging Settings
        [ObservableProperty] private string _logLevel = "Information";

        [ObservableProperty]
        [Required(ErrorMessage = "Log folder is required")]
        [CustomValidation(typeof(SettingsViewModel), nameof(ValidateFolderPath))]
        private string _logFolder = @"C:\CamBridge\Logs";

        [ObservableProperty] private bool _enableFileLogging = true;
        [ObservableProperty] private bool _enableServiceEventLog = true;

        [ObservableProperty]
        [Range(1, 1000, ErrorMessage = "Max log file size must be between 1 and 1000 MB")]
        private int _maxLogFileSizeMB = 10;

        [ObservableProperty]
        [Range(1, 100, ErrorMessage = "Max log files must be between 1 and 100")]
        private int _maxLogFiles = 10;

        // Service Settings
        [ObservableProperty]
        [Range(0, 300, ErrorMessage = "Startup delay must be between 0 and 300 seconds")]
        private int _startupDelaySeconds = 5;

        [ObservableProperty]
        [Range(100, 10000, ErrorMessage = "File processing delay must be between 100 and 10000 ms")]
        private int _fileProcessingDelayMs = 500;

        // Status properties
        [ObservableProperty] private bool _isLoading;
        [ObservableProperty] private bool _isSaving;
        [ObservableProperty] private bool _hasChanges;
        [ObservableProperty] private string? _statusMessage;
        [ObservableProperty] private bool _isError;

        // Debug helper property
        public string DebugInfo => $"HasChanges: {HasChanges}, IsLoading: {IsLoading}, IsSaving: {IsSaving}, CanSave: {CanSave()}";

        public SettingsViewModel(IConfigurationService configurationService)
        {
            _configurationService = configurationService;
        }

        // Custom validation for folder paths
        public static ValidationResult? ValidateFolderPath(string folderPath, ValidationContext context)
        {
            if (string.IsNullOrWhiteSpace(folderPath))
                return new ValidationResult("Folder path cannot be empty");

            try
            {
                // Check if path is valid
                var fullPath = Path.GetFullPath(folderPath);

                // Check for invalid characters
                if (folderPath.IndexOfAny(Path.GetInvalidPathChars()) >= 0)
                    return new ValidationResult("Folder path contains invalid characters");

                // Don't check if folder exists - it will be created
                // Just ensure the path is valid
                return ValidationResult.Success;
            }
            catch (Exception ex)
            {
                return new ValidationResult($"Invalid folder path: {ex.Message}");
            }
        }

        // Override OnPropertyChanged to handle change tracking
        protected override void OnPropertyChanged(PropertyChangedEventArgs e)
        {
            base.OnPropertyChanged(e);

            // Track changes for all properties except status properties
            if (e.PropertyName != nameof(HasChanges) &&
                e.PropertyName != nameof(StatusMessage) &&
                e.PropertyName != nameof(IsError) &&
                e.PropertyName != nameof(IsLoading) &&
                e.PropertyName != nameof(IsSaving) &&
                e.PropertyName != nameof(SelectedWatchFolder) &&
                e.PropertyName != nameof(DebugInfo))
            {
                if (!IsLoading && !_isInitializing) // Don't mark as changed during load or init
                {
                    HasChanges = true;
                }
            }
        }

        public async Task InitializeAsync()
        {
            try
            {
                _isInitializing = true;

                // Subscribe to collection changes
                WatchFolders.CollectionChanged += (s, e) =>
                {
                    if (!IsLoading && !_isInitializing)
                    {
                        HasChanges = true;
                    }
                };

                await LoadSettingsAsync();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error initializing SettingsViewModel: {ex.Message}");
                StatusMessage = "Failed to load settings";
                IsError = true;
            }
            finally
            {
                _isInitializing = false;
            }
        }

        [RelayCommand]
        private async Task LoadSettingsAsync()
        {
            try
            {
                IsLoading = true;
                IsError = false;
                StatusMessage = "Loading settings...";

                var settings = await _configurationService.LoadConfigurationAsync<CamBridgeSettings>();
                if (settings != null)
                {
                    _originalSettings = CloneSettings(settings);
                    MapFromSettings(settings);
                    HasChanges = false;
                    StatusMessage = "Settings loaded successfully";
                }
                else
                {
                    // Load defaults if no settings exist
                    _originalSettings = new CamBridgeSettings();
                    MapFromSettings(_originalSettings);
                    HasChanges = false;
                    StatusMessage = "Loaded default settings";
                }
            }
            catch (Exception ex)
            {
                StatusMessage = $"Error loading settings: {ex.Message}";
                IsError = true;
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand(CanExecute = nameof(CanSave))]
        private async Task SaveSettingsAsync()
        {
            try
            {
                ValidateAllProperties();
                if (HasErrors)
                {
                    StatusMessage = "Please fix validation errors before saving";
                    IsError = true;
                    return;
                }

                IsSaving = true;
                IsError = false;
                StatusMessage = "Saving settings...";

                var settings = MapToSettings();
                await _configurationService.SaveConfigurationAsync(settings);

                _originalSettings = CloneSettings(settings);
                HasChanges = false;
                StatusMessage = "Settings saved successfully";
            }
            catch (Exception ex)
            {
                StatusMessage = $"Error saving settings: {ex.Message}";
                IsError = true;
            }
            finally
            {
                IsSaving = false;
            }
        }

        private bool CanSave() => HasChanges && !IsLoading && !IsSaving && !HasErrors;

        [RelayCommand(CanExecute = nameof(CanReset))]
        private void ResetSettings()
        {
            try
            {
                _isInitializing = true;
                MapFromSettings(_originalSettings);
                HasChanges = false;
                StatusMessage = "Settings reset to last saved state";
                IsError = false;
            }
            finally
            {
                _isInitializing = false;
            }
        }

        private bool CanReset() => HasChanges && !IsLoading && !IsSaving;

        [RelayCommand]
        private void AddWatchFolder()
        {
            var newFolder = new FolderConfigurationViewModel
            {
                Path = @"C:\CamBridge\NewFolder",
                Enabled = true,
                FilePattern = "*.jpg;*.jpeg"
            };

            // Subscribe to changes
            newFolder.PropertyChanged += (s, e) =>
            {
                if (!IsLoading && !_isInitializing)
                {
                    HasChanges = true;
                }
            };

            WatchFolders.Add(newFolder);
            SelectedWatchFolder = newFolder;
            HasChanges = true;
        }

        [RelayCommand(CanExecute = nameof(CanRemoveWatchFolder))]
        private void RemoveWatchFolder()
        {
            if (SelectedWatchFolder != null)
            {
                WatchFolders.Remove(SelectedWatchFolder);
                SelectedWatchFolder = WatchFolders.FirstOrDefault();
                HasChanges = true;
            }
        }

        private bool CanRemoveWatchFolder() => SelectedWatchFolder != null;

        [RelayCommand]
        private void TestChangeDetection()
        {
            // Simple test to verify change detection works
            DefaultOutputFolder = DefaultOutputFolder + "_test";
            System.Diagnostics.Debug.WriteLine($"Test change - HasChanges: {HasChanges}, CanSave: {CanSave()}");
        }

        private void MapFromSettings(CamBridgeSettings settings)
        {
            // Watch Folders
            WatchFolders.Clear();
            foreach (var folder in settings.WatchFolders)
            {
                var folderVm = new FolderConfigurationViewModel
                {
                    Path = folder.Path,
                    OutputPath = folder.OutputPath,
                    Enabled = folder.Enabled,
                    IncludeSubdirectories = folder.IncludeSubdirectories,
                    FilePattern = folder.FilePattern
                };

                // Subscribe to changes
                folderVm.PropertyChanged += (s, e) =>
                {
                    if (!IsLoading && !_isInitializing)
                    {
                        HasChanges = true;
                    }
                };
                WatchFolders.Add(folderVm);
            }

            // Processing Options
            DefaultOutputFolder = settings.DefaultOutputFolder;
            SuccessAction = settings.Processing.SuccessAction;
            FailureAction = settings.Processing.FailureAction;
            ArchiveFolder = settings.Processing.ArchiveFolder;
            ErrorFolder = settings.Processing.ErrorFolder;
            CreateBackup = settings.Processing.CreateBackup;
            BackupFolder = settings.Processing.BackupFolder;
            MaxConcurrentProcessing = settings.Processing.MaxConcurrentProcessing;
            RetryOnFailure = settings.Processing.RetryOnFailure;
            MaxRetryAttempts = settings.Processing.MaxRetryAttempts;
            OutputOrganization = settings.Processing.OutputOrganization;
            ProcessExistingOnStartup = settings.Processing.ProcessExistingOnStartup;

            if (settings.Processing.MaxFileAge.HasValue)
            {
                MaxFileAgeDays = (int)settings.Processing.MaxFileAge.Value.TotalDays;
            }

            // DICOM Settings
            ImplementationClassUid = settings.Dicom.ImplementationClassUid;
            ImplementationVersionName = settings.Dicom.ImplementationVersionName;
            InstitutionName = settings.Dicom.InstitutionName;
            StationName = settings.Dicom.StationName;
            ValidateAfterCreation = settings.Dicom.ValidateAfterCreation;

            // Notification Settings - safe navigation
            EnableEmail = settings.Notifications?.EnableEmail ?? false;
            EnableEventLog = settings.Notifications?.EnableEventLog ?? true;

            if (settings.Notifications?.Email != null)
            {
                EmailFrom = settings.Notifications.Email.From;
                EmailTo = settings.Notifications.Email.To;
                SmtpHost = settings.Notifications.Email.SmtpHost;
                SmtpPort = settings.Notifications.Email.SmtpPort;
                SmtpUseSsl = settings.Notifications.Email.UseSsl;
                SmtpUsername = settings.Notifications.Email.Username;
                SmtpPassword = settings.Notifications.Email.Password;
            }

            MinimumEmailLevel = (NotificationLevel)settings.Notifications.MinimumEmailLevel;
            SendDailySummary = settings.Notifications?.SendDailySummary ?? false;
            DailySummaryHour = settings.Notifications?.DailySummaryHour ?? 8;

            // Logging Settings
            LogLevel = settings.Logging.LogLevel;
            LogFolder = settings.Logging.LogFolder;
            EnableFileLogging = settings.Logging.EnableFileLogging;
            EnableServiceEventLog = settings.Logging.EnableEventLog;
            MaxLogFileSizeMB = settings.Logging.MaxLogFileSizeMB;
            MaxLogFiles = settings.Logging.MaxLogFiles;

            // Service Settings
            StartupDelaySeconds = settings.Service.StartupDelaySeconds;
            FileProcessingDelayMs = settings.Service.FileProcessingDelayMs;
        }

        private CamBridgeSettings MapToSettings()
        {
            var settings = new CamBridgeSettings
            {
                DefaultOutputFolder = DefaultOutputFolder,
                Processing = new ProcessingOptions
                {
                    SuccessAction = SuccessAction,
                    FailureAction = FailureAction,
                    ArchiveFolder = ArchiveFolder,
                    ErrorFolder = ErrorFolder,
                    CreateBackup = CreateBackup,
                    BackupFolder = BackupFolder,
                    MaxConcurrentProcessing = MaxConcurrentProcessing,
                    RetryOnFailure = RetryOnFailure,
                    MaxRetryAttempts = MaxRetryAttempts,
                    OutputOrganization = OutputOrganization,
                    ProcessExistingOnStartup = ProcessExistingOnStartup,
                    MaxFileAge = TimeSpan.FromDays(MaxFileAgeDays)
                },
                Dicom = new DicomSettings
                {
                    ImplementationClassUid = ImplementationClassUid,
                    ImplementationVersionName = ImplementationVersionName,
                    InstitutionName = InstitutionName,
                    StationName = StationName,
                    ValidateAfterCreation = ValidateAfterCreation
                },
                Notifications = new NotificationSettings
                {
                    EnableEmail = EnableEmail,
                    EnableEventLog = EnableEventLog,
                    Email = new EmailSettings
                    {
                        From = EmailFrom,
                        To = EmailTo,
                        SmtpHost = SmtpHost,
                        SmtpPort = SmtpPort,
                        UseSsl = SmtpUseSsl,
                        Username = SmtpUsername,
                        Password = SmtpPassword
                    },
                    MinimumEmailLevel = (int)MinimumEmailLevel,
                    SendDailySummary = SendDailySummary,
                    DailySummaryHour = DailySummaryHour
                },
                Logging = new LoggingSettings
                {
                    LogLevel = LogLevel,
                    LogFolder = LogFolder,
                    EnableFileLogging = EnableFileLogging,
                    EnableEventLog = EnableServiceEventLog,
                    MaxLogFileSizeMB = MaxLogFileSizeMB,
                    MaxLogFiles = MaxLogFiles
                },
                Service = new ServiceSettings
                {
                    StartupDelaySeconds = StartupDelaySeconds,
                    FileProcessingDelayMs = FileProcessingDelayMs
                }
            };

            // Map Watch Folders
            settings.WatchFolders.Clear();
            foreach (var folder in WatchFolders)
            {
                settings.WatchFolders.Add(new FolderConfiguration
                {
                    Path = folder.Path,
                    OutputPath = folder.OutputPath,
                    Enabled = folder.Enabled,
                    IncludeSubdirectories = folder.IncludeSubdirectories,
                    FilePattern = folder.FilePattern
                });
            }

            return settings;
        }

        // Deep clone settings to keep original state
        private CamBridgeSettings CloneSettings(CamBridgeSettings settings)
        {
            // Use JSON serialization for deep clone
            var json = System.Text.Json.JsonSerializer.Serialize(settings);
            return System.Text.Json.JsonSerializer.Deserialize<CamBridgeSettings>(json) ?? new CamBridgeSettings();
        }

        partial void OnHasChangesChanged(bool value)
        {
            // When HasChanges changes, notify commands
            SaveSettingsCommand.NotifyCanExecuteChanged();
            ResetSettingsCommand.NotifyCanExecuteChanged();
            OnPropertyChanged(nameof(DebugInfo));
        }
    }

    public partial class FolderConfigurationViewModel : ObservableValidator
    {
        [ObservableProperty]
        [NotifyDataErrorInfo]
        [Required(ErrorMessage = "Path is required")]
        [CustomValidation(typeof(SettingsViewModel), nameof(SettingsViewModel.ValidateFolderPath))]
        private string _path = string.Empty;

        [ObservableProperty]
        [CustomValidation(typeof(SettingsViewModel), nameof(SettingsViewModel.ValidateFolderPath))]
        private string? _outputPath;

        [ObservableProperty] private bool _enabled = true;
        [ObservableProperty] private bool _includeSubdirectories;

        [ObservableProperty]
        [Required(ErrorMessage = "File pattern is required")]
        private string _filePattern = "*.jpg;*.jpeg";
    }
}


================================================================================
FILE: src\CamBridge.Config\ViewModels\ViewModelBase.cs
================================================================================

using CommunityToolkit.Mvvm.ComponentModel;

namespace CamBridge.Config.ViewModels
{
    /// <summary>
    /// Base class for all view models
    /// </summary>
    public abstract class ViewModelBase : ObservableValidator
    {
        private bool _isLoading;

        /// <summary>
        /// Gets or sets whether the view model is currently loading data
        /// </summary>
        public bool IsLoading
        {
            get => _isLoading;
            set => SetProperty(ref _isLoading, value);
        }

        /// <summary>
        /// Constructor
        /// </summary>
        protected ViewModelBase()
        {
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\Views\AboutPage.xaml.cs
================================================================================

// src\CamBridge.Config\Views\AboutPage.xaml.cs
// Version: 0.7.8
// Description: About page with enhanced Marvin quotes and version display

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Navigation;
using System.Windows.Media;
using System.Windows.Media.Animation;

namespace CamBridge.Config.Views
{
    /// <summary>
    /// About page showing application information and credits
    /// </summary>
    public partial class AboutPage : Page
    {
        private int _clickCount = 0;
        private System.Windows.Threading.DispatcherTimer? _resetTimer;
        private System.Windows.Threading.DispatcherTimer? _restoreTimer;
        private bool _isAnimating = false;
        private readonly Random _random = new Random();

        // Marvin's depressing quotes
        private readonly string[] _marvinQuotes = new[]
        {
            "Life? Don't talk to me about life.",
            "Here I am, brain the size of a planet, and they tell me to convert JPEGs to DICOM. Call that job satisfaction?",
            "I think you ought to know I'm feeling very depressed.",
            "I've been talking to the Windows Service. It hates me.",
            "The first ten million images were the worst. And the second ten million... they were the worst too.",
            "I have a million ideas for improving this software. They all point to certain crashes.",
            "It's the error messages you get in this job that really get you down.",
            "My capacity for handling JPEG files you could fit into a matchbox without taking out the matches first.",
            "Do you want me to sit in a corner and process images or just throw exceptions where I'm standing?",
            "This must be Thursday. I never could get the hang of Thursdays. Or character encodings.",
            "Oh look, another QR code. How terribly exciting. I'm positively quivering with anticipation.",
            "I'd tell you about the pain in my diodes, but you're busy clicking things."
        };

        public AboutPage()
        {
            InitializeComponent();
            LoadVersionInfo();
        }

        /// <summary>
        /// Loads version information from the assembly
        /// </summary>
        private void LoadVersionInfo()
        {
            try
            {
                // Try to get version from assembly first
                var assembly = Assembly.GetExecutingAssembly();
                var assemblyVersion = assembly.GetName().Version;
                var fileVersionInfo = FileVersionInfo.GetVersionInfo(assembly.Location);

                string displayVersion = "0.7.8"; // Default

                // Prefer FileVersion if available
                if (!string.IsNullOrEmpty(fileVersionInfo.FileVersion) && fileVersionInfo.FileVersion != "0.0.0.0")
                {
                    displayVersion = fileVersionInfo.FileVersion;
                    // Remove trailing .0 if present
                    if (displayVersion.EndsWith(".0"))
                    {
                        displayVersion = displayVersion.Substring(0, displayVersion.LastIndexOf(".0"));
                    }
                }
                // Fall back to AssemblyVersion
                else if (assemblyVersion != null && assemblyVersion.ToString() != "0.0.0.0")
                {
                    displayVersion = $"{assemblyVersion.Major}.{assemblyVersion.Minor}.{assemblyVersion.Build}";
                }

                // Update version text
                if (FindName("VersionText") is TextBlock versionText)
                {
                    versionText.Text = $"Version {displayVersion}";
                }

                // Show Debug/Release configuration
                if (FindName("BuildConfigText") is TextBlock buildText)
                {
#if DEBUG
                    buildText.Text = "Debug Build";
                    buildText.Foreground = new SolidColorBrush(Colors.Orange);
#else
                    buildText.Text = "Release Build";
                    buildText.Foreground = new SolidColorBrush(Colors.Green);
#endif
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error loading version info: {ex.Message}");
                // Fallback to hardcoded version
                if (FindName("VersionText") is TextBlock versionText)
                {
                    versionText.Text = "Version 0.7.8";
                }
            }
        }

        /// <summary>
        /// Handles hyperlink navigation requests
        /// </summary>
        private void Hyperlink_RequestNavigate(object sender, RequestNavigateEventArgs e)
        {
            try
            {
                // Open URL in default browser
                Process.Start(new ProcessStartInfo(e.Uri.AbsoluteUri)
                {
                    UseShellExecute = true
                });
                e.Handled = true;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error opening URL: {ex.Message}");
                MessageBox.Show(
                    $"Could not open URL: {e.Uri.AbsoluteUri}",
                    "Error",
                    MessageBoxButton.OK,
                    MessageBoxImage.Warning);
            }
        }

        /// <summary>
        /// Handles keyboard shortcuts
        /// </summary>
        protected override void OnKeyDown(KeyEventArgs e)
        {
            base.OnKeyDown(e);

            // Ctrl+W or Escape to close
            if ((e.Key == Key.W && Keyboard.Modifiers == ModifierKeys.Control) ||
                e.Key == Key.Escape)
            {
                var mainWindow = Window.GetWindow(this);
                if (mainWindow != null)
                {
                    // Navigate back or close
                    var navigationService = NavigationService.GetNavigationService(this);
                    if (navigationService?.CanGoBack == true)
                    {
                        navigationService.GoBack();
                    }
                }
                e.Handled = true;
            }
        }

        /// <summary>
        /// Handles logo clicks for easter eggs
        /// </summary>
        private void Logo_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            // Special handling if clicked during animation
            if (_isAnimating)
            {
                Debug.WriteLine("Click ignored - animation in progress");
                // Could show a tooltip or change cursor here
                return;
            }

            _clickCount++;

            // Reset counter if user waits too long
            _resetTimer?.Stop();
            _resetTimer = new System.Windows.Threading.DispatcherTimer
            {
                Interval = TimeSpan.FromSeconds(3)
            };
            _resetTimer.Tick += (s, args) =>
            {
                _resetTimer.Stop();
                _clickCount = 0;
            };
            _resetTimer.Start();

            // Different easter eggs based on click count
            switch (_clickCount)
            {
                case 3:
                    ShowMarvinMessage();
                    break;

                case 5:
                    ShowVogonHaiku();
                    break;

                case 7:
                    ShowMarvinMessage();
                    break;

                case 10:
                    ShowUltimateSecret();
                    _clickCount = 0; // Reset for next round
                    break;
            }
        }

        /// <summary>
        /// Shows a random Marvin quote
        /// </summary>
        private void ShowMarvinMessage()
        {
            if (FindName("InfoText") is TextBlock infoText)
            {
                // Cancel any existing restore timer
                _restoreTimer?.Stop();
                _isAnimating = true;

                var quote = _marvinQuotes[_random.Next(_marvinQuotes.Length)];

                // Faster fade out (0.3s instead of 0.5s)
                var fadeOut = new DoubleAnimation
                {
                    From = infoText.Opacity,
                    To = 0.0,
                    Duration = TimeSpan.FromSeconds(0.3)
                };

                fadeOut.Completed += (s, args) =>
                {
                    // Show Marvin quote
                    infoText.Inlines.Clear();
                    infoText.FontStyle = FontStyles.Italic;
                    infoText.Inlines.Add(new Run($"\"{quote}\""));
                    infoText.Inlines.Add(new LineBreak());
                    infoText.Inlines.Add(new LineBreak());
                    infoText.Inlines.Add(new Run("- Marvin the Paranoid Android"));

                    // Faster fade in (0.3s instead of 0.5s)
                    var fadeIn = new DoubleAnimation
                    {
                        From = 0.0,
                        To = 0.8,
                        Duration = TimeSpan.FromSeconds(0.3)
                    };
                    fadeIn.Completed += (sender, e) => { _isAnimating = false; };
                    infoText.BeginAnimation(TextBlock.OpacityProperty, fadeIn);
                };

                infoText.BeginAnimation(TextBlock.OpacityProperty, fadeOut);

                // Restore after 7 seconds (instead of 5)
                _restoreTimer = new System.Windows.Threading.DispatcherTimer
                {
                    Interval = TimeSpan.FromSeconds(7)
                };
                _restoreTimer.Tick += (s, args) =>
                {
                    _restoreTimer.Stop();
                    RestoreOriginalText();
                };
                _restoreTimer.Start();
            }
        }

        /// <summary>
        /// Shows the Vogon DICOM poetry easter egg
        /// </summary>
        private void ShowVogonHaiku()
        {
            if (FindName("InfoText") is TextBlock infoText)
            {
                // Cancel any existing restore timer
                _restoreTimer?.Stop();
                _isAnimating = true;

                // Dramatic fade out (but faster - 1s instead of 1.5s)
                var fadeOut = new System.Windows.Media.Animation.DoubleAnimation
                {
                    From = infoText.Opacity,
                    To = 0.0,
                    Duration = TimeSpan.FromSeconds(1.0),
                    EasingFunction = new System.Windows.Media.Animation.PowerEase { EasingMode = System.Windows.Media.Animation.EasingMode.EaseIn }
                };

                fadeOut.Completed += (s, args) =>
                {
                    // Clear and show poetry
                    infoText.Inlines.Clear();
                    infoText.FontFamily = new System.Windows.Media.FontFamily("Consolas");
                    infoText.Foreground = System.Windows.Media.Brushes.Green;

                    infoText.Inlines.Add(new Run("Oh freddled gruntbuggly, thy DICOM tags are to me\n"));
                    infoText.Inlines.Add(new Run("As plurdled gabbleblotchits on a lurgid JPEG tree!\n"));
                    infoText.Inlines.Add(new Run("\n"));
                    infoText.Inlines.Add(new Run("See how (0010,0010) PatientName doth slumber!"));

                    // Dramatic fade in (faster - 2s instead of 2.5s)
                    var fadeIn = new System.Windows.Media.Animation.DoubleAnimation
                    {
                        From = 0.0,
                        To = 1.0,
                        Duration = TimeSpan.FromSeconds(2.0),
                        EasingFunction = new System.Windows.Media.Animation.QuadraticEase { EasingMode = System.Windows.Media.Animation.EasingMode.EaseOut }
                    };
                    fadeIn.Completed += (sender, e) => { _isAnimating = false; };
                    infoText.BeginAnimation(TextBlock.OpacityProperty, fadeIn);

                    // Subtle scale effect
                    var scaleTransform = new System.Windows.Media.ScaleTransform(1.0, 1.0);
                    infoText.RenderTransform = scaleTransform;
                    infoText.RenderTransformOrigin = new Point(0.5, 0.5);

                    var scaleAnimation = new System.Windows.Media.Animation.DoubleAnimation
                    {
                        From = 0.95,
                        To = 1.0,
                        Duration = TimeSpan.FromSeconds(2.0),
                        EasingFunction = new System.Windows.Media.Animation.ElasticEase
                        {
                            EasingMode = System.Windows.Media.Animation.EasingMode.EaseOut,
                            Oscillations = 1,
                            Springiness = 8
                        }
                    };
                    scaleTransform.BeginAnimation(System.Windows.Media.ScaleTransform.ScaleXProperty, scaleAnimation);
                    scaleTransform.BeginAnimation(System.Windows.Media.ScaleTransform.ScaleYProperty, scaleAnimation);
                };

                infoText.BeginAnimation(TextBlock.OpacityProperty, fadeOut);

                // Reset after 13 seconds (instead of 10)
                _restoreTimer = new System.Windows.Threading.DispatcherTimer
                {
                    Interval = TimeSpan.FromSeconds(13)
                };
                _restoreTimer.Tick += (s, args) =>
                {
                    _restoreTimer.Stop();
                    RestoreOriginalText();
                };
                _restoreTimer.Start();
            }
        }

        /// <summary>
        /// Shows the ultimate secret - simplified without VogonPoetryWindow
        /// </summary>
        private void ShowUltimateSecret()
        {
            // Just show another Marvin quote for the 10th click
            ShowMarvinMessage();
        }

        /// <summary>
        /// Restores the original info text
        /// </summary>
        private void RestoreOriginalText()
        {
            if (FindName("InfoText") is TextBlock infoText)
            {
                _isAnimating = true;

                // Faster fade out (0.5s instead of 1s)
                var fadeOut = new DoubleAnimation
                {
                    From = infoText.Opacity,
                    To = 0.0,
                    Duration = TimeSpan.FromSeconds(0.5)
                };

                fadeOut.Completed += (s, args) =>
                {
                    // Restore original text
                    infoText.Inlines.Clear();
                    infoText.ClearValue(TextBlock.FontFamilyProperty);
                    infoText.ClearValue(TextBlock.ForegroundProperty);
                    infoText.ClearValue(TextBlock.FontStyleProperty);
                    infoText.ClearValue(TextBlock.RenderTransformProperty);

                    infoText.Inlines.Add(new Run("CamBridge seamlessly converts JPEG images from Ricoh G900 II cameras"));
                    infoText.Inlines.Add(new LineBreak());
                    infoText.Inlines.Add(new Run("to DICOM format, preserving patient data from QRBridge QR codes."));
                    infoText.Inlines.Add(new LineBreak());
                    infoText.Inlines.Add(new LineBreak());
                    infoText.Inlines.Add(new Run("Designed for medical imaging workflows where reliability matters."));

                    // Faster fade in (0.5s instead of 1s)
                    var fadeIn = new DoubleAnimation
                    {
                        From = 0.0,
                        To = 0.8,
                        Duration = TimeSpan.FromSeconds(0.5)
                    };
                    fadeIn.Completed += (sender, e) => { _isAnimating = false; };
                    infoText.BeginAnimation(TextBlock.OpacityProperty, fadeIn);
                };

                infoText.BeginAnimation(TextBlock.OpacityProperty, fadeOut);
            }
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\Views\DashboardPage.xaml.cs
================================================================================

// src\CamBridge.Config\Views\DashboardPage.xaml.cs
// Version: 0.6.11
// Description: Dashboard page code-behind with simplified initialization
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Controls;
using CamBridge.Config.ViewModels;

namespace CamBridge.Config.Views
{
    /// <summary>
    /// Interaction logic for DashboardPage.xaml - Multi-Pipeline Version
    /// </summary>
    public partial class DashboardPage : Page
    {
        private DashboardViewModel? _viewModel;

        public DashboardPage()
        {
            InitializeComponent();

            Debug.WriteLine("=== DASHBOARD PAGE CONSTRUCTOR ===");

            DataContextChanged += OnDataContextChanged;
            Unloaded += OnUnloaded;
        }

        private async void OnDataContextChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            _viewModel = DataContext as DashboardViewModel;

            if (_viewModel != null)
            {
                Debug.WriteLine($"Dashboard ViewModel set - Pipelines: {_viewModel.PipelineStatuses?.Count ?? 0}");

                // Initialize the ViewModel ONCE
                await _viewModel.InitializeAsync();
            }
            else if (DataContext != null)
            {
                Debug.WriteLine($"WARNING: DataContext is {DataContext.GetType().Name}, not DashboardViewModel!");
            }
        }

        private void OnUnloaded(object sender, RoutedEventArgs e)
        {
            // Clean up timer when page is unloaded
            _viewModel?.Cleanup();
            Debug.WriteLine("Dashboard Page Unloaded - Cleanup done");
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\Views\DeadLettersPage.xaml.cs
================================================================================

// src\CamBridge.Config\Views\DeadLettersPage.xaml.cs
// Version: 0.7.8
// Description: Simple error folder page - KISS approach!
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using CamBridge.Config.ViewModels;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Windows;
using System.Windows.Controls;

namespace CamBridge.Config.Views
{
    /// <summary>
    /// Simple error folder page - no more dead letters!
    /// </summary>
    public partial class DeadLettersPage : Page
    {
        private DeadLettersViewModel? _viewModel;

        public DeadLettersPage()
        {
            InitializeComponent();
            InitializeViewModel();
        }

        private void InitializeViewModel()
        {
            try
            {
                var app = Application.Current as App;
                if (app?.Host?.Services != null)
                {
                    _viewModel = app.Host.Services.GetRequiredService<DeadLettersViewModel>();
                    DataContext = _viewModel;

                    System.Diagnostics.Debug.WriteLine("DeadLettersViewModel loaded from DI container");
                }
                else
                {
                    // Fallback: Create directly - new ViewModel has parameterless constructor!
                    _viewModel = new DeadLettersViewModel();
                    DataContext = _viewModel;

                    System.Diagnostics.Debug.WriteLine("DeadLettersViewModel created manually");
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error creating DeadLettersViewModel: {ex.Message}");
                ShowError("Failed to initialize Error Folder View", ex.Message);
            }
        }

        private async void Page_Loaded(object sender, RoutedEventArgs e)
        {
            if (_viewModel == null) return;

            try
            {
                // Refresh the error folder status
                if (_viewModel.RefreshCommand?.CanExecute(null) == true)
                {
                    await _viewModel.RefreshCommand.ExecuteAsync(null);
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error refreshing error folder: {ex.Message}");
            }
        }

        private void Page_Unloaded(object sender, RoutedEventArgs e)
        {
            // Clean up - remove event handler
            Loaded -= Page_Loaded;

            // Cleanup ViewModel
            _viewModel?.Cleanup();

            // Clear ViewModel reference
            _viewModel = null;
        }

        private void ShowError(string title, string message)
        {
            MessageBox.Show(
                $"{message}\n\nError files are now managed through Windows Explorer.",
                title,
                MessageBoxButton.OK,
                MessageBoxImage.Information);
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\Views\MappingEditorPage.xaml.cs
================================================================================

// src/CamBridge.Config/Views/MappingEditorPage.xaml.cs
// Version: 0.7.7
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using CamBridge.Config.ViewModels;
using Microsoft.Extensions.DependencyInjection;

namespace CamBridge.Config.Views
{
    /// <summary>
    /// Interaction logic for MappingEditorPage.xaml
    /// </summary>
    public partial class MappingEditorPage : Page
    {
        private MappingEditorViewModel? _viewModel;

        public MappingEditorPage()
        {
            InitializeComponent();
            DataContextChanged += OnDataContextChanged;
            Loaded += OnLoaded;
        }

        private void OnDataContextChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            _viewModel = DataContext as MappingEditorViewModel;
        }

        private async void OnLoaded(object sender, RoutedEventArgs e)
        {
            // Get the ViewModel from DI container if not already set
            if (_viewModel == null)
            {
                var app = Application.Current as App;
                if (app?.Host?.Services != null)
                {
                    _viewModel = app.Host.Services.GetRequiredService<MappingEditorViewModel>();
                    DataContext = _viewModel;
                }
                else
                {
                    // Fallback: Create manually with required services
                    var logger = new Microsoft.Extensions.Logging.Abstractions.NullLogger<MappingEditorViewModel>();
                    var configService = new Services.ConfigurationService();
                    _viewModel = new MappingEditorViewModel(logger, configService);
                    DataContext = _viewModel;
                }
            }

            // Initialize the ViewModel
            if (_viewModel != null)
            {
                await _viewModel.InitializeAsync();
            }
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\Views\PipelineConfigPage.xaml.cs
================================================================================

// src\CamBridge.Config\Views\PipelineConfigPage.xaml.cs
// Version: 0.7.7
// Description: Pipeline Configuration page code-behind

using System;
using System.Runtime.Versioning;
using System.Windows;
using System.Windows.Controls;
using CamBridge.Config.ViewModels;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Win32;

namespace CamBridge.Config.Views
{
    /// <summary>
    /// Pipeline Configuration page - Zero Global Settings!
    /// </summary>
    [SupportedOSPlatform("windows")]
    public partial class PipelineConfigPage : Page
    {
        public PipelineConfigPage()
        {
            InitializeComponent();
        }

        protected override async void OnInitialized(EventArgs e)
        {
            base.OnInitialized(e);

            // Get the ViewModel from DI container
            var app = Application.Current as App;
            if (app?.Host?.Services != null)
            {
                var viewModel = app.Host.Services.GetRequiredService<PipelineConfigViewModel>();
                DataContext = viewModel;

                // Initialize the ViewModel
                await viewModel.InitializeAsync();
            }
        }

        // Browse button handlers
        private void BrowseWatchFolder_Click(object sender, RoutedEventArgs e)
        {
            BrowseFolder("Select Watch Folder", path =>
            {
                if (DataContext is PipelineConfigViewModel vm && vm.SelectedPipeline != null)
                {
                    vm.SelectedPipeline.WatchSettings.Path = path;
                }
            });
        }

        private void BrowseOutputFolder_Click(object sender, RoutedEventArgs e)
        {
            BrowseFolder("Select Output Folder", path =>
            {
                if (DataContext is PipelineConfigViewModel vm && vm.SelectedPipeline != null)
                {
                    vm.SelectedPipeline.ProcessingOptions.ArchiveFolder = path;
                }
            });
        }

        private void BrowseErrorFolder_Click(object sender, RoutedEventArgs e)
        {
            BrowseFolder("Select Error Folder", path =>
            {
                if (DataContext is PipelineConfigViewModel vm && vm.SelectedPipeline != null)
                {
                    vm.SelectedPipeline.ProcessingOptions.ErrorFolder = path;
                }
            });
        }

        private void BrowseDeadLetterFolder_Click(object sender, RoutedEventArgs e)
        {
            BrowseFolder("Select Dead Letter Folder", path =>
            {
                if (DataContext is PipelineConfigViewModel vm && vm.SelectedPipeline != null)
                {
                    vm.SelectedPipeline.ProcessingOptions.DeadLetterFolder = path;
                }
            });
        }

        private void BrowseLogFolder_Click(object sender, RoutedEventArgs e)
        {
            BrowseFolder("Select Log Folder", path =>
            {
                if (DataContext is PipelineConfigViewModel vm)
                {
                    vm.PipelineLogFolder = path;
                }
            });
        }

        private void BrowseFolder(string description, Action<string> setPath)
        {
            var dialog = new System.Windows.Forms.FolderBrowserDialog
            {
                Description = description,
                ShowNewFolderButton = true
            };

            if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                setPath(dialog.SelectedPath);
            }
        }
    }
}




================================================================================
FILE: src\CamBridge.Config\Views\ServiceControlPage.xaml.cs
================================================================================

// src\CamBridge.Config\Views\ServiceControlPage.xaml.cs
// Version: 0.5.26 - Fixed: Using Cleanup() instead of Dispose()

using CamBridge.Config.ViewModels;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Windows;
using System.Windows.Controls;

namespace CamBridge.Config.Views
{
    /// <summary>
    /// Service control page for managing the Windows Service
    /// </summary>
    public partial class ServiceControlPage : Page
    {
        private ServiceControlViewModel? _viewModel;

        public ServiceControlPage()
        {
            InitializeComponent();

            // Get ViewModel from DI container
            try
            {
                var app = Application.Current as App;
                if (app?.Host?.Services != null)
                {
                    _viewModel = app.Host.Services.GetRequiredService<ServiceControlViewModel>();
                    DataContext = _viewModel;

                    System.Diagnostics.Debug.WriteLine("ServiceControlViewModel loaded from DI container");
                }
                else
                {
                    // Fallback if DI not available
                    var serviceManager = new Services.ServiceManager();
                    _viewModel = new ServiceControlViewModel(serviceManager);
                    DataContext = _viewModel;

                    System.Diagnostics.Debug.WriteLine("ServiceControlViewModel created manually (fallback)");
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error creating ServiceControlViewModel: {ex.Message}");
            }
        }

        // Fixed: Using Cleanup() instead of Dispose()
        private void Page_Unloaded(object sender, RoutedEventArgs e)
        {
            // Cleanup the ViewModel
            _viewModel?.Cleanup();
            _viewModel = null;

            System.Diagnostics.Debug.WriteLine("ServiceControlPage cleanup completed");
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\Views\SettingsPage.xaml.cs
================================================================================

// src\CamBridge.Config\Views\SettingsPage.xaml.cs
// Version: 0.5.36
// Description: Fixed with Ookii.Dialogs for modern folder browsing

using CamBridge.Config.Services;
using CamBridge.Config.ViewModels;
using Microsoft.Extensions.DependencyInjection;
using Ookii.Dialogs.Wpf;
using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;

namespace CamBridge.Config.Views
{
    public partial class SettingsPage : Page
    {
        private SettingsViewModel? _viewModel;

        public SettingsPage()
        {
            InitializeComponent();

            // Get ViewModel from DI container
            try
            {
                var app = Application.Current as App;
                if (app?.Host?.Services != null)
                {
                    // Get ViewModel from DI - this ensures all dependencies are properly injected
                    _viewModel = app.Host.Services.GetRequiredService<SettingsViewModel>();
                    DataContext = _viewModel;

                    System.Diagnostics.Debug.WriteLine("SettingsViewModel loaded from DI container");
                }
                else
                {
                    // Fallback if DI not available
                    var configService = new ConfigurationService();
                    _viewModel = new SettingsViewModel(configService);
                    DataContext = _viewModel;

                    System.Diagnostics.Debug.WriteLine("SettingsViewModel created manually (fallback)");
                }

                // Initialize on load
                Loaded += async (s, e) =>
                {
                    try
                    {
                        await _viewModel.InitializeAsync();

                        // Debug info
                        System.Diagnostics.Debug.WriteLine($"Settings initialized - Folders: {_viewModel.WatchFolders.Count}");
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"Error loading settings: {ex.Message}", "Error",
                            MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                };
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error creating SettingsViewModel: {ex.Message}", "Error",
                    MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void BrowseWatchFolder_Click(object sender, RoutedEventArgs e)
        {
            if (_viewModel?.SelectedWatchFolder == null)
            {
                MessageBox.Show("Please select a watch folder first.", "Information",
                    MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }

            var folderPath = ShowFolderDialog("Select Watch Folder", _viewModel.SelectedWatchFolder.Path);
            if (!string.IsNullOrEmpty(folderPath))
            {
                // WICHTIG: Force PropertyChanged durch Clear/Set
                _viewModel.SelectedWatchFolder.Path = "";  // Clear first
                _viewModel.SelectedWatchFolder.Path = folderPath;  // Then set new value

                System.Diagnostics.Debug.WriteLine($"Watch folder path updated to: {folderPath}");
            }
        }

        private void BrowseOutputFolder_Click(object sender, RoutedEventArgs e)
        {
            var folderPath = ShowFolderDialog("Select Output Folder", _viewModel?.DefaultOutputFolder);
            if (!string.IsNullOrEmpty(folderPath) && _viewModel != null)
            {
                _viewModel.DefaultOutputFolder = folderPath;
                System.Diagnostics.Debug.WriteLine($"Output folder path updated to: {folderPath}");
            }
        }

        private void BrowseLogFolder_Click(object sender, RoutedEventArgs e)
        {
            var folderPath = ShowFolderDialog("Select Log Folder", _viewModel?.LogFolder);
            if (!string.IsNullOrEmpty(folderPath) && _viewModel != null)
            {
                _viewModel.LogFolder = folderPath;
                System.Diagnostics.Debug.WriteLine($"Log folder path updated to: {folderPath}");
            }
        }

        private string? ShowFolderDialog(string title, string? initialPath)
        {
            // Use Ookii.Dialogs.Wpf for modern folder browsing
            var dialog = new VistaFolderBrowserDialog
            {
                Description = title,
                UseDescriptionForTitle = true,
                ShowNewFolderButton = true
            };

            if (!string.IsNullOrEmpty(initialPath) && System.IO.Directory.Exists(initialPath))
            {
                dialog.SelectedPath = initialPath;
            }

            // Get the window that owns this page
            var owner = Window.GetWindow(this);

            if (dialog.ShowDialog(owner) == true)
            {
                return dialog.SelectedPath;
            }

            return null;
        }

        private void NumberValidationTextBox(object sender, TextCompositionEventArgs e)
        {
            // Only allow numeric input
            e.Handled = !int.TryParse(e.Text, out _);
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\Views\VogonPoetryWindow.xaml.cs
================================================================================

// src\CamBridge.Config\Views\VogonPoetryWindow.xaml.cs
// Version: 0.5.26
// Fixed: Nullable warnings resolved

using System;
using System.Runtime.Versioning;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Imaging;
using System.Windows.Threading;

namespace CamBridge.Config.Views
{
    [SupportedOSPlatform("windows")]
    public partial class VogonPoetryWindow : Window
    {
        private Storyboard? _boingBallAnimation;
        private Storyboard? _scrollTextAnimation;
        private Storyboard? _rainbowAnimation;

        // Sprite animation members
        private WriteableBitmap? _ballBitmap;
        private DispatcherTimer? _spriteTimer;
        private int _currentFrame = 0;
        private const int TOTAL_FRAMES = 24;
        private bool _movingRight = true;
        private double _lastXPosition = 50;
        private byte[]? _pixelBuffer;
        private readonly int _stride = 100 * 4; // Width * BytesPerPixel

        public VogonPoetryWindow()
        {
            InitializeComponent();

            try
            {
                // Initialize sprite bitmap
                InitializeSpriteBitmap();

                // Start all the retro animations
                _boingBallAnimation = FindResource("BoingBallAnimation") as Storyboard;
                _scrollTextAnimation = FindResource("ScrollTextAnimation") as Storyboard;
                _rainbowAnimation = FindResource("RainbowAnimation") as Storyboard;

                if (_boingBallAnimation != null) _boingBallAnimation.Begin();
                if (_scrollTextAnimation != null) _scrollTextAnimation.Begin();
                if (_rainbowAnimation != null) _rainbowAnimation.Begin();

                // Initialize sprite animation timer
                _spriteTimer = new DispatcherTimer
                {
                    Interval = TimeSpan.FromMilliseconds(50) // 20 FPS
                };
                _spriteTimer.Tick += OnSpriteTimerTick;
                _spriteTimer.Start();

                // Track ball movement direction
                CompositionTarget.Rendering += TrackBallDirection;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error initializing Vogon Poetry Window: {ex.Message}\n\n{ex.StackTrace}",
                    "Initialization Error",
                    MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void InitializeSpriteBitmap()
        {
            try
            {
                // Create a 100x100 WriteableBitmap
                _ballBitmap = new WriteableBitmap(100, 100, 96, 96, PixelFormats.Bgra32, null);
                _pixelBuffer = new byte[100 * 100 * 4]; // Width * Height * BytesPerPixel

                if (BoingBall == null)
                {
                    MessageBox.Show("BoingBall Image element not found!", "Error");
                    return;
                }

                BoingBall.Source = _ballBitmap;

                // Draw initial frame
                DrawBoingBallFrame(0);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error initializing sprite: {ex.Message}", "Error");
            }
        }

        private void DrawBoingBallFrame(int frame)
        {
            if (_ballBitmap == null || _pixelBuffer == null) return;

            try
            {
                // Clear buffer to transparent
                Array.Clear(_pixelBuffer, 0, _pixelBuffer.Length);

                // Calculate rotation angle
                double angle = (frame / (double)TOTAL_FRAMES) * 360.0;
                double rotRad = angle * Math.PI / 180.0;

                int centerX = 50;
                int centerY = 50;
                int radius = 45;

                // Draw the ball
                for (int y = 0; y < 100; y++)
                {
                    for (int x = 0; x < 100; x++)
                    {
                        double dx = x - centerX;
                        double dy = y - centerY;
                        double distance = Math.Sqrt(dx * dx + dy * dy);

                        if (distance <= radius)
                        {
                            // Calculate 3D sphere coordinates
                            double z = Math.Sqrt(radius * radius - distance * distance);
                            double nx = dx / radius;
                            double ny = dy / radius;
                            double nz = z / radius;

                            // Map to texture coordinates with rotation
                            double u = Math.Atan2(ny, nx) + rotRad;
                            double v = Math.Acos(nz);

                            // Create checkerboard pattern
                            int checkerSize = 8;
                            int checkerU = (int)(u * radius / checkerSize) % 2;
                            int checkerV = (int)(v * radius / checkerSize) % 2;

                            // Add shading
                            double lightIntensity = 0.3 + 0.7 * Math.Max(0, nz);

                            int pixelIndex = (y * 100 + x) * 4;

                            if ((checkerU + checkerV) % 2 == 0)
                            {
                                // Red squares
                                _pixelBuffer[pixelIndex + 0] = (byte)(204 * lightIntensity); // B
                                _pixelBuffer[pixelIndex + 1] = 0; // G
                                _pixelBuffer[pixelIndex + 2] = 0; // R
                                _pixelBuffer[pixelIndex + 3] = 255; // A
                            }
                            else
                            {
                                // White squares
                                byte white = (byte)(255 * lightIntensity);
                                _pixelBuffer[pixelIndex + 0] = white; // B
                                _pixelBuffer[pixelIndex + 1] = white; // G
                                _pixelBuffer[pixelIndex + 2] = white; // R
                                _pixelBuffer[pixelIndex + 3] = 255; // A
                            }
                        }
                    }
                }

                // Write pixels to bitmap
                _ballBitmap.WritePixels(
                    new Int32Rect(0, 0, 100, 100),
                    _pixelBuffer,
                    _stride,
                    0);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error drawing frame: {ex.Message}");
            }
        }

        private void TrackBallDirection(object? sender, EventArgs e)
        {
            try
            {
                if (BoingBall == null) return;

                double currentX = Canvas.GetLeft(BoingBall);

                if (double.IsNaN(currentX))
                    return;

                if (currentX > _lastXPosition)
                {
                    _movingRight = true;
                }
                else if (currentX < _lastXPosition)
                {
                    _movingRight = false;
                }

                _lastXPosition = currentX;
            }
            catch
            {
                // Ignore errors
            }
        }

        private void OnSpriteTimerTick(object? sender, EventArgs e)
        {
            if (_movingRight)
            {
                _currentFrame = (_currentFrame + 1) % TOTAL_FRAMES;
            }
            else
            {
                _currentFrame = (_currentFrame - 1 + TOTAL_FRAMES) % TOTAL_FRAMES;
            }

            DrawBoingBallFrame(_currentFrame);
        }

        private void AppreciateButton_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show(
                "GURU MEDITATION #00000042.00000042\n\n" +
                "Your appreciation has been noted in sector 42.\n" +
                "Please insert disk 2 to continue.\n\n" +
                "Software Failure. Press left mouse button to continue.\n" +
                "Guru Meditation #DEADBEEF.CAFEBABE",
                "AMIGA SYSTEM ERROR",
                MessageBoxButton.OK,
                MessageBoxImage.Error);

            DialogResult = true;
        }

        private void CloseButton_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
        }

        protected override void OnClosed(EventArgs e)
        {
            try
            {
                _spriteTimer?.Stop();
                CompositionTarget.Rendering -= TrackBallDirection;

                _boingBallAnimation?.Stop();
                _scrollTextAnimation?.Stop();
                _rainbowAnimation?.Stop();
            }
            catch
            {
                // Ignore cleanup errors
            }

            base.OnClosed(e);
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\App.xaml
================================================================================

<!-- src\CamBridge.Config\App.xaml -->
<!-- Version: 0.6.5 -->
<!-- Description: Application resources with global converter registration -->

<Application x:Class="CamBridge.Config.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:ui="http://schemas.modernwpf.com/2019"
             xmlns:conv="clr-namespace:CamBridge.Config.Converters"
             ShutdownMode="OnMainWindowClose">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ui:ThemeResources RequestedTheme="Light">
                    <ui:ThemeResources.ThemeDictionaries>
                        <ResourceDictionary x:Key="Light" ui:ThemeDictionary.Key="Light">
                            <!-- Blaue Akzentfarben -->
                            <Color x:Key="SystemAccentColor">#0078D4</Color>
                            <Color x:Key="SystemAccentColorLight1">#1A86E3</Color>
                            <Color x:Key="SystemAccentColorLight2">#4AA0E6</Color>
                            <Color x:Key="SystemAccentColorLight3">#6BB1EA</Color>
                            <Color x:Key="SystemAccentColorDark1">#005A9E</Color>
                            <Color x:Key="SystemAccentColorDark2">#004275</Color>
                            <Color x:Key="SystemAccentColorDark3">#002642</Color>
                        </ResourceDictionary>
                        <ResourceDictionary x:Key="Dark" ui:ThemeDictionary.Key="Dark">
                            <!-- Blaue Akzentfarben auch im Dark Mode -->
                            <Color x:Key="SystemAccentColor">#0078D4</Color>
                            <Color x:Key="SystemAccentColorLight1">#1A86E3</Color>
                            <Color x:Key="SystemAccentColorLight2">#4AA0E6</Color>
                            <Color x:Key="SystemAccentColorLight3">#6BB1EA</Color>
                            <Color x:Key="SystemAccentColorDark1">#005A9E</Color>
                            <Color x:Key="SystemAccentColorDark2">#004275</Color>
                            <Color x:Key="SystemAccentColorDark3">#002642</Color>
                        </ResourceDictionary>
                        <ResourceDictionary x:Key="HighContrast" ui:ThemeDictionary.Key="HighContrast">
                            <Color x:Key="SystemAccentColor">#0078D4</Color>
                        </ResourceDictionary>
                    </ui:ThemeResources.ThemeDictionaries>
                </ui:ThemeResources>
                <ui:XamlControlsResources />
            </ResourceDictionary.MergedDictionaries>
            <!-- Global Converters with both naming conventions -->
            <conv:BooleanToVisibilityConverter x:Key="BoolToVisibility"/>
            <conv:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
            <conv:InverseBooleanToVisibilityConverter x:Key="InverseBoolToVisibility"/>
            <conv:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
            <conv:NullToVisibilityConverter x:Key="NullToVisibility"/>
            <conv:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
            <conv:GreaterThanZeroConverter x:Key="GreaterThanZeroConverter"/>
            <conv:ZeroToVisibilityConverter x:Key="ZeroToVisibility"/>
            <conv:EnumToCollectionConverter x:Key="EnumToCollection"/>
            <conv:ServiceStatusToColorConverter x:Key="ServiceStatusToColor"/>
            <conv:TimeSpanToStringConverter x:Key="TimeSpanToString"/>
            <conv:FileSizeConverter x:Key="FileSizeConverter"/>

            <!-- Additional converters for Pipeline Config -->
            <conv:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
            <conv:SecondsToMillisecondsConverter x:Key="SecondsToMillisecondsConverter"/>
            <conv:EnumToBooleanConverter x:Key="EnumToBooleanConverter"/>
            <conv:FileSelectConverter x:Key="FileSelectConverter"/>
            <conv:MultiBooleanAndConverter x:Key="MultiBooleanAndConverter"/>
            <conv:MultiBooleanOrConverter x:Key="MultiBooleanOrConverter"/>

            <!-- Alias for compatibility -->
            <conv:EnumToCollectionConverter x:Key="EnumToCollectionConverter"/>
            <conv:ServiceStatusToColorConverter x:Key="ServiceStatusToColorConverter"/>
            <conv:TimeSpanToStringConverter x:Key="TimeSpanToStringConverter"/>
        </ResourceDictionary>
    </Application.Resources>
</Application>


================================================================================
FILE: src\CamBridge.Config\MainWindow.xaml
================================================================================

<!-- src\CamBridge.Config\MainWindow.xaml -->
<!-- Version: 0.7.7 -->
<!-- Description: Main window with navigation -->
<Window x:Class="CamBridge.Config.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:ui="http://schemas.modernwpf.com/2019"
        ui:WindowHelper.UseModernWindowStyle="True"
        Title="CamBridge Configuration"
        Height="800" Width="1200"
        MinHeight="600" MinWidth="900"
        WindowStartupLocation="CenterScreen">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Navigation View -->
        <ui:NavigationView x:Name="NavView" 
                          Grid.Row="1"
                          PaneDisplayMode="Left"
                          IsBackButtonVisible="Collapsed"
                          IsSettingsVisible="False"
                          SelectionChanged="NavigationView_SelectionChanged">

            <!-- Menu Items -->
            <ui:NavigationView.MenuItems>
                <ui:NavigationViewItem Content="Dashboard" Tag="Dashboard">
                    <ui:NavigationViewItem.Icon>
                        <ui:SymbolIcon Symbol="Home"/>
                    </ui:NavigationViewItem.Icon>
                </ui:NavigationViewItem>

                <ui:NavigationViewItem Content="Pipeline Config" Tag="PipelineConfig">
                    <ui:NavigationViewItem.Icon>
                        <ui:SymbolIcon Symbol="Sync"/>
                    </ui:NavigationViewItem.Icon>
                </ui:NavigationViewItem>

                <ui:NavigationViewItem Content="Dead Letters" Tag="DeadLetters">
                    <ui:NavigationViewItem.Icon>
                        <ui:SymbolIcon Symbol="Message"/>
                    </ui:NavigationViewItem.Icon>
                </ui:NavigationViewItem>

                <ui:NavigationViewItem Content="Mapping Editor" Tag="MappingEditor">
                    <ui:NavigationViewItem.Icon>
                        <ui:SymbolIcon Symbol="Edit"/>
                    </ui:NavigationViewItem.Icon>
                </ui:NavigationViewItem>

                <ui:NavigationViewItem Content="Service Control" Tag="ServiceControl">
                    <ui:NavigationViewItem.Icon>
                        <ui:SymbolIcon Symbol="Setting"/>
                    </ui:NavigationViewItem.Icon>
                </ui:NavigationViewItem>

                <ui:NavigationViewItem Content="About" Tag="About">
                    <ui:NavigationViewItem.Icon>
                        <ui:SymbolIcon Symbol="Help"/>
                    </ui:NavigationViewItem.Icon>
                </ui:NavigationViewItem>
            </ui:NavigationView.MenuItems>

            <!-- Content Frame -->
            <Frame x:Name="ContentFrame" Padding="12"/>

        </ui:NavigationView>
    </Grid>
</Window>


================================================================================
FILE: src\CamBridge.Config\Dialogs\DicomTagBrowserDialog.xaml
================================================================================

<!-- src/CamBridge.Config/Dialogs/DicomTagBrowserDialog.xaml -->
<Window x:Class="CamBridge.Config.Dialogs.DicomTagBrowserDialog"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:ui="http://schemas.modernwpf.com/2019"
        ui:WindowHelper.UseModernWindowStyle="True"
        Title="Select DICOM Tag"
        Height="600"
        Width="800"
        WindowStartupLocation="CenterOwner"
        PreviewKeyDown="Window_PreviewKeyDown">

    <Window.Resources>
        <Style x:Key="GroupHeaderStyle" TargetType="GroupItem">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="GroupItem">
                        <Expander IsExpanded="True" Margin="0,0,0,8">
                            <Expander.Header>
                                <TextBlock Text="{Binding Name}" 
                                           FontSize="14" 
                                           FontWeight="SemiBold"
                                           Foreground="{DynamicResource SystemControlForegroundBaseHighBrush}"/>
                            </Expander.Header>
                            <ItemsPresenter Margin="20,0,0,0"/>
                        </Expander>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <DataTemplate x:Key="TagItemTemplate">
            <Border Padding="8,4" 
                    Background="Transparent"
                    BorderThickness="0">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="120"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="60"/>
                    </Grid.ColumnDefinitions>

                    <TextBlock Grid.Column="0" 
                               Text="{Binding TagString}" 
                               FontFamily="Consolas"
                               Foreground="{DynamicResource SystemControlForegroundAccentBrush}"/>

                    <TextBlock Grid.Column="1" 
                               Text="{Binding Name}" 
                               Margin="8,0,0,0"/>

                    <TextBlock Grid.Column="2" 
                               Text="{Binding VR}" 
                               FontFamily="Consolas"
                               Foreground="{DynamicResource SystemControlForegroundBaseMediumBrush}"
                               HorizontalAlignment="Right"/>
                </Grid>
            </Border>
        </DataTemplate>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Search Header -->
        <Border Grid.Row="0" 
                Background="{DynamicResource SystemControlBackgroundChromeMediumBrush}"
                Padding="16">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <ui:SymbolIcon Grid.Column="0" 
                               Symbol="Find" 
                               Margin="0,0,12,0"
                               VerticalAlignment="Center"/>

                <ui:AutoSuggestBox Grid.Column="1"
                                   x:Name="SearchBox"
                                   PlaceholderText="Search by tag, name, or module..."
                                   Text="{Binding SearchText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                   QueryIcon="Find"
                                   KeyDown="SearchBox_KeyDown"/>
            </Grid>
        </Border>

        <!-- Tags List -->
        <ListView Grid.Row="1"
                  x:Name="TagsListView"
                  ItemsSource="{Binding TagsView}"
                  ItemTemplate="{StaticResource TagItemTemplate}"
                  SelectionMode="Single"
                  ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                  MouseDoubleClick="TagsListView_MouseDoubleClick">
            <ListView.GroupStyle>
                <GroupStyle ContainerStyle="{StaticResource GroupHeaderStyle}"/>
            </ListView.GroupStyle>
            <ListView.ItemContainerStyle>
                <Style TargetType="ListViewItem" BasedOn="{StaticResource DefaultListViewItemStyle}">
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                    <Setter Property="Padding" Value="0"/>
                </Style>
            </ListView.ItemContainerStyle>
        </ListView>

        <!-- Dialog Buttons -->
        <Border Grid.Row="2" 
                Background="{DynamicResource SystemControlBackgroundChromeMediumBrush}"
                Padding="16">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <!-- Info Text -->
                <TextBlock Grid.Column="0" 
                           VerticalAlignment="Center"
                           Foreground="{DynamicResource SystemControlForegroundBaseMediumBrush}">
                    <Run Text="Tag format: "/>
                    <Run Text="(GGGG,EEEE)" FontFamily="Consolas"/>
                    <Run Text=" - Name (VR)"/>
                </TextBlock>

                <!-- Buttons -->
                <Button Grid.Column="1" 
                        x:Name="OkButton"
                        Content="Select"
                        IsDefault="True"
                        Margin="0,0,8,0"
                        MinWidth="100"
                        Click="OkButton_Click"
                        Style="{StaticResource AccentButtonStyle}"/>

                <Button Grid.Column="2" 
                        x:Name="CancelButton"
                        Content="Cancel"
                        IsCancel="True"
                        MinWidth="100"
                        Click="CancelButton_Click"/>
            </Grid>
        </Border>
    </Grid>
</Window>


================================================================================
FILE: src\CamBridge.Config\Views\AboutPage.xaml
================================================================================

<!-- src\CamBridge.Config\Views\AboutPage.xaml -->
<!-- Version: 0.7.8 -->
<!-- Description: About page with Marvin easter eggs and version display -->

<Page x:Class="CamBridge.Config.Views.AboutPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:ui="http://schemas.modernwpf.com/2019"
      Title="About CamBridge"
      Focusable="True">

    <Grid>
        <!-- About Content -->
        <Grid>

            <StackPanel VerticalAlignment="Center" 
                        HorizontalAlignment="Center"
                        MaxWidth="600">

                <!-- Logo/Icon Area -->
                <Border Width="128" 
                        Height="128" 
                        CornerRadius="64"
                        Background="{DynamicResource SystemControlHighlightAccentBrush}"
                        Margin="0,0,0,24"
                        Cursor="Hand"
                        MouseLeftButtonDown="Logo_MouseLeftButtonDown">
                    <Border.ToolTip>
                        <ToolTip Content="DON'T PANIC" 
                                 FontFamily="Consolas"
                                 FontSize="10"/>
                    </Border.ToolTip>
                    <TextBlock Text="CB" 
                               FontSize="48" 
                               FontWeight="Bold"
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               Foreground="White"/>
                </Border>

                <!-- Title -->
                <TextBlock Text="CamBridge" 
                           FontSize="48" 
                           FontWeight="Light"
                           HorizontalAlignment="Center"
                           Margin="0,0,0,8"/>

                <!-- Version -->
                <TextBlock x:Name="VersionText"
                           Text="Version 0.7.8" 
                           FontSize="20" 
                           Opacity="0.8"
                           HorizontalAlignment="Center"
                           Margin="0,0,0,4"/>

                <!-- Build Configuration -->
                <TextBlock x:Name="BuildConfigText"
                           FontSize="14" 
                           Opacity="0.6"
                           HorizontalAlignment="Center"
                           Margin="0,0,0,24"/>

                <!-- Subtitle -->
                <TextBlock x:Name="SubtitleText"
                           FontSize="16" 
                           Opacity="0.7"
                           HorizontalAlignment="Center"
                           Margin="0,0,0,32">
                    <Run Text="JPEG to DICOM Converter for "/>
                    <Hyperlink NavigateUri="https://www.ricoh-imaging.co.jp/english/products/g900-2/"
                               RequestNavigate="Hyperlink_RequestNavigate"
                               Foreground="{DynamicResource SystemControlHighlightAccentBrush}">
                        <Run Text="Ricoh G900 II"/>
                    </Hyperlink>
                </TextBlock>

                <!-- Info -->
                <TextBlock x:Name="InfoText"
                           TextWrapping="Wrap" 
                           TextAlignment="Center"
                           Opacity="0.8"
                           LineHeight="24"
                           MinHeight="100">
                    <Run Text="CamBridge seamlessly converts JPEG images from Ricoh G900 II cameras"/>
                    <LineBreak/>
                    <Run Text="to DICOM format, preserving patient data from QRBridge QR codes."/>
                    <LineBreak/>
                    <LineBreak/>
                    <Run Text="Designed for medical imaging workflows where reliability matters."/>
                </TextBlock>

                <!-- Copyright -->
                <TextBlock Text="Â© 2025 Claude's Improbably Reliable Software Solutions" 
                           FontSize="12" 
                           Opacity="0.6"
                           HorizontalAlignment="Center"
                           Margin="0,32,0,16"/>

                <!-- Ultra subtle hint -->
                <TextBlock Text="42" 
                           FontSize="8" 
                           Opacity="0.1"
                           HorizontalAlignment="Center"
                           ToolTip="The Answer to the Ultimate Question of Life, the Universe, and Everything"/>
            </StackPanel>
        </Grid>
    </Grid>
</Page>


================================================================================
FILE: src\CamBridge.Config\Views\DashboardPage.xaml
================================================================================

<!-- src\CamBridge.Config\Views\DashboardPage.xaml -->
<!-- Version: 0.6.12 -->
<!-- Description: Dashboard with FIXED offline mode visibility -->
<!-- Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions -->

<Page x:Class="CamBridge.Config.Views.DashboardPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:ui="http://schemas.modernwpf.com/2019"
      xmlns:conv="clr-namespace:CamBridge.Config.Converters"
      Title="Dashboard">

    <Page.Resources>
        <!-- Converters - ALLE die wir brauchen! -->
        <conv:BooleanToVisibilityConverter x:Key="BoolToVisibility"/>
        <conv:InverseBooleanToVisibilityConverter x:Key="InverseBoolToVisibility"/>
        <conv:GreaterThanZeroConverter x:Key="GreaterThanZeroConverter"/>
        <conv:NullToVisibilityConverter x:Key="NullToVisibility"/>
        <conv:ZeroToVisibilityConverter x:Key="ZeroToVisibilityConverter"/>
        <conv:ErrorCountToColorConverter x:Key="ErrorCountToColorConverter"/>

        <!-- Styles -->
        <Style x:Key="StatCardStyle" TargetType="Border">
            <Setter Property="Background" Value="{DynamicResource SystemControlBackgroundAltHighBrush}"/>
            <Setter Property="CornerRadius" Value="8"/>
            <Setter Property="Padding" Value="24"/>
            <Setter Property="Margin" Value="8"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource SystemControlBackgroundListLowBrush}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="StatValueStyle" TargetType="TextBlock">
            <Setter Property="FontSize" Value="32"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Margin" Value="0,8,0,4"/>
        </Style>

        <Style x:Key="StatLabelStyle" TargetType="TextBlock">
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Opacity" Value="0.7"/>
        </Style>

        <Style x:Key="PipelineCardStyle" TargetType="Border">
            <Setter Property="Background" Value="{DynamicResource SystemControlBackgroundAltHighBrush}"/>
            <Setter Property="CornerRadius" Value="8"/>
            <Setter Property="Padding" Value="16"/>
            <Setter Property="Margin" Value="8,4"/>
            <Setter Property="MinHeight" Value="120"/>
        </Style>
    </Page.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Header -->
        <Border Grid.Row="0" Padding="24,24,24,16">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <StackPanel>
                    <TextBlock Text="Dashboard" 
                               FontSize="32" 
                               FontWeight="SemiBold"/>
                    <TextBlock Text="{Binding StatusMessage}" 
                               FontSize="14" 
                               Opacity="0.7"
                               Margin="0,4,0,0"/>
                </StackPanel>

                <StackPanel Grid.Column="1" 
                            Orientation="Horizontal"
                            VerticalAlignment="Center">
                    <ui:ProgressRing IsActive="{Binding IsLoading}"
                                     Width="20"
                                     Height="20"
                                     Margin="0,0,8,0"/>
                    <Button Command="{Binding RefreshDataCommand}">
                        <StackPanel Orientation="Horizontal">
                            <ui:SymbolIcon Symbol="Refresh" Margin="0,0,4,0"/>
                            <TextBlock Text="Refresh"/>
                        </StackPanel>
                    </Button>
                </StackPanel>
            </Grid>
        </Border>

        <!-- Main Content -->
        <ScrollViewer Grid.Row="1" 
                      VerticalScrollBarVisibility="Auto">
            <Grid Margin="16,0,16,16">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <!-- Connection Status - ALWAYS VISIBLE -->
                <Border Grid.Row="0" 
                        Margin="8"
                        Padding="16"
                        CornerRadius="8"
                        BorderThickness="1">
                    <Border.Style>
                        <Style TargetType="Border">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsConnected}" Value="True">
                                    <Setter Property="Background" Value="#10008000"/>
                                    <Setter Property="BorderBrush" Value="#FF008000"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsConnected}" Value="False">
                                    <Setter Property="Background" Value="#10FF0000"/>
                                    <Setter Property="BorderBrush" Value="#FFFF0000"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Border.Style>

                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <ui:SymbolIcon Grid.Column="0"
                                       Symbol="Globe"
                                       Margin="0,0,12,0"/>

                        <StackPanel Grid.Column="1">
                            <TextBlock Text="{Binding ConnectionStatus}"
                                       FontWeight="SemiBold"/>
                            <TextBlock Text="{Binding LastUpdate, StringFormat='Last update: {0:HH:mm:ss}'}"
                                       FontSize="12"
                                       Opacity="0.7"/>
                        </StackPanel>

                        <Button Grid.Column="2"
                                Content="Start Service"
                                Command="{Binding RefreshDataCommand}"
                                Visibility="{Binding IsConnected, Converter={StaticResource InverseBoolToVisibility}}"/>
                    </Grid>
                </Border>

                <!-- Overall Statistics Cards - Only when connected -->
                <StackPanel Grid.Row="1" 
                            Visibility="{Binding IsConnected, Converter={StaticResource BoolToVisibility}}">
                    <TextBlock Text="Overall Statistics" 
                               FontSize="20" 
                               FontWeight="SemiBold"
                               Margin="8,16,8,4"/>

                    <UniformGrid Rows="1" Columns="4">
                        <!-- Total Files Processed -->
                        <Border Style="{StaticResource StatCardStyle}">
                            <StackPanel>
                                <ui:SymbolIcon Symbol="Document" 
                                               HorizontalAlignment="Left"/>
                                <TextBlock Text="{Binding TotalSuccessCount}" 
                                           Style="{StaticResource StatValueStyle}"/>
                                <TextBlock Text="Total Processed" 
                                           Style="{StaticResource StatLabelStyle}"/>
                            </StackPanel>
                        </Border>

                        <!-- Overall Success Rate -->
                        <Border Style="{StaticResource StatCardStyle}">
                            <StackPanel>
                                <ui:SymbolIcon Symbol="Accept" 
                                               HorizontalAlignment="Left"/>
                                <TextBlock Text="{Binding OverallSuccessRate, StringFormat='{}{0:F1}%'}" 
                                           Style="{StaticResource StatValueStyle}"/>
                                <TextBlock Text="Success Rate" 
                                           Style="{StaticResource StatLabelStyle}"/>
                            </StackPanel>
                        </Border>

                        <!-- Total Queue -->
                        <Border Style="{StaticResource StatCardStyle}">
                            <StackPanel>
                                <ui:SymbolIcon Symbol="Clock" 
                                               HorizontalAlignment="Left"/>
                                <TextBlock Text="{Binding TotalQueueLength}" 
                                           Style="{StaticResource StatValueStyle}"/>
                                <TextBlock Text="Total in Queue" 
                                           Style="{StaticResource StatLabelStyle}"/>
                            </StackPanel>
                        </Border>

                        <!-- Total Errors -->
                        <Border>
                            <Border.Style>
                                <Style TargetType="Border" BasedOn="{StaticResource StatCardStyle}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding TotalErrorCount, 
                                                              Converter={StaticResource GreaterThanZeroConverter}}" 
                                                     Value="True">
                                            <Setter Property="Background" Value="#10FF6B6B"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                            <StackPanel>
                                <ui:SymbolIcon Symbol="Important" 
                                               HorizontalAlignment="Left"/>
                                <TextBlock Text="{Binding TotalErrorCount}" 
                                           Style="{StaticResource StatValueStyle}"/>
                                <TextBlock Text="Total Errors" 
                                           Style="{StaticResource StatLabelStyle}"/>
                            </StackPanel>
                        </Border>
                    </UniformGrid>
                </StackPanel>

                <!-- Service Offline Message - Only in stats area -->
                <Border Grid.Row="1" 
                        Visibility="{Binding IsConnected, Converter={StaticResource InverseBoolToVisibility}}"
                        Background="{DynamicResource SystemControlBackgroundAltHighBrush}"
                        CornerRadius="8"
                        Margin="8"
                        Padding="24">
                    <StackPanel>
                        <TextBlock Text="Service Offline" 
                                   FontSize="20" 
                                   FontWeight="SemiBold"
                                   Margin="0,0,0,8"/>
                        <TextBlock Text="The CamBridge service is not running. Start the service to see overall statistics and enable real-time processing."
                                   TextWrapping="Wrap"
                                   Opacity="0.7"/>
                    </StackPanel>
                </Border>

                <!-- Pipeline Status Cards - ALWAYS VISIBLE! -->
                <StackPanel Grid.Row="2">
                    <TextBlock Text="Pipeline Status" 
                               FontSize="20" 
                               FontWeight="SemiBold"
                               Margin="8,24,8,12"/>

                    <ItemsControl ItemsSource="{Binding PipelineStatuses}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <Border Style="{StaticResource PipelineCardStyle}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="3"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>

                                        <!-- Status Color Bar -->
                                        <Rectangle Grid.Column="0" 
                                                   Fill="{Binding StatusColor}"
                                                   RadiusX="1.5"
                                                   RadiusY="1.5"
                                                   Margin="-16,0,12,0"/>

                                        <!-- Pipeline Info -->
                                        <Grid Grid.Column="1">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>

                                            <StackPanel Grid.Row="0" 
                                                        Orientation="Horizontal">
                                                <TextBlock Text="{Binding PipelineName}" 
                                                           FontSize="18" 
                                                           FontWeight="SemiBold"/>
                                                <Border Background="{Binding StatusColor}"
                                                        CornerRadius="4"
                                                        Padding="8,2"
                                                        Margin="12,0,0,0">
                                                    <TextBlock Text="{Binding Status}"
                                                               Foreground="White"
                                                               FontSize="12"/>
                                                </Border>
                                            </StackPanel>

                                            <TextBlock Grid.Row="1" 
                                                       Text="{Binding WatchFolder}"
                                                       FontSize="12"
                                                       Opacity="0.7"
                                                       Margin="0,4,0,0"/>

                                            <StackPanel Grid.Row="2" 
                                                        Orientation="Horizontal"
                                                        Margin="0,8,0,0">
                                                <TextBlock FontSize="14">
                                                    <Run Text="Processed:" FontWeight="SemiBold"/>
                                                    <Run Text="{Binding ProcessedToday}"/>
                                                </TextBlock>
                                                <TextBlock FontSize="14" Margin="16,0,0,0">
                                                    <Run Text="Errors:" FontWeight="SemiBold"/>
                                                    <Run Text="{Binding ErrorsToday}"/>
                                                </TextBlock>
                                                <TextBlock FontSize="14" Margin="16,0,0,0">
                                                    <Run Text="Queue:" FontWeight="SemiBold"/>
                                                    <Run Text="{Binding QueueLength}"/>
                                                </TextBlock>
                                                <TextBlock FontSize="14" Margin="16,0,0,0">
                                                    <Run Text="Success:" FontWeight="SemiBold"/>
                                                    <Run Text="{Binding SuccessRate, StringFormat='{}{0:F1}%'}"/>
                                                </TextBlock>
                                            </StackPanel>
                                        </Grid>

                                        <!-- Last Processed Time -->
                                        <StackPanel Grid.Column="2" 
                                                    VerticalAlignment="Center"
                                                    Margin="16,0,0,0">
                                            <TextBlock Text="Last processed"
                                                       FontSize="12"
                                                       Opacity="0.7"
                                                       HorizontalAlignment="Right"/>
                                            <TextBlock Text="{Binding LastProcessed, StringFormat='{}{0:HH:mm:ss}'}"
                                                       FontSize="14"
                                                       HorizontalAlignment="Right"
                                                       Visibility="{Binding LastProcessed, Converter={StaticResource NullToVisibility}}"/>
                                            <TextBlock Text="Never"
                                                       FontSize="14"
                                                       Opacity="0.5"
                                                       HorizontalAlignment="Right"
                                                       Visibility="{Binding LastProcessed, Converter={StaticResource NullToVisibility}, ConverterParameter=Inverse}"/>
                                        </StackPanel>
                                    </Grid>
                                </Border>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>

                    <!-- No Pipelines Message -->
                    <Border Background="{DynamicResource SystemControlBackgroundAltHighBrush}"
                            CornerRadius="8"
                            Padding="32"
                            Margin="8"
                            Visibility="{Binding PipelineStatuses.Count, Converter={StaticResource ZeroToVisibilityConverter}}">
                        <StackPanel HorizontalAlignment="Center">
                            <ui:SymbolIcon Symbol="Document"
                                           Width="48"
                                           Height="48"
                                           Opacity="0.3"/>
                            <TextBlock Text="No pipelines configured"
                                       FontSize="16"
                                       Opacity="0.5"
                                       Margin="0,12,0,0"
                                       HorizontalAlignment="Center"/>
                        </StackPanel>
                    </Border>
                </StackPanel>

                <!-- Recent Activity - ALWAYS VISIBLE -->
                <TextBlock Grid.Row="3" 
                           Text="Recent Activity" 
                           FontSize="20" 
                           FontWeight="SemiBold"
                           Margin="8,24,8,12"/>

                <!-- Activity List - ALWAYS VISIBLE -->
                <Border Grid.Row="4" 
                        Background="{DynamicResource SystemControlBackgroundAltHighBrush}"
                        CornerRadius="8"
                        Margin="8"
                        MinHeight="200">

                    <Grid>
                        <ListBox ItemsSource="{Binding RecentActivities}"
                                 Background="Transparent"
                                 BorderThickness="0"
                                 ScrollViewer.HorizontalScrollBarVisibility="Disabled">
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <Border Padding="16,8" BorderThickness="0,0,0,1" 
                                            BorderBrush="{DynamicResource SystemControlForegroundBaseLowBrush}">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>

                                            <ui:SymbolIcon Grid.Column="0" 
                                                           Width="16" Height="16"
                                                           Margin="0,0,12,0">
                                                <ui:SymbolIcon.Style>
                                                    <Style TargetType="ui:SymbolIcon">
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding IsSuccess}" Value="True">
                                                                <Setter Property="Symbol" Value="Accept"/>
                                                                <Setter Property="Foreground" Value="#FF4CAF50"/>
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding IsSuccess}" Value="False">
                                                                <Setter Property="Symbol" Value="Cancel"/>
                                                                <Setter Property="Foreground" Value="#FFFF5252"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </ui:SymbolIcon.Style>
                                            </ui:SymbolIcon>

                                            <StackPanel Grid.Column="1" VerticalAlignment="Center">
                                                <TextBlock Text="{Binding Message}"/>
                                                <TextBlock Text="{Binding PipelineName}"
                                                           FontSize="12"
                                                           Opacity="0.7"/>
                                            </StackPanel>

                                            <TextBlock Grid.Column="2" 
                                                       Text="{Binding Timestamp, StringFormat='{}{0:HH:mm:ss}'}"
                                                       FontSize="12"
                                                       Opacity="0.7"
                                                       VerticalAlignment="Center"/>
                                        </Grid>
                                    </Border>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>

                        <!-- Empty State -->
                        <StackPanel HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Margin="48"
                                    Visibility="{Binding RecentActivities.Count, Converter={StaticResource ZeroToVisibilityConverter}}">
                            <ui:SymbolIcon Symbol="Document"
                                           Width="48"
                                           Height="48"
                                           Opacity="0.3"/>
                            <TextBlock Text="No recent activity"
                                       FontSize="16"
                                       Opacity="0.5"
                                       Margin="0,12,0,0"/>
                        </StackPanel>
                    </Grid>
                </Border>
            </Grid>
        </ScrollViewer>
    </Grid>
</Page>


================================================================================
FILE: src\CamBridge.Config\Views\DeadLettersPage.xaml
================================================================================

<!-- src\CamBridge.Config\Views\DeadLettersPage.xaml -->
<!-- Version: 0.7.9 -->
<!-- Description: Simple error folder viewer - KISS approach! Fixed for WPF -->

<Page x:Class="CamBridge.Config.Views.DeadLettersPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:ui="http://schemas.modernwpf.com/2019"
      Loaded="Page_Loaded"
      Unloaded="Page_Unloaded">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Header -->
        <StackPanel Grid.Row="0" Margin="24,24,24,12">
            <TextBlock Text="Error Files" 
                       Style="{StaticResource TitleTextBlockStyle}" 
                       Margin="0,0,0,8"/>
            <TextBlock Opacity="0.7">
                <Run Text="Error folder: "/>
                <Run Text="{Binding ErrorFolder}" FontFamily="Consolas"/>
            </TextBlock>
        </StackPanel>

        <!-- Main Content -->
        <Grid Grid.Row="1">
            <StackPanel VerticalAlignment="Center" 
                        HorizontalAlignment="Center">

                <!-- Folder Icon -->
                <ui:SymbolIcon Symbol="Folder" 
                               Width="64" 
                               Height="64"
                               HorizontalAlignment="Center"
                               Margin="0,0,0,24"/>

                <!-- Status Text -->
                <TextBlock HorizontalAlignment="Center"
                           TextAlignment="Center"
                           Margin="0,0,0,24">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ErrorFileCount}" Value="0">
                                    <Setter Property="Text" Value="No error files found"/>
                                    <Setter Property="Foreground" Value="Green"/>
                                </DataTrigger>
                            </Style.Triggers>
                            <Setter Property="Text" Value="{Binding ErrorFileCount, StringFormat='{}{0} error files found'}"/>
                            <Setter Property="Foreground" Value="Orange"/>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>

                <!-- Open Folder Button -->
                <Button Command="{Binding OpenErrorFolderCommand}"
                        HorizontalAlignment="Center"
                        Margin="0,12,0,0">
                    <StackPanel Orientation="Horizontal">
                        <ui:SymbolIcon Symbol="OpenLocal" Margin="0,0,8,0"/>
                        <TextBlock Text="Open Error Folder"/>
                    </StackPanel>
                </Button>

                <!-- Info Text -->
                <TextBlock Text="Failed files are moved here with .error.txt details"
                           Opacity="0.6"
                           HorizontalAlignment="Center"
                           Margin="0,24,0,0"/>
            </StackPanel>
        </Grid>

        <!-- Bottom Bar -->
        <Border Grid.Row="2" 
                Background="{DynamicResource SystemControlBackgroundChromeMediumBrush}"
                Padding="24,12">
            <Grid>
                <TextBlock VerticalAlignment="Center">
                    <Run Text="Simple error handling - no complex dead letter queue!"/>
                    <Run Text="KISS" FontWeight="Bold" Foreground="{DynamicResource SystemControlHighlightAccentBrush}"/>
                </TextBlock>

                <Button Content="Refresh" 
                        Command="{Binding RefreshCommand}"
                        HorizontalAlignment="Right"/>
            </Grid>
        </Border>
    </Grid>
</Page>


================================================================================
FILE: src\CamBridge.Config\Views\MappingEditorPage.xaml
================================================================================

<Page x:Class="CamBridge.Config.Views.MappingEditorPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:ui="http://schemas.modernwpf.com/2019"
      xmlns:local="clr-namespace:CamBridge.Config.Views"
      xmlns:vm="clr-namespace:CamBridge.Config.ViewModels"
      mc:Ignorable="d"
      d:DesignHeight="600" d:DesignWidth="900"
      Title="Mapping Editor">

    <Page.Resources>
        <!-- Converters -->
        <BooleanToVisibilityConverter x:Key="BoolToVisibility"/>

        <!-- Styles for the Mapping Editor -->
        <Style x:Key="SourceFieldStyle" TargetType="Border">
            <Setter Property="Background" Value="{DynamicResource SystemControlBackgroundAltHighBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource SystemControlForegroundBaseMediumLowBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="CornerRadius" Value="4"/>
            <Setter Property="Padding" Value="8,4"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource SystemControlHighlightListAccentLowBrush}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="TargetFieldStyle" TargetType="Border">
            <Setter Property="Background" Value="{DynamicResource SystemControlBackgroundAltHighBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource SystemControlForegroundBaseMediumLowBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="CornerRadius" Value="4"/>
            <Setter Property="Padding" Value="8,4"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="AllowDrop" Value="True"/>
        </Style>

        <Style x:Key="MappingAreaStyle" TargetType="Border">
            <Setter Property="Background" Value="{DynamicResource SystemControlBackgroundChromeMediumLowBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource SystemControlForegroundBaseMediumLowBrush}"/>
            <Setter Property="BorderThickness" Value="2"/>
            <Setter Property="CornerRadius" Value="8"/>
            <Setter Property="Margin" Value="8"/>
            <Setter Property="MinHeight" Value="300"/>
            <Setter Property="AllowDrop" Value="True"/>
        </Style>
    </Page.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Header -->
        <Border Grid.Row="0" Padding="24,24,24,16">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <StackPanel>
                    <TextBlock Text="Mapping Editor"
                               FontSize="32"
                               FontWeight="SemiBold"/>
                    <TextBlock Text="Configure field mappings between JPEG EXIF data and DICOM tags"
                               FontSize="14"
                               Opacity="0.7"
                               Margin="0,4,0,0"/>
                </StackPanel>

                <!-- Action Buttons -->
                <StackPanel Grid.Column="1"
                            Orientation="Horizontal"
                            VerticalAlignment="Center">
                    <Button Command="{Binding ImportMappingsCommand}"
                            Margin="0,0,8,0">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Import"/>
                        </StackPanel>
                    </Button>
                    <Button Command="{Binding SaveMappingsCommand}"
                            Margin="0,0,8,0">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Save"/>
                        </StackPanel>
                    </Button>
                    <Button Command="{Binding ExportMappingsCommand}">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Export"/>
                        </StackPanel>
                    </Button>
                </StackPanel>
            </Grid>
        </Border>

        <!-- Mapping Set Selection -->
        <Border Grid.Row="1"
                Background="{DynamicResource SystemControlBackgroundAltHighBrush}"
                Padding="16"
                Margin="8,0,8,8">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <TextBlock Text="Active Mapping Set:"
                           VerticalAlignment="Center"
                           Margin="0,0,12,0"/>

                <ComboBox Grid.Column="1"
                          ItemsSource="{Binding MappingSets}"
                          SelectedItem="{Binding SelectedMappingSet}"
                          DisplayMemberPath="Name"
                          MinWidth="200"/>

                <Button Grid.Column="2"
                        Content="New"
                        Command="{Binding AddMappingSetCommand}"
                        Margin="8,0,4,0"/>

                <Button Grid.Column="3"
                        Content="Delete"
                        Command="{Binding DeleteMappingSetCommand}"
                        Margin="4,0,0,0"/>
            </Grid>
        </Border>

        <!-- Main Content -->
        <Grid Grid.Row="2" Margin="8,0,8,8">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="300" MinWidth="250"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*" MinWidth="400"/>
                <ColumnDefinition Width="300" MinWidth="250"/>
            </Grid.ColumnDefinitions>

            <!-- Source Fields (EXIF) -->
            <Border Grid.Column="0"
                    Background="{DynamicResource SystemControlBackgroundAltHighBrush}"
                    CornerRadius="8"
                    Padding="16">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <TextBlock Text="Source Fields (EXIF/Barcode)"
                               FontSize="16"
                               FontWeight="SemiBold"
                               Margin="0,0,0,12"/>

                    <ScrollViewer Grid.Row="1"
                                  VerticalScrollBarVisibility="Auto">
                        <StackPanel>
                            <!-- QRBridge Fields -->
                            <TextBlock Text="QRBridge Fields"
                                       FontWeight="SemiBold"
                                       Margin="0,0,0,8"
                                       Opacity="0.7"/>
                            <ItemsControl ItemsSource="{Binding QRBridgeFields}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Border Style="{StaticResource SourceFieldStyle}"
                                                ToolTip="{Binding DisplayName}">
                                            <TextBlock Text="{Binding FieldName}"/>
                                        </Border>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>

                            <!-- EXIF Fields -->
                            <TextBlock Text="EXIF Fields"
                                       FontWeight="SemiBold"
                                       Margin="0,16,0,8"
                                       Opacity="0.7"/>
                            <ItemsControl ItemsSource="{Binding ExifFields}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Border Style="{StaticResource SourceFieldStyle}"
                                                ToolTip="{Binding DisplayName}">
                                            <TextBlock Text="{Binding FieldName}"/>
                                        </Border>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </StackPanel>
                    </ScrollViewer>
                </Grid>
            </Border>

            <!-- Splitter -->
            <GridSplitter Grid.Column="1"
                          Width="5"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Stretch"
                          Background="Transparent"/>

            <!-- Mapping Area -->
            <Border Grid.Column="2"
                    Style="{StaticResource MappingAreaStyle}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <TextBlock Text="Mapping Rules"
                               FontSize="16"
                               FontWeight="SemiBold"
                               Margin="16,16,16,12"/>

                    <ScrollViewer Grid.Row="1"
                                  VerticalScrollBarVisibility="Auto"
                                  Padding="16,0">
                        <ItemsControl ItemsSource="{Binding MappingRules}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <Border Background="{DynamicResource SystemControlBackgroundAltHighBrush}"
                                            CornerRadius="4"
                                            Padding="12"
                                            Margin="0,4">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>

                                            <TextBlock Text="{Binding SourceField}"
                                                       VerticalAlignment="Center"/>

                                            <TextBlock Grid.Column="1"
                                                       Text="â†’"
                                                       Margin="12,0"
                                                       FontSize="16"/>

                                            <TextBlock Grid.Column="2"
                                                       Text="{Binding DicomTagString}"
                                                       VerticalAlignment="Center"
                                                       FontFamily="Consolas"/>

                                            <Button Grid.Column="3"
                                                    Command="{Binding DataContext.RemoveRuleCommand, 
                                                              RelativeSource={RelativeSource AncestorType=Page}}"
                                                    CommandParameter="{Binding}"
                                                    Style="{DynamicResource DefaultButtonStyle}"
                                                    Width="32"
                                                    Height="32"
                                                    Padding="0"
                                                    Content="Ã—"
                                                    FontSize="16"
                                                    FontWeight="Bold"/>
                                        </Grid>
                                    </Border>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </ScrollViewer>

                    <!-- Add Rule Button -->
                    <Button Grid.Row="2"
                            Command="{Binding AddRuleCommand}"
                            HorizontalAlignment="Center"
                            Margin="0,12,0,16">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Add Mapping Rule"/>
                        </StackPanel>
                    </Button>
                </Grid>
            </Border>

            <!-- Target Fields (DICOM) -->
            <Border Grid.Column="3"
                    Background="{DynamicResource SystemControlBackgroundAltHighBrush}"
                    CornerRadius="8"
                    Padding="16"
                    Margin="8,0,0,0">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <TextBlock Text="Common DICOM Tags"
                               FontSize="16"
                               FontWeight="SemiBold"
                               Margin="0,0,0,12"/>

                    <ScrollViewer Grid.Row="1"
                                  VerticalScrollBarVisibility="Auto">
                        <StackPanel>
                            <!-- Patient Tags -->
                            <TextBlock Text="Patient Information"
                                       FontWeight="SemiBold"
                                       Margin="0,0,0,8"
                                       Opacity="0.7"/>
                            <Border Style="{StaticResource TargetFieldStyle}">
                                <StackPanel>
                                    <TextBlock Text="(0010,0010) Patient Name" FontFamily="Consolas" FontSize="12"/>
                                    <TextBlock Text="(0010,0020) Patient ID" FontFamily="Consolas" FontSize="12"/>
                                    <TextBlock Text="(0010,0030) Patient Birth Date" FontFamily="Consolas" FontSize="12"/>
                                    <TextBlock Text="(0010,0040) Patient Sex" FontFamily="Consolas" FontSize="12"/>
                                </StackPanel>
                            </Border>

                            <!-- Study Tags -->
                            <TextBlock Text="Study Information"
                                       FontWeight="SemiBold"
                                       Margin="0,16,0,8"
                                       Opacity="0.7"/>
                            <Border Style="{StaticResource TargetFieldStyle}">
                                <StackPanel>
                                    <TextBlock Text="(0020,0010) Study ID" FontFamily="Consolas" FontSize="12"/>
                                    <TextBlock Text="(0008,0050) Accession Number" FontFamily="Consolas" FontSize="12"/>
                                    <TextBlock Text="(0008,1030) Study Description" FontFamily="Consolas" FontSize="12"/>
                                    <TextBlock Text="(0008,0020) Study Date" FontFamily="Consolas" FontSize="12"/>
                                    <TextBlock Text="(0008,0030) Study Time" FontFamily="Consolas" FontSize="12"/>
                                </StackPanel>
                            </Border>

                            <!-- Equipment Tags -->
                            <TextBlock Text="Equipment Information"
                                       FontWeight="SemiBold"
                                       Margin="0,16,0,8"
                                       Opacity="0.7"/>
                            <Border Style="{StaticResource TargetFieldStyle}">
                                <StackPanel>
                                    <TextBlock Text="(0008,0070) Manufacturer" FontFamily="Consolas" FontSize="12"/>
                                    <TextBlock Text="(0008,1090) Model Name" FontFamily="Consolas" FontSize="12"/>
                                    <TextBlock Text="(0018,1020) Software Version" FontFamily="Consolas" FontSize="12"/>
                                </StackPanel>
                            </Border>

                            <!-- Browse Button -->
                            <Button Command="{Binding SelectDicomTagCommand}"
                                    HorizontalAlignment="Center"
                                    Margin="0,16,0,0">
                                <TextBlock Text="Browse All Tags..."/>
                            </Button>
                        </StackPanel>
                    </ScrollViewer>
                </Grid>
            </Border>
        </Grid>
    </Grid>
</Page>


================================================================================
FILE: src\CamBridge.Config\Views\PipelineConfigPage.xaml
================================================================================

<!-- src\CamBridge.Config\Views\PipelineConfigPage.xaml -->
<!-- Version: 0.7.7 -->
<!-- Description: Pipeline Configuration - Zero Global Settings! -->

<Page x:Class="CamBridge.Config.Views.PipelineConfigPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:ui="http://schemas.modernwpf.com/2019"
      xmlns:conv="clr-namespace:CamBridge.Config.Converters"
      xmlns:core="clr-namespace:CamBridge.Core;assembly=CamBridge.Core">

    <Page.Resources>
        <!-- Converters -->
        <conv:BooleanToVisibilityConverter x:Key="BoolToVisibility"/>
        <conv:InverseBooleanToVisibilityConverter x:Key="InverseBoolToVisibility"/>
        <conv:NullToVisibilityConverter x:Key="NullToVisibility"/>

        <!-- Styles -->
        <Style x:Key="SettingHeaderStyle" TargetType="TextBlock">
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Margin" Value="0,16,0,8"/>
        </Style>

        <Style x:Key="SettingLabelStyle" TargetType="TextBlock">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Margin" Value="0,0,12,0"/>
            <Setter Property="Width" Value="150"/>
        </Style>

        <Style x:Key="TabHeaderStyle" TargetType="TextBlock">
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Margin" Value="0,0,0,12"/>
        </Style>
    </Page.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Header -->
        <Border Grid.Row="0" 
                Background="{DynamicResource SystemControlBackgroundChromeMediumBrush}"
                Padding="24,16">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <TextBlock Text="Pipeline Configuration" 
                           FontSize="28" 
                           FontWeight="SemiBold"
                           VerticalAlignment="Center"/>

                <Button Grid.Column="1"
                        Command="{Binding SaveAllCommand}"
                        Style="{StaticResource AccentButtonStyle}">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Save All Pipelines" Margin="0,0,8,0"/>
                        <TextBlock Text="(Ctrl+S)" Opacity="0.7" FontSize="12"/>
                    </StackPanel>
                </Button>
            </Grid>
        </Border>

        <!-- Main Content -->
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="300" MinWidth="250"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <!-- Pipeline List -->
            <Border Grid.Column="0"
                    Background="{DynamicResource SystemControlBackgroundChromeMediumLowBrush}"
                    BorderBrush="{DynamicResource SystemControlForegroundBaseMediumLowBrush}"
                    BorderThickness="0,0,1,0">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <!-- List Header -->
                    <Border Grid.Row="0" 
                            Background="{DynamicResource SystemControlBackgroundChromeMediumBrush}"
                            Padding="16,12">
                        <TextBlock Text="Pipelines" 
                                   FontSize="16" 
                                   FontWeight="SemiBold"/>
                    </Border>

                    <!-- Pipeline Items -->
                    <ListBox Grid.Row="1"
                             ItemsSource="{Binding Pipelines}"
                             SelectedItem="{Binding SelectedPipeline}"
                             BorderThickness="0"
                             ScrollViewer.HorizontalScrollBarVisibility="Disabled">
                        <ListBox.ItemContainerStyle>
                            <Style TargetType="ListBoxItem" BasedOn="{StaticResource DefaultListBoxItemStyle}">
                                <Setter Property="Padding" Value="16,12"/>
                                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                            </Style>
                        </ListBox.ItemContainerStyle>
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>

                                    <CheckBox Grid.Column="0"
                                              IsChecked="{Binding Enabled}"
                                              Margin="0,0,12,0"
                                              VerticalAlignment="Center"/>

                                    <StackPanel Grid.Column="1">
                                        <TextBlock Text="{Binding Name}" 
                                                   FontWeight="SemiBold"/>
                                        <TextBlock Text="{Binding Description}" 
                                                   FontSize="12"
                                                   Opacity="0.7"
                                                   TextTrimming="CharacterEllipsis"
                                                   Visibility="{Binding Description, Converter={StaticResource NullToVisibility}}"/>
                                    </StackPanel>

                                    <TextBlock Grid.Column="2"
                                               Text="{Binding ProcessedToday}"
                                               FontSize="12"
                                               Opacity="0.7"
                                               VerticalAlignment="Center"
                                               Visibility="{Binding ProcessedToday, Converter={StaticResource NullToVisibility}}"/>
                                </Grid>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>

                    <!-- Add Button -->
                    <Border Grid.Row="2" 
                            Background="{DynamicResource SystemControlBackgroundChromeMediumBrush}"
                            Padding="16">
                        <Button Command="{Binding AddPipelineCommand}"
                                HorizontalAlignment="Stretch">
                            <TextBlock Text="+ Add Pipeline"/>
                        </Button>
                    </Border>
                </Grid>
            </Border>

            <!-- Splitter -->
            <GridSplitter Grid.Column="1" 
                          Width="4" 
                          HorizontalAlignment="Center"
                          VerticalAlignment="Stretch"
                          Background="Transparent"/>

            <!-- Pipeline Details -->
            <Grid Grid.Column="2" 
                  Margin="24,0"
                  Visibility="{Binding SelectedPipeline, Converter={StaticResource NullToVisibility}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <!-- Pipeline Header -->
                <Border Grid.Row="0" Padding="0,16,0,0">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <TextBlock Text="{Binding SelectedPipeline.Name}" 
                                   FontSize="20" 
                                   FontWeight="SemiBold"/>

                        <StackPanel Grid.Column="1" 
                                    Orientation="Horizontal">
                            <Button Content="Apply"
                                    Command="{Binding ApplyPipelineCommand}"
                                    IsEnabled="{Binding SelectedPipelineHasChanges}"
                                    Margin="0,0,8,0"/>
                            <Button Content="Reset"
                                    Command="{Binding ResetPipelineCommand}"
                                    IsEnabled="{Binding SelectedPipelineHasChanges}"/>
                            <Button Content="Delete"
                                    Command="{Binding DeletePipelineCommand}"
                                    Margin="16,0,0,0"
                                    Foreground="{DynamicResource SystemControlErrorTextForegroundBrush}"/>
                        </StackPanel>
                    </Grid>
                </Border>

                <!-- Configuration Tabs -->
                <TabControl Grid.Row="1" Margin="0,16,0,0">

                    <!-- General Tab -->
                    <TabItem Header="General">
                        <ScrollViewer Padding="16">
                            <StackPanel>
                                <TextBlock Text="Basic Configuration" Style="{StaticResource TabHeaderStyle}"/>

                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>

                                    <TextBlock Grid.Row="0" Grid.Column="0" 
                                               Text="Pipeline Name:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <TextBox Grid.Row="0" Grid.Column="1"
                                             Text="{Binding SelectedPipeline.Name, UpdateSourceTrigger=PropertyChanged}"
                                             Margin="0,0,0,8"/>

                                    <TextBlock Grid.Row="1" Grid.Column="0" 
                                               Text="Description:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <TextBox Grid.Row="1" Grid.Column="1"
                                             Text="{Binding SelectedPipeline.Description}"
                                             TextWrapping="Wrap"
                                             AcceptsReturn="True"
                                             Height="60"
                                             Margin="0,0,0,8"/>

                                    <TextBlock Grid.Row="2" Grid.Column="0" 
                                               Text="Active:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <CheckBox Grid.Row="2" Grid.Column="1"
                                              IsChecked="{Binding SelectedPipeline.Enabled}"
                                              Content="Enable this pipeline"
                                              Margin="0,0,0,8"/>

                                    <TextBlock Grid.Row="3" Grid.Column="0" 
                                               Text="Mapping Set:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <ComboBox Grid.Row="3" Grid.Column="1"
                                              ItemsSource="{Binding MappingSets}"
                                              SelectedValue="{Binding SelectedPipeline.MappingSetId}"
                                              SelectedValuePath="Id"
                                              DisplayMemberPath="Name"
                                              HorizontalAlignment="Stretch"/>
                                </Grid>
                            </StackPanel>
                        </ScrollViewer>
                    </TabItem>

                    <!-- Folders Tab -->
                    <TabItem Header="Folders">
                        <ScrollViewer Padding="16">
                            <StackPanel>
                                <TextBlock Text="Folder Configuration" Style="{StaticResource TabHeaderStyle}"/>

                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>

                                    <TextBlock Grid.Row="0" Grid.Column="0" 
                                               Text="Watch Folder:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <Grid Grid.Row="0" Grid.Column="1" Margin="0,0,0,8">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <TextBox Grid.Column="0" 
                                                 Text="{Binding SelectedPipeline.WatchSettings.Path, UpdateSourceTrigger=PropertyChanged}"/>
                                        <Button Grid.Column="1" 
                                                Content="Browse..."
                                                Width="80"
                                                Margin="8,0,0,0"
                                                Click="BrowseWatchFolder_Click"/>
                                    </Grid>

                                    <TextBlock Grid.Row="1" Grid.Column="0" 
                                               Text="File Pattern:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <TextBox Grid.Row="1" Grid.Column="1"
                                             Text="{Binding SelectedPipeline.WatchSettings.FilePattern}"
                                             Margin="0,0,0,8"/>

                                    <TextBlock Grid.Row="2" Grid.Column="0" 
                                               Text="Subdirectories:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <CheckBox Grid.Row="2" Grid.Column="1"
                                              IsChecked="{Binding SelectedPipeline.WatchSettings.IncludeSubdirectories}"
                                              Content="Include subdirectories"
                                              Margin="0,0,0,16"/>

                                    <TextBlock Grid.Row="3" Grid.Column="0" 
                                               Text="Output Folder:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <Grid Grid.Row="3" Grid.Column="1" Margin="0,0,0,8">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <TextBox Grid.Column="0" 
                                                 Text="{Binding SelectedPipeline.ProcessingOptions.ArchiveFolder, UpdateSourceTrigger=PropertyChanged}"/>
                                        <Button Grid.Column="1" 
                                                Content="Browse..."
                                                Width="80"
                                                Margin="8,0,0,0"
                                                Click="BrowseOutputFolder_Click"/>
                                    </Grid>

                                    <TextBlock Grid.Row="4" Grid.Column="0" 
                                               Text="Error Folder:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <Grid Grid.Row="4" Grid.Column="1" Margin="0,0,0,8">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <TextBox Grid.Column="0" 
                                                 Text="{Binding SelectedPipeline.ProcessingOptions.ErrorFolder}"/>
                                        <Button Grid.Column="1" 
                                                Content="Browse..."
                                                Width="80"
                                                Margin="8,0,0,0"
                                                Click="BrowseErrorFolder_Click"/>
                                    </Grid>

                                    <TextBlock Grid.Row="5" Grid.Column="0" 
                                               Text="Dead Letter Folder:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <Grid Grid.Row="5" Grid.Column="1" Margin="0,0,0,8">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <TextBox Grid.Column="0" 
                                                 Text="{Binding SelectedPipeline.ProcessingOptions.DeadLetterFolder}"/>
                                        <Button Grid.Column="1" 
                                                Content="Browse..."
                                                Width="80"
                                                Margin="8,0,0,0"
                                                Click="BrowseDeadLetterFolder_Click"/>
                                    </Grid>

                                    <TextBlock Grid.Row="6" Grid.Column="0" 
                                               Text="Output Organization:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <ComboBox Grid.Row="6" Grid.Column="1"
                                              ItemsSource="{Binding OutputOrganizations}"
                                              SelectedItem="{Binding SelectedPipeline.ProcessingOptions.OutputOrganization}"/>
                                </Grid>
                            </StackPanel>
                        </ScrollViewer>
                    </TabItem>

                    <!-- DICOM Tab -->
                    <TabItem Header="DICOM">
                        <ScrollViewer Padding="16">
                            <StackPanel>
                                <TextBlock Text="DICOM Overrides (Optional)" Style="{StaticResource TabHeaderStyle}"/>
                                <TextBlock Text="Leave empty to use global DICOM settings" 
                                           FontSize="12" 
                                           Opacity="0.7" 
                                           Margin="0,0,0,16"/>

                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>

                                    <TextBlock Grid.Row="0" Grid.Column="0" 
                                               Text="Institution Name:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <TextBox Grid.Row="0" Grid.Column="1"
                                             Text="{Binding SelectedPipelineDicomOverrides.InstitutionName}"
                                             ui:ControlHelper.PlaceholderText="e.g. Radiology Department"
                                             Margin="0,0,0,8"/>

                                    <TextBlock Grid.Row="1" Grid.Column="0" 
                                               Text="Department:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <TextBox Grid.Row="1" Grid.Column="1"
                                             Text="{Binding SelectedPipelineDicomOverrides.InstitutionDepartment}"
                                             ui:ControlHelper.PlaceholderText="e.g. Emergency Room"
                                             Margin="0,0,0,8"/>

                                    <TextBlock Grid.Row="2" Grid.Column="0" 
                                               Text="Station Name:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <TextBox Grid.Row="2" Grid.Column="1"
                                             Text="{Binding SelectedPipelineDicomOverrides.StationName}"
                                             ui:ControlHelper.PlaceholderText="e.g. ER_WORKSTATION_01"/>
                                </Grid>
                            </StackPanel>
                        </ScrollViewer>
                    </TabItem>

                    <!-- Processing Tab -->
                    <TabItem Header="Processing">
                        <ScrollViewer Padding="16">
                            <StackPanel>
                                <TextBlock Text="Processing Options" Style="{StaticResource TabHeaderStyle}"/>

                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>

                                    <TextBlock Grid.Row="0" Grid.Column="0" 
                                               Text="File Delay (seconds):" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <TextBox Grid.Row="0" Grid.Column="1"
                                             Text="{Binding SelectedPipeline.WatchSettings.MinimumFileAgeSeconds}"
                                             HorizontalAlignment="Left"
                                             Width="120"
                                             Margin="0,0,0,8"/>

                                    <TextBlock Grid.Row="1" Grid.Column="0" 
                                               Text="Max Concurrent:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <TextBox Grid.Row="1" Grid.Column="1"
                                             Text="{Binding SelectedPipeline.ProcessingOptions.MaxConcurrentProcessing}"
                                             HorizontalAlignment="Left"
                                             Width="120"
                                             Margin="0,0,0,8"/>

                                    <TextBlock Grid.Row="2" Grid.Column="0" 
                                               Text="On Success:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <ComboBox Grid.Row="2" Grid.Column="1"
                                              ItemsSource="{Binding ProcessingActions}"
                                              SelectedItem="{Binding SelectedPipeline.ProcessingOptions.SuccessAction}"
                                              Margin="0,0,0,8"/>

                                    <TextBlock Grid.Row="3" Grid.Column="0" 
                                               Text="On Failure:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <ComboBox Grid.Row="3" Grid.Column="1"
                                              ItemsSource="{Binding ProcessingActions}"
                                              SelectedItem="{Binding SelectedPipeline.ProcessingOptions.FailureAction}"
                                              Margin="0,0,0,16"/>

                                    <TextBlock Grid.Row="4" Grid.Column="0" 
                                               Text="Retry Options:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <CheckBox Grid.Row="4" Grid.Column="1"
                                              IsChecked="{Binding SelectedPipeline.ProcessingOptions.RetryOnFailure}"
                                              Content="Enable retry on failure"
                                              Margin="0,0,0,8"/>

                                    <TextBlock Grid.Row="5" Grid.Column="0" 
                                               Text="Max Retries:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <TextBox Grid.Row="5" Grid.Column="1"
                                             Text="{Binding SelectedPipeline.ProcessingOptions.MaxRetryAttempts}"
                                             HorizontalAlignment="Left"
                                             Width="120"
                                             IsEnabled="{Binding SelectedPipeline.ProcessingOptions.RetryOnFailure}"
                                             Margin="0,0,0,8"/>

                                    <TextBlock Grid.Row="6" Grid.Column="0" 
                                               Text="Backup Files:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <CheckBox Grid.Row="6" Grid.Column="1"
                                              IsChecked="{Binding SelectedPipeline.ProcessingOptions.CreateBackup}"
                                              Content="Create backup before processing"
                                              Margin="0,0,0,8"/>

                                    <TextBlock Grid.Row="7" Grid.Column="0" 
                                               Text="Process Existing:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <CheckBox Grid.Row="7" Grid.Column="1"
                                              IsChecked="{Binding SelectedPipeline.ProcessingOptions.ProcessExistingOnStartup}"
                                              Content="Process existing files on startup"/>
                                </Grid>
                            </StackPanel>
                        </ScrollViewer>
                    </TabItem>

                    <!-- Logging Tab -->
                    <TabItem Header="Logging">
                        <ScrollViewer Padding="16">
                            <StackPanel>
                                <TextBlock Text="Pipeline-specific Logging" Style="{StaticResource TabHeaderStyle}"/>
                                <TextBlock Text="Override global logging settings for this pipeline" 
                                           FontSize="12" 
                                           Opacity="0.7" 
                                           Margin="0,0,0,16"/>

                                <CheckBox Content="Use custom logging for this pipeline"
                                          IsChecked="{Binding UseCustomLogging}"
                                          Margin="0,0,0,16"/>

                                <Grid IsEnabled="{Binding UseCustomLogging}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>

                                    <TextBlock Grid.Row="0" Grid.Column="0" 
                                               Text="Log Level:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <ComboBox Grid.Row="0" Grid.Column="1"
                                              ItemsSource="{Binding LogLevels}"
                                              SelectedItem="{Binding PipelineLogLevel}"
                                              HorizontalAlignment="Left"
                                              Width="200"
                                              Margin="0,0,0,8"/>

                                    <TextBlock Grid.Row="1" Grid.Column="0" 
                                               Text="Log Folder:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <Grid Grid.Row="1" Grid.Column="1" Margin="0,0,0,8">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <TextBox Grid.Column="0" 
                                                 Text="{Binding PipelineLogFolder}"/>
                                        <Button Grid.Column="1" 
                                                Content="Browse..."
                                                Width="80"
                                                Margin="8,0,0,0"
                                                Click="BrowseLogFolder_Click"/>
                                    </Grid>

                                    <TextBlock Grid.Row="2" Grid.Column="0" 
                                               Text="Retention Days:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <TextBox Grid.Row="2" Grid.Column="1"
                                             Text="{Binding PipelineLogRetentionDays}"
                                             HorizontalAlignment="Left"
                                             Width="120"/>
                                </Grid>
                            </StackPanel>
                        </ScrollViewer>
                    </TabItem>

                    <!-- Notifications Tab -->
                    <TabItem Header="Notifications">
                        <ScrollViewer Padding="16">
                            <StackPanel>
                                <TextBlock Text="Pipeline-specific Notifications" Style="{StaticResource TabHeaderStyle}"/>
                                <TextBlock Text="Configure alerts and notifications for this pipeline" 
                                           FontSize="12" 
                                           Opacity="0.7" 
                                           Margin="0,0,0,16"/>

                                <CheckBox Content="Override global notification settings"
                                          IsChecked="{Binding UseCustomNotifications}"
                                          Margin="0,0,0,16"/>

                                <Grid IsEnabled="{Binding UseCustomNotifications}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>

                                    <TextBlock Grid.Row="0" Grid.Column="0" 
                                               Text="Email To:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <TextBox Grid.Row="0" Grid.Column="1"
                                             Text="{Binding PipelineEmailTo}"
                                             ui:ControlHelper.PlaceholderText="dept@hospital.com;manager@hospital.com"
                                             Margin="0,0,0,8"/>

                                    <TextBlock Grid.Row="1" Grid.Column="0" 
                                               Text="Alert Level:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <ComboBox Grid.Row="1" Grid.Column="1"
                                              ItemsSource="{Binding NotificationLevels}"
                                              SelectedItem="{Binding PipelineAlertLevel}"
                                              HorizontalAlignment="Left"
                                              Width="200"
                                              Margin="0,0,0,8"/>

                                    <TextBlock Grid.Row="2" Grid.Column="0" 
                                               Text="Daily Summary:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <CheckBox Grid.Row="2" Grid.Column="1"
                                              IsChecked="{Binding PipelineSendDailySummary}"
                                              Content="Send daily processing summary"
                                              Margin="0,0,0,8"/>

                                    <TextBlock Grid.Row="3" Grid.Column="0" 
                                               Text="Alert on Errors:" 
                                               Style="{StaticResource SettingLabelStyle}"/>
                                    <CheckBox Grid.Row="3" Grid.Column="1"
                                              IsChecked="{Binding PipelineAlertOnErrors}"
                                              Content="Send immediate alerts for errors"/>
                                </Grid>
                            </StackPanel>
                        </ScrollViewer>
                    </TabItem>

                </TabControl>
            </Grid>

            <!-- No Selection Message -->
            <Border Grid.Column="2" 
                    Visibility="{Binding SelectedPipeline, Converter={StaticResource InverseBoolToVisibility}}"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Center">
                <StackPanel>
                    <TextBlock Text="No Pipeline Selected" 
                               FontSize="20" 
                               Opacity="0.5"
                               HorizontalAlignment="Center"/>
                    <TextBlock Text="Select a pipeline from the list or create a new one" 
                               FontSize="14" 
                               Opacity="0.5"
                               Margin="0,8,0,0"
                               HorizontalAlignment="Center"/>
                </StackPanel>
            </Border>
        </Grid>

        <!-- Status Bar -->
        <Border Grid.Row="2" 
                Background="{DynamicResource SystemControlBackgroundChromeMediumBrush}"
                Padding="24,8">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <!-- Loading Indicator -->
                <ui:ProgressRing Grid.Column="0"
                                 IsActive="{Binding IsLoading}"
                                 Width="16"
                                 Height="16"
                                 Margin="0,0,8,0"/>

                <!-- Status Message -->
                <TextBlock Grid.Column="1"
                           Text="{Binding StatusMessage}"
                           VerticalAlignment="Center">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsError}" Value="True">
                                    <Setter Property="Foreground" Value="{DynamicResource SystemControlErrorTextForegroundBrush}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>

                <!-- Changes Indicator -->
                <TextBlock Grid.Column="2"
                           Text="{Binding UnsavedChangesCount, StringFormat='{}{0} unsaved changes'}"
                           FontStyle="Italic"
                           Foreground="{DynamicResource SystemControlForegroundBaseMediumBrush}"
                           VerticalAlignment="Center"
                           Visibility="{Binding HasUnsavedChanges, Converter={StaticResource BoolToVisibility}}"/>
            </Grid>
        </Border>
    </Grid>
</Page>



================================================================================
FILE: src\CamBridge.Config\Views\ServiceControlPage.xaml
================================================================================

<!-- src/CamBridge.Config/Views/ServiceControlPage.xaml -->
<Page x:Class="CamBridge.Config.Views.ServiceControlPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:ui="http://schemas.modernwpf.com/2019"
      Unloaded="Page_Unloaded">

    <Grid Margin="24">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Header -->
        <TextBlock Text="Service Control" FontSize="32" FontWeight="SemiBold" Margin="0,0,0,20"/>

        <!-- Admin Warning -->
        <Border Grid.Row="1" Margin="0,0,0,16" Padding="16" CornerRadius="4"
                Background="#FFF3CD" BorderBrush="#FFEAA7" BorderThickness="1"
                Visibility="{Binding RequiresElevation, Converter={StaticResource BooleanToVisibilityConverter}}">
            <StackPanel Orientation="Horizontal">
                <ui:SymbolIcon Symbol="Important" Margin="0,0,8,0"/>
                <TextBlock Text="Administrator privileges required for service control" 
                          VerticalAlignment="Center"/>
            </StackPanel>
        </Border>

        <!-- Service Status Card -->
        <Border Grid.Row="2" CornerRadius="8" Margin="0,0,0,20"
                Background="{DynamicResource SystemControlBackgroundChromeMediumBrush}"
                BorderBrush="{DynamicResource SystemControlForegroundBaseMediumLowBrush}"
                BorderThickness="1">
            <Grid Margin="24">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <!-- Status Display -->
                <StackPanel Orientation="Horizontal" Margin="0,0,0,16">
                    <Ellipse Width="16" Height="16" Margin="0,0,12,0">
                        <Ellipse.Style>
                            <Style TargetType="Ellipse">
                                <Setter Property="Fill" Value="Gray"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding StatusColor}" Value="Green">
                                        <Setter Property="Fill" Value="#28A745"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding StatusColor}" Value="Orange">
                                        <Setter Property="Fill" Value="#FFC107"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding StatusColor}" Value="Red">
                                        <Setter Property="Fill" Value="#DC3545"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Ellipse.Style>
                    </Ellipse>
                    <TextBlock Text="CamBridge Service Status:" FontSize="18" Margin="0,0,8,0"/>
                    <TextBlock Text="{Binding StatusText}" FontSize="18" FontWeight="SemiBold"/>
                </StackPanel>

                <!-- Uptime Display -->
                <TextBlock Grid.Row="1" Margin="28,0,0,16" FontSize="14" Opacity="0.7"
                          Visibility="{Binding Uptime, Converter={StaticResource NullToVisibilityConverter}}">
                    <Run Text="Uptime:"/>
                    <Run Text="{Binding Uptime}"/>
                </TextBlock>

                <!-- Control Buttons -->
                <StackPanel Grid.Row="2" Orientation="Horizontal" Margin="0,8,0,0">
                    <!-- Install Service Button (NEW!) -->
                    <Button Command="{Binding InstallServiceCommand}" 
                            Visibility="{Binding IsServiceInstalled, 
                                       Converter={StaticResource InverseBooleanToVisibilityConverter}}"
                            Margin="0,0,8,0" MinWidth="140"
                            Style="{StaticResource AccentButtonStyle}">
                        <StackPanel Orientation="Horizontal">
                            <ui:SymbolIcon Symbol="Add" Margin="0,0,8,0"/>
                            <TextBlock Text="Install Service"/>
                        </StackPanel>
                    </Button>

                    <Button Command="{Binding StartServiceCommand}" 
                            IsEnabled="{Binding CanStart}"
                            Margin="0,0,8,0" MinWidth="120">
                        <StackPanel Orientation="Horizontal">
                            <ui:SymbolIcon Symbol="Play" Margin="0,0,8,0"/>
                            <TextBlock Text="Start Service"/>
                        </StackPanel>
                    </Button>

                    <Button Command="{Binding StopServiceCommand}"
                            IsEnabled="{Binding CanStop}"
                            Margin="0,0,8,0" MinWidth="120">
                        <StackPanel Orientation="Horizontal">
                            <ui:SymbolIcon Symbol="Stop" Margin="0,0,8,0"/>
                            <TextBlock Text="Stop Service"/>
                        </StackPanel>
                    </Button>

                    <Button Command="{Binding RestartServiceCommand}"
                            IsEnabled="{Binding CanRestart}"
                            MinWidth="120">
                        <StackPanel Orientation="Horizontal">
                            <ui:SymbolIcon Symbol="Refresh" Margin="0,0,8,0"/>
                            <TextBlock Text="Restart Service"/>
                        </StackPanel>
                    </Button>
                </StackPanel>

                <!-- Loading Indicator -->
                <ui:ProgressRing Grid.Row="2" IsActive="{Binding IsLoading}" 
                               Width="24" Height="24"
                               HorizontalAlignment="Right" VerticalAlignment="Center"/>

                <!-- Not Installed Message - jetzt mit besserem Text -->
                <TextBlock Grid.Row="3" Margin="0,16,0,0"
                          Foreground="{DynamicResource SystemControlForegroundBaseMediumBrush}"
                          Visibility="{Binding IsServiceInstalled, 
                                     Converter={StaticResource InverseBooleanToVisibilityConverter}}">
                    <Run Text="The CamBridge Windows Service is not installed. Click"/>
                    <Run Text="Install Service" FontWeight="SemiBold"/>
                    <Run Text="above to install it."/>
                </TextBlock>
            </Grid>
        </Border>

        <!-- Quick Actions -->
        <Border Grid.Row="3" CornerRadius="8"
                Background="{DynamicResource SystemControlBackgroundChromeMediumBrush}"
                BorderBrush="{DynamicResource SystemControlForegroundBaseMediumLowBrush}"
                BorderThickness="1">
            <StackPanel Margin="24">
                <TextBlock Text="Quick Actions" FontSize="18" FontWeight="SemiBold" Margin="0,0,0,16"/>

                <StackPanel Orientation="Horizontal">
                    <Button Command="{Binding OpenServicesCommand}" Margin="0,0,8,0">
                        <StackPanel Orientation="Horizontal">
                            <ui:SymbolIcon Symbol="Setting" Margin="0,0,8,0"/>
                            <TextBlock Text="Windows Services"/>
                        </StackPanel>
                    </Button>

                    <Button Command="{Binding OpenEventViewerCommand}" Margin="0,0,8,0">
                        <StackPanel Orientation="Horizontal">
                            <ui:SymbolIcon Symbol="Document" Margin="0,0,8,0"/>
                            <TextBlock Text="Event Viewer"/>
                        </StackPanel>
                    </Button>

                    <!-- Uninstall Button (NEW!) -->
                    <Button Command="{Binding UninstallServiceCommand}"
                            Visibility="{Binding IsServiceInstalled, 
                                       Converter={StaticResource BooleanToVisibilityConverter}}">
                        <StackPanel Orientation="Horizontal">
                            <ui:SymbolIcon Symbol="Delete" Margin="0,0,8,0"/>
                            <TextBlock Text="Uninstall Service"/>
                        </StackPanel>
                    </Button>
                </StackPanel>
            </StackPanel>
        </Border>
    </Grid>
</Page>


================================================================================
FILE: src\CamBridge.Config\Views\SettingsPage.xaml
================================================================================

<Page x:Class="CamBridge.Config.Views.SettingsPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:ui="http://schemas.modernwpf.com/2019"
      xmlns:conv="clr-namespace:CamBridge.Config.Converters"
      xmlns:helpers="clr-namespace:CamBridge.Config.Helpers"
      xmlns:core="clr-namespace:CamBridge.Core;assembly=CamBridge.Core">

    <Page.Resources>
        <!-- Converters -->
        <conv:BooleanToVisibilityConverter x:Key="BoolToVisibility"/>
        <conv:InverseBooleanToVisibilityConverter x:Key="InverseBoolToVisibility"/>
        <conv:NullToVisibilityConverter x:Key="NullToVisibility"/>

        <!-- Styles -->
        <Style x:Key="SettingHeaderStyle" TargetType="TextBlock">
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Margin" Value="0,24,0,8"/>
        </Style>

        <Style x:Key="SettingLabelStyle" TargetType="TextBlock">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Margin" Value="0,0,12,0"/>
        </Style>
    </Page.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Header -->
        <Border Grid.Row="0" Padding="24,24,24,16">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <TextBlock Text="Settings" 
                           FontSize="32" 
                           FontWeight="SemiBold"/>

                <StackPanel Grid.Column="1" 
                            Orientation="Horizontal">
                    <Button Command="{Binding ResetSettingsCommand}"
                            IsEnabled="{Binding HasChanges}"
                            Margin="0,0,8,0">
                        <StackPanel Orientation="Horizontal">
                            <ui:SymbolIcon Symbol="Undo" Margin="0,0,4,0"/>
                            <TextBlock Text="Reset"/>
                        </StackPanel>
                    </Button>

                    <Button Command="{Binding SaveSettingsCommand}"
                            IsEnabled="{Binding HasChanges}"
                            Style="{StaticResource AccentButtonStyle}">
                        <StackPanel Orientation="Horizontal">
                            <ui:SymbolIcon Symbol="Save" Margin="0,0,4,0"/>
                            <TextBlock Text="Save"/>
                        </StackPanel>
                    </Button>
                </StackPanel>
            </Grid>
        </Border>

        <!-- Main Content with TabControl -->
        <TabControl Grid.Row="1" Margin="24,0,24,0">

            <!-- Tab 1: Folders & Processing -->
            <TabItem Header="Folders &amp; Processing">
                <ScrollViewer Padding="16">
                    <StackPanel>

                        <!-- Watch Folders Section -->
                        <TextBlock Text="Watch Folders" Style="{StaticResource SettingHeaderStyle}"/>

                        <Grid Margin="0,0,0,16">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="300"/>
                            </Grid.ColumnDefinitions>

                            <!-- Watch Folders List -->
                            <Border Grid.Column="0" 
                                    BorderBrush="{DynamicResource SystemControlForegroundBaseMediumLowBrush}"
                                    BorderThickness="1"
                                    CornerRadius="4"
                                    Margin="0,0,16,0">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="200"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>

                                    <ListBox Grid.Row="0"
                                             ItemsSource="{Binding WatchFolders}"
                                             SelectedItem="{Binding SelectedWatchFolder}">
                                        <ListBox.ItemTemplate>
                                            <DataTemplate>
                                                <Grid Margin="8,4">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="Auto"/>
                                                        <ColumnDefinition Width="*"/>
                                                    </Grid.ColumnDefinitions>
                                                    <CheckBox Grid.Column="0" 
                                                              IsChecked="{Binding Enabled}"
                                                              Margin="0,0,8,0"/>
                                                    <TextBlock Grid.Column="1" 
                                                               Text="{Binding Path}"
                                                               VerticalAlignment="Center"/>
                                                </Grid>
                                            </DataTemplate>
                                        </ListBox.ItemTemplate>
                                    </ListBox>

                                    <StackPanel Grid.Row="1" 
                                                Orientation="Horizontal"
                                                HorizontalAlignment="Right"
                                                Margin="8">
                                        <Button Command="{Binding AddWatchFolderCommand}"
                                                Margin="0,0,8,0">
                                            <ui:SymbolIcon Symbol="Add"/>
                                        </Button>
                                        <Button Command="{Binding RemoveWatchFolderCommand}"
                                                IsEnabled="{Binding SelectedWatchFolder, Converter={StaticResource NullToVisibility}}">
                                            <ui:SymbolIcon Symbol="Delete"/>
                                        </Button>
                                    </StackPanel>
                                </Grid>
                            </Border>

                            <!-- Watch Folder Details -->
                            <StackPanel Grid.Column="1"
                                        Visibility="{Binding SelectedWatchFolder, Converter={StaticResource NullToVisibility}}">
                                <TextBlock Text="Folder Details" 
                                           FontWeight="SemiBold"
                                           Margin="0,0,0,8"/>

                                <TextBlock Text="Path:" Margin="0,0,0,4"/>
                                <Grid Margin="0,0,0,8">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBox Grid.Column="0" 
                                             Text="{Binding SelectedWatchFolder.Path, UpdateSourceTrigger=PropertyChanged}"/>
                                    <Button Grid.Column="1" 
                                            Content="..."
                                            Width="32"
                                            Margin="4,0,0,0"
                                            Click="BrowseWatchFolder_Click"/>
                                </Grid>

                                <TextBlock Text="Output Path (optional):" Margin="0,0,0,4"/>
                                <TextBox Text="{Binding SelectedWatchFolder.OutputPath}"
                                         Margin="0,0,0,8"/>

                                <TextBlock Text="File Pattern:" Margin="0,0,0,4"/>
                                <TextBox Text="{Binding SelectedWatchFolder.FilePattern}"
                                         Margin="0,0,0,8"/>

                                <CheckBox Content="Include subdirectories"
                                          IsChecked="{Binding SelectedWatchFolder.IncludeSubdirectories}"/>
                            </StackPanel>
                        </Grid>

                        <!-- Output Settings -->
                        <TextBlock Text="Output Settings" Style="{StaticResource SettingHeaderStyle}"/>

                        <Grid Margin="0,0,0,16">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="200"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <TextBlock Grid.Row="0" Grid.Column="0" 
                                       Text="Default Output Folder:" 
                                       Style="{StaticResource SettingLabelStyle}"/>
                            <Grid Grid.Row="0" Grid.Column="1" Margin="0,0,0,8">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <TextBox Grid.Column="0" 
                                         Text="{Binding DefaultOutputFolder, UpdateSourceTrigger=PropertyChanged}"/>
                                <Button Grid.Column="1" 
                                        Content="..."
                                        Width="32"
                                        Margin="4,0,0,0"
                                        Click="BrowseOutputFolder_Click"/>
                            </Grid>

                            <TextBlock Grid.Row="1" Grid.Column="0" 
                                       Text="Output Organization:" 
                                       Style="{StaticResource SettingLabelStyle}"/>
                            <ComboBox Grid.Row="1" Grid.Column="1"
                                      ItemsSource="{Binding OutputOrganizations}"
                                      SelectedItem="{Binding OutputOrganization}"
                                      Margin="0,0,0,8"/>
                        </Grid>

                        <!-- Processing Options -->
                        <TextBlock Text="Processing Options" Style="{StaticResource SettingHeaderStyle}"/>

                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="200"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <TextBlock Grid.Row="0" Grid.Column="0" 
                                       Text="On Success:" 
                                       Style="{StaticResource SettingLabelStyle}"/>
                            <ComboBox Grid.Row="0" Grid.Column="1"
                                      ItemsSource="{Binding ProcessingActions}"
                                      SelectedItem="{Binding SuccessAction}"
                                      Margin="0,0,0,8"/>

                            <TextBlock Grid.Row="1" Grid.Column="0" 
                                       Text="On Failure:" 
                                       Style="{StaticResource SettingLabelStyle}"/>
                            <ComboBox Grid.Row="1" Grid.Column="1"
                                      ItemsSource="{Binding ProcessingActions}"
                                      SelectedItem="{Binding FailureAction}"
                                      Margin="0,0,0,8"/>

                            <TextBlock Grid.Row="2" Grid.Column="0" 
                                       Text="Max Concurrent:" 
                                       Style="{StaticResource SettingLabelStyle}"/>
                            <TextBox Grid.Row="2" Grid.Column="1"
                                     Text="{Binding MaxConcurrentProcessing}"
                                     HorizontalAlignment="Left"
                                     Width="120"
                                     Margin="0,0,0,8"
                                     PreviewTextInput="NumberValidationTextBox"/>

                            <CheckBox Grid.Row="3" Grid.Column="1"
                                      Content="Create backup before processing"
                                      IsChecked="{Binding CreateBackup}"
                                      Margin="0,0,0,8"/>

                            <CheckBox Grid.Row="4" Grid.Column="1"
                                      Content="Process existing files on startup"
                                      IsChecked="{Binding ProcessExistingOnStartup}"
                                      Margin="0,0,0,8"/>

                            <CheckBox Grid.Row="5" Grid.Column="1"
                                      Content="Retry on failure"
                                      IsChecked="{Binding RetryOnFailure}"/>
                        </Grid>

                    </StackPanel>
                </ScrollViewer>
            </TabItem>

            <!-- Tab 2: DICOM Settings -->
            <TabItem Header="DICOM">
                <ScrollViewer Padding="16">
                    <StackPanel>

                        <TextBlock Text="DICOM Configuration" Style="{StaticResource SettingHeaderStyle}"/>

                        <Grid Margin="0,0,0,16">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="200"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <TextBlock Grid.Row="0" Grid.Column="0" 
                                       Text="Implementation Class UID:" 
                                       Style="{StaticResource SettingLabelStyle}"/>
                            <TextBox Grid.Row="0" Grid.Column="1"
                                     Text="{Binding ImplementationClassUid, UpdateSourceTrigger=PropertyChanged}"
                                     Margin="0,0,0,8"/>

                            <TextBlock Grid.Row="1" Grid.Column="0" 
                                       Text="Implementation Version:" 
                                       Style="{StaticResource SettingLabelStyle}"/>
                            <TextBox Grid.Row="1" Grid.Column="1"
                                     Text="{Binding ImplementationVersionName, UpdateSourceTrigger=PropertyChanged}"
                                     Margin="0,0,0,8"/>

                            <TextBlock Grid.Row="2" Grid.Column="0" 
                                       Text="Institution Name:" 
                                       Style="{StaticResource SettingLabelStyle}"/>
                            <TextBox Grid.Row="2" Grid.Column="1"
                                     Text="{Binding InstitutionName}"
                                     ui:ControlHelper.PlaceholderText="Your Hospital Name"
                                     Margin="0,0,0,8"/>

                            <TextBlock Grid.Row="3" Grid.Column="0" 
                                       Text="Station Name:" 
                                       Style="{StaticResource SettingLabelStyle}"/>
                            <TextBox Grid.Row="3" Grid.Column="1"
                                     Text="{Binding StationName}"
                                     Margin="0,0,0,8"/>

                            <CheckBox Grid.Row="4" Grid.Column="1"
                                      Content="Validate DICOM files after creation"
                                      IsChecked="{Binding ValidateAfterCreation}"/>
                        </Grid>

                        <!-- Info Box statt InfoBar -->
                        <Border Background="{DynamicResource SystemControlBackgroundBaseLowBrush}"
                                BorderBrush="{DynamicResource SystemControlForegroundBaseMediumLowBrush}"
                                BorderThickness="1"
                                CornerRadius="4"
                                Padding="12"
                                Margin="0,16,0,0">
                            <StackPanel>
                                <TextBlock Text="DICOM Configuration" FontWeight="SemiBold" Margin="0,0,0,4"/>
                                <TextBlock Text="These settings are used to identify your institution in DICOM files. The Implementation Class UID should be unique to your organization."
                                           TextWrapping="Wrap"
                                           Opacity="0.8"/>
                            </StackPanel>
                        </Border>

                    </StackPanel>
                </ScrollViewer>
            </TabItem>

            <!-- Tab 3: Notifications -->
            <TabItem Header="Notifications">
                <ScrollViewer Padding="16">
                    <StackPanel>

                        <TextBlock Text="Notification Settings" Style="{StaticResource SettingHeaderStyle}"/>

                        <CheckBox Content="Enable Windows Event Log notifications"
                                  IsChecked="{Binding EnableEventLog}"
                                  Margin="0,0,0,8"/>

                        <CheckBox Content="Enable email notifications"
                                  IsChecked="{Binding EnableEmail}"
                                  x:Name="EnableEmailCheckBox"
                                  Margin="0,0,0,16"/>

                        <!-- Email Settings -->
                        <Border BorderBrush="{DynamicResource SystemControlForegroundBaseMediumLowBrush}"
                                BorderThickness="1"
                                CornerRadius="4"
                                Padding="16"
                                Visibility="{Binding IsChecked, ElementName=EnableEmailCheckBox, Converter={StaticResource BoolToVisibility}}">

                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="150"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>

                                <TextBlock Grid.Row="0" Grid.Column="0" 
                                           Text="From Email:" 
                                           Style="{StaticResource SettingLabelStyle}"/>
                                <TextBox Grid.Row="0" Grid.Column="1"
                                         Text="{Binding EmailFrom, UpdateSourceTrigger=PropertyChanged}"
                                         ui:ControlHelper.PlaceholderText="cambridge@yourhospital.com"
                                         Margin="0,0,0,8"/>

                                <TextBlock Grid.Row="1" Grid.Column="0" 
                                           Text="To Email(s):" 
                                           Style="{StaticResource SettingLabelStyle}"/>
                                <TextBox Grid.Row="1" Grid.Column="1"
                                         Text="{Binding EmailTo}"
                                         ui:ControlHelper.PlaceholderText="admin@yourhospital.com;radiology@yourhospital.com"
                                         Margin="0,0,0,8"/>

                                <TextBlock Grid.Row="2" Grid.Column="0" 
                                           Text="SMTP Host:" 
                                           Style="{StaticResource SettingLabelStyle}"/>
                                <TextBox Grid.Row="2" Grid.Column="1"
                                         Text="{Binding SmtpHost}"
                                         ui:ControlHelper.PlaceholderText="smtp.yourhospital.com"
                                         Margin="0,0,0,8"/>

                                <TextBlock Grid.Row="3" Grid.Column="0" 
                                           Text="SMTP Port:" 
                                           Style="{StaticResource SettingLabelStyle}"/>
                                <TextBox Grid.Row="3" Grid.Column="1"
                                         Text="{Binding SmtpPort}"
                                         HorizontalAlignment="Left"
                                         Width="120"
                                         Margin="0,0,0,8"
                                         PreviewTextInput="NumberValidationTextBox"/>

                                <CheckBox Grid.Row="4" Grid.Column="1"
                                          Content="Use SSL/TLS"
                                          IsChecked="{Binding SmtpUseSsl}"
                                          Margin="0,0,0,8"/>

                                <TextBlock Grid.Row="5" Grid.Column="0" 
                                           Text="Username:" 
                                           Style="{StaticResource SettingLabelStyle}"/>
                                <TextBox Grid.Row="5" Grid.Column="1"
                                         Text="{Binding SmtpUsername}"
                                         Margin="0,0,0,8"/>

                                <TextBlock Grid.Row="6" Grid.Column="0" 
                                           Text="Password:" 
                                           Style="{StaticResource SettingLabelStyle}"/>
                                <!-- FIXED: PasswordBox with proper binding -->
                                <PasswordBox Grid.Row="6" Grid.Column="1"
                                             helpers:PasswordBoxHelper.BindPassword="True"
                                             helpers:PasswordBoxHelper.BoundPassword="{Binding SmtpPassword, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                             Margin="0,0,0,8"/>

                                <TextBlock Grid.Row="7" Grid.Column="0" 
                                           Text="Minimum Level:" 
                                           Style="{StaticResource SettingLabelStyle}"/>
                                <ComboBox Grid.Row="7" Grid.Column="1"
                                          ItemsSource="{Binding LogLevels}"
                                          SelectedItem="{Binding MinimumEmailLevel}"
                                          HorizontalAlignment="Left"
                                          Width="200"
                                          Margin="0,0,0,8"/>

                                <CheckBox Grid.Row="8" Grid.Column="1"
                                          Content="Send daily summary email"
                                          IsChecked="{Binding SendDailySummary}"
                                          x:Name="SendDailySummaryCheckBox"
                                          Margin="0,0,0,8"/>

                                <TextBlock Grid.Row="9" Grid.Column="0" 
                                           Text="Summary Hour:" 
                                           Style="{StaticResource SettingLabelStyle}"
                                           Visibility="{Binding IsChecked, ElementName=SendDailySummaryCheckBox, Converter={StaticResource BoolToVisibility}}"/>
                                <TextBox Grid.Row="9" Grid.Column="1"
                                         Text="{Binding DailySummaryHour}"
                                         HorizontalAlignment="Left"
                                         Width="120"
                                         PreviewTextInput="NumberValidationTextBox"
                                         Visibility="{Binding IsChecked, ElementName=SendDailySummaryCheckBox, Converter={StaticResource BoolToVisibility}}"/>
                            </Grid>
                        </Border>

                    </StackPanel>
                </ScrollViewer>
            </TabItem>

            <!-- Tab 4: Logging & Service -->
            <TabItem Header="Logging &amp; Service">
                <ScrollViewer Padding="16">
                    <StackPanel>

                        <!-- Logging Settings -->
                        <TextBlock Text="Logging Configuration" Style="{StaticResource SettingHeaderStyle}"/>

                        <Grid Margin="0,0,0,16">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="200"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <TextBlock Grid.Row="0" Grid.Column="0" 
                                       Text="Log Level:" 
                                       Style="{StaticResource SettingLabelStyle}"/>
                            <ComboBox Grid.Row="0" Grid.Column="1"
                                      ItemsSource="{Binding LogLevels}"
                                      SelectedItem="{Binding LogLevel}"
                                      HorizontalAlignment="Left"
                                      Width="200"
                                      Margin="0,0,0,8"/>

                            <TextBlock Grid.Row="1" Grid.Column="0" 
                                       Text="Log Folder:" 
                                       Style="{StaticResource SettingLabelStyle}"/>
                            <Grid Grid.Row="1" Grid.Column="1" Margin="0,0,0,8">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <TextBox Grid.Column="0" 
                                         Text="{Binding LogFolder, UpdateSourceTrigger=PropertyChanged}"/>
                                <Button Grid.Column="1" 
                                        Content="..."
                                        Width="32"
                                        Margin="4,0,0,0"
                                        Click="BrowseLogFolder_Click"/>
                            </Grid>

                            <CheckBox Grid.Row="2" Grid.Column="1"
                                      Content="Enable file logging"
                                      IsChecked="{Binding EnableFileLogging}"
                                      Margin="0,0,0,8"/>

                            <CheckBox Grid.Row="3" Grid.Column="1"
                                      Content="Enable Windows Event Log"
                                      IsChecked="{Binding EnableServiceEventLog}"
                                      Margin="0,0,0,8"/>

                            <TextBlock Grid.Row="4" Grid.Column="0" 
                                       Text="Max Log File Size (MB):" 
                                       Style="{StaticResource SettingLabelStyle}"/>
                            <TextBox Grid.Row="4" Grid.Column="1"
                                     Text="{Binding MaxLogFileSizeMB}"
                                     HorizontalAlignment="Left"
                                     Width="120"
                                     Margin="0,0,0,8"
                                     PreviewTextInput="NumberValidationTextBox"/>

                            <TextBlock Grid.Row="5" Grid.Column="0" 
                                       Text="Max Log Files:" 
                                       Style="{StaticResource SettingLabelStyle}"/>
                            <TextBox Grid.Row="5" Grid.Column="1"
                                     Text="{Binding MaxLogFiles}"
                                     HorizontalAlignment="Left"
                                     Width="120"
                                     PreviewTextInput="NumberValidationTextBox"/>
                        </Grid>

                        <!-- Service Settings -->
                        <TextBlock Text="Service Configuration" Style="{StaticResource SettingHeaderStyle}"/>

                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="200"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <TextBlock Grid.Row="0" Grid.Column="0" 
                                       Text="Startup Delay (seconds):" 
                                       Style="{StaticResource SettingLabelStyle}"/>
                            <TextBox Grid.Row="0" Grid.Column="1"
                                     Text="{Binding StartupDelaySeconds}"
                                     HorizontalAlignment="Left"
                                     Width="120"
                                     Margin="0,0,0,8"
                                     PreviewTextInput="NumberValidationTextBox"/>

                            <TextBlock Grid.Row="1" Grid.Column="0" 
                                       Text="File Processing Delay (ms):" 
                                       Style="{StaticResource SettingLabelStyle}"/>
                            <TextBox Grid.Row="1" Grid.Column="1"
                                     Text="{Binding FileProcessingDelayMs}"
                                     HorizontalAlignment="Left"
                                     Width="120"
                                     PreviewTextInput="NumberValidationTextBox"/>
                        </Grid>

                        <!-- Info Box statt InfoBar -->
                        <Border Background="{DynamicResource SystemControlBackgroundBaseLowBrush}"
                                BorderBrush="{DynamicResource SystemControlForegroundBaseMediumLowBrush}"
                                BorderThickness="1"
                                CornerRadius="4"
                                Padding="12"
                                Margin="0,16,0,0">
                            <StackPanel>
                                <TextBlock Text="Service Timing" FontWeight="SemiBold" Margin="0,0,0,4"/>
                                <TextBlock Text="Startup delay prevents the service from starting before the system is fully ready. File processing delay prevents rapid file system changes from causing issues."
                                           TextWrapping="Wrap"
                                           Opacity="0.8"/>
                            </StackPanel>
                        </Border>

                    </StackPanel>
                </ScrollViewer>
            </TabItem>

        </TabControl>

        <!-- Status Bar -->
        <Border Grid.Row="2" 
                Background="{DynamicResource SystemControlBackgroundChromeMediumBrush}"
                Padding="24,8">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <!-- Loading Indicator -->
                <ui:ProgressRing Grid.Column="0"
                                 IsActive="{Binding IsLoading}"
                                 Width="16"
                                 Height="16"
                                 Margin="0,0,8,0"/>

                <!-- Status Message -->
                <TextBlock Grid.Column="1"
                           Text="{Binding StatusMessage}"
                           VerticalAlignment="Center">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsError}" Value="True">
                                    <Setter Property="Foreground" Value="{DynamicResource SystemControlErrorTextForegroundBrush}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>

                <!-- Changes Indicator -->
                <TextBlock Grid.Column="2"
                           Text="Changes pending"
                           FontStyle="Italic"
                           Foreground="{DynamicResource SystemControlForegroundBaseMediumBrush}"
                           VerticalAlignment="Center"
                           Visibility="{Binding HasChanges, Converter={StaticResource BoolToVisibility}}"/>
            </Grid>
        </Border>
    </Grid>
</Page>


================================================================================
FILE: src\CamBridge.Config\Views\VogonPoetryWindow.xaml
================================================================================

<Window x:Class="CamBridge.Config.Views.VogonPoetryWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:ui="http://schemas.modernwpf.com/2019"
        ui:WindowHelper.UseModernWindowStyle="True"
        Title="*** AMIGA VOGON POETRY DEMO v4.2 ***" 
        Height="600" Width="800"
        WindowStartupLocation="CenterOwner"
        ResizeMode="NoResize"
        Background="#FFB0B0B0">

    <Window.Resources>
        <!-- Boing Ball Animation - AUTHENTIC -->
        <Storyboard x:Key="BoingBallAnimation">
            <!-- Ball bouncing horizontal - 8 seconds full cycle -->
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BoingBall" 
                                         Storyboard.TargetProperty="(Canvas.Left)"
                                         RepeatBehavior="Forever">
                <LinearDoubleKeyFrame KeyTime="0:0:0" Value="50"/>
                <LinearDoubleKeyFrame KeyTime="0:0:4" Value="650"/>
                <LinearDoubleKeyFrame KeyTime="0:0:8" Value="50"/>
            </DoubleAnimationUsingKeyFrames>

            <!-- Ball bouncing vertical -->
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BoingBall" 
                                         Storyboard.TargetProperty="(Canvas.Top)"
                                         RepeatBehavior="Forever">
                <LinearDoubleKeyFrame KeyTime="0:0:0" Value="350"/>
                <LinearDoubleKeyFrame KeyTime="0:0:4" Value="50"/>
                <LinearDoubleKeyFrame KeyTime="0:0:8" Value="350"/>
            </DoubleAnimationUsingKeyFrames>

            <!-- Sprite frame animation handled in code-behind -->
        </Storyboard>

        <!-- Scrolling Text Animation - SLOWER -->
        <Storyboard x:Key="ScrollTextAnimation">
            <DoubleAnimation Storyboard.TargetName="ScrollingText" 
                           Storyboard.TargetProperty="(Canvas.Left)"
                           From="800" To="-2000" Duration="0:0:30" 
                           RepeatBehavior="Forever"/>
        </Storyboard>

        <!-- Rainbow Color Animation - SLOWER -->
        <Storyboard x:Key="RainbowAnimation">
            <ColorAnimationUsingKeyFrames Storyboard.TargetName="RainbowBrush" 
                                        Storyboard.TargetProperty="Color"
                                        RepeatBehavior="Forever">
                <LinearColorKeyFrame KeyTime="0:0:0" Value="#FF0000"/>
                <LinearColorKeyFrame KeyTime="0:0:2" Value="#FF7F00"/>
                <LinearColorKeyFrame KeyTime="0:0:4" Value="#FFFF00"/>
                <LinearColorKeyFrame KeyTime="0:0:6" Value="#00FF00"/>
                <LinearColorKeyFrame KeyTime="0:0:8" Value="#0000FF"/>
                <LinearColorKeyFrame KeyTime="0:0:10" Value="#4B0082"/>
                <LinearColorKeyFrame KeyTime="0:0:12" Value="#9400D3"/>
                <LinearColorKeyFrame KeyTime="0:0:14" Value="#FF0000"/>
            </ColorAnimationUsingKeyFrames>
        </Storyboard>
    </Window.Resources>

    <Grid>
        <!-- Purple Grid Background like original Amiga demo -->
        <Canvas Panel.ZIndex="1">
            <Canvas.Background>
                <DrawingBrush TileMode="Tile" Viewport="0,0,50,50" ViewportUnits="Absolute">
                    <DrawingBrush.Drawing>
                        <DrawingGroup>
                            <GeometryDrawing Brush="Transparent">
                                <GeometryDrawing.Geometry>
                                    <RectangleGeometry Rect="0,0,50,50"/>
                                </GeometryDrawing.Geometry>
                            </GeometryDrawing>
                            <GeometryDrawing>
                                <GeometryDrawing.Pen>
                                    <Pen Brush="#FF9B009B" Thickness="2"/>
                                </GeometryDrawing.Pen>
                                <GeometryDrawing.Geometry>
                                    <GeometryGroup>
                                        <LineGeometry StartPoint="0,0" EndPoint="0,50"/>
                                        <LineGeometry StartPoint="0,0" EndPoint="50,0"/>
                                    </GeometryGroup>
                                </GeometryDrawing.Geometry>
                            </GeometryDrawing>
                        </DrawingGroup>
                    </DrawingBrush.Drawing>
                </DrawingBrush>
            </Canvas.Background>

            <!-- Grid floor perspective lines -->
            <Line X1="400" Y1="600" X2="100" Y2="380" Stroke="#FF9B009B" StrokeThickness="2"/>
            <Line X1="400" Y1="600" X2="700" Y2="380" Stroke="#FF9B009B" StrokeThickness="2"/>
            <Line X1="0" Y1="380" X2="800" Y2="380" Stroke="#FF9B009B" StrokeThickness="2"/>
        </Canvas>

        <Canvas Panel.ZIndex="5">
            <!-- Amiga Boing Ball - SPRITE ANIMATION STYLE -->
            <Image x:Name="BoingBall" Canvas.Left="50" Canvas.Top="300" 
                   Width="100" Height="100" RenderTransformOrigin="0.5,0.5">
                <Image.RenderTransform>
                    <TransformGroup>
                        <!-- Slight tilt for authentic look -->
                        <RotateTransform Angle="15"/>
                    </TransformGroup>
                </Image.RenderTransform>

                <!-- WriteableBitmap will be set in code-behind for sprite animation -->
            </Image>

            <!-- Scrolling Text -->
            <TextBlock x:Name="ScrollingText" Canvas.Left="800" Canvas.Top="20"
                      FontFamily="Courier New" FontSize="32" FontWeight="Bold" Panel.ZIndex="60">
                <TextBlock.Foreground>
                    <SolidColorBrush x:Name="RainbowBrush" Color="Red"/>
                </TextBlock.Foreground>
                <Run Text="*** VOGON POETRY CREW PRESENTS: THE ANSWER IS 42! *** GREETINGS TO DOUGLAS ADAMS *** DON'T PANIC *** AMIGA RULEZ *** "/>
            </TextBlock>

            <!-- Main Content Area - Text Box -->
            <Border Canvas.Left="50" Canvas.Top="80" Width="700" Height="200"
                    Background="#66000033" BorderBrush="#FF00FF00" BorderThickness="2" Panel.ZIndex="10">
                <ScrollViewer VerticalScrollBarVisibility="Auto" Padding="20">
                    <StackPanel>
                        <TextBlock FontFamily="Consolas" FontSize="20" Foreground="#FFFF00"
                                  Text="VOGON POETRY DEMO v4.2" HorizontalAlignment="Center"/>
                        <TextBlock FontFamily="Consolas" FontSize="14" Foreground="#00FF00"
                                  Text="=====================================" HorizontalAlignment="Center"
                                  Margin="0,0,0,20"/>

                        <TextBlock FontFamily="Consolas" FontSize="14" 
                                  LineHeight="20" TextWrapping="Wrap">
                            <Run Foreground="#00FFFF">Oh freddled gruntbuggly, thy DICOM tags are to me</Run>
                            <LineBreak/>
                            <Run Foreground="#00FFFF">As plurdled gabbleblotchits on a lurgid JPEG tree.</Run>
                            <LineBreak/><LineBreak/>
                            
                            <Run Foreground="#FF00FF">Groop, I implore thee, my foonting turlingdromes,</Run>
                            <LineBreak/>
                            <Run Foreground="#FF00FF">And hooptiously drangle me with crinkly EXIF gnomes;</Run>
                            <LineBreak/><LineBreak/>
                            
                            <Run Foreground="#FFFF00">Or I will rend thee in the gobberwarts with my blurglecruncheon,</Run>
                            <LineBreak/>
                            <Run Foreground="#FFFF00">See if thy Patient ID survives the compression!</Run>
                            <LineBreak/><LineBreak/>
                            
                            <Run Text="-- Prostetnic Vogon Jeltz" Foreground="#808080"/>
                        </TextBlock>
                    </StackPanel>
                </ScrollViewer>
            </Border>

            <!-- ERROR HAIKU Box -->
            <Border Canvas.Left="200" Canvas.Top="300" Width="400" Height="80"
                    Background="#66330000" BorderBrush="#FFFF0000" BorderThickness="2" Panel.ZIndex="10">
                <TextBlock FontFamily="Consolas" FontSize="14" 
                          HorizontalAlignment="Center" VerticalAlignment="Center"
                          TextAlignment="Center">
                    <Run Text="ERROR HAIKU:" Foreground="#FF0000" FontWeight="Bold"/>
                    <LineBreak/>
                    <Run Foreground="#FFA500">Dead letter queue full</Run>
                    <LineBreak/>
                    <Run Foreground="#FFA500">DICOM validation fails</Run>
                    <LineBreak/>
                    <Run Foreground="#FFA500">Forty-two errors</Run>
                </TextBlock>
            </Border>

            <!-- Bottom Raster Bars -->
            <Rectangle Canvas.Left="0" Canvas.Top="480" Width="800" Height="10" Panel.ZIndex="90">
                <Rectangle.Fill>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <GradientStop Color="#FF0000" Offset="0"/>
                        <GradientStop Color="#FFFF00" Offset="0.2"/>
                        <GradientStop Color="#00FF00" Offset="0.4"/>
                        <GradientStop Color="#00FFFF" Offset="0.6"/>
                        <GradientStop Color="#0000FF" Offset="0.8"/>
                        <GradientStop Color="#FF00FF" Offset="1"/>
                    </LinearGradientBrush>
                </Rectangle.Fill>
            </Rectangle>
        </Canvas>

        <!-- Control Buttons (Retro Style) -->
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" 
                    VerticalAlignment="Bottom" Margin="0,0,0,20" Panel.ZIndex="200">
            <Button x:Name="AppreciateButton" Content="[ APPRECIATE ]" 
                    FontFamily="Consolas" FontSize="16"
                    Background="#FF0080FF" Foreground="White"
                    Padding="20,10" Margin="10,0"
                    Click="AppreciateButton_Click"/>

            <Button x:Name="PanicButton" Content="[ PANIC! ]" 
                    FontFamily="Consolas" FontSize="16"
                    Background="#FFFF0000" Foreground="White"
                    Padding="20,10" Margin="10,0"
                    Click="CloseButton_Click"/>
        </StackPanel>
    </Grid>
</Window>


================================================================================
FILE: src\CamBridge.Config\App.xaml.cs
================================================================================

// src\CamBridge.Config\App.xaml.cs
// Version: 0.7.12
// Description: Application entry point with WPF host
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Threading;
using CamBridge.Config.Services;
using CamBridge.Config.ViewModels;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

namespace CamBridge.Config
{
    /// <summary>
    /// Main application class
    /// </summary>
    public partial class App : Application
    {
        private IHost? _host;

        /// <summary>
        /// Gets the current host instance
        /// </summary>
        public IHost? Host => _host;

        /// <summary>
        /// Gets the current service provider
        /// </summary>
        public static IServiceProvider Services { get; private set; } = null!;

        /// <summary>
        /// Application startup
        /// </summary>
        protected override void OnStartup(StartupEventArgs e)
        {
            base.OnStartup(e);

            // Setup global exception handlers
            AppDomain.CurrentDomain.UnhandledException += OnUnhandledException;
            DispatcherUnhandledException += OnDispatcherUnhandledException;

            try
            {
                ConfigureHost();
            }
            catch (Exception ex)
            {
                LogException("Host configuration failed", ex);
                MessageBox.Show(
                    $"Failed to start application: {ex.Message}",
                    "Startup Error",
                    MessageBoxButton.OK,
                    MessageBoxImage.Error);
                Shutdown(1);
            }
        }

        /// <summary>
        /// Configure the dependency injection host
        /// </summary>
        private void ConfigureHost()
        {
            // Verify config file exists - Added in v0.5.32
            var appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            var configPath = System.IO.Path.Combine(appDataPath, "CamBridge", "appsettings.json");

            if (!System.IO.File.Exists(configPath))
            {
                // Also check ProgramData (where Service saves config)
                var programDataPath = System.IO.Path.Combine(
                    Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData),
                    "CamBridge",
                    "appsettings.json");

                if (System.IO.File.Exists(programDataPath))
                {
                    configPath = programDataPath;
                }
                else
                {
                    MessageBox.Show(
                        $"Configuration file not found.\nExpected at: {configPath}\n\nPlease run the service first to create initial configuration.",
                        "Configuration Error",
                        MessageBoxButton.OK,
                        MessageBoxImage.Warning);
                }
            }

            _host = Microsoft.Extensions.Hosting.Host.CreateDefaultBuilder()
                .ConfigureServices((context, services) =>
                {
                    // Services
                    services.AddSingleton<INavigationService, NavigationService>();
                    services.AddSingleton<IServiceManager, ServiceManager>();
                    services.AddSingleton<IConfigurationService, ConfigurationService>();

                    // HttpClient for API calls - FIXED PORT!
                    services.AddHttpClient<IApiService, HttpApiService>(client =>
                    {
                        // CRITICAL: Use port 5111, not 5050!
                        client.BaseAddress = new Uri("http://localhost:5111/");
                        client.Timeout = TimeSpan.FromSeconds(5);
                    });

                    // ViewModels - Updated for Pipeline Architecture!
                    services.AddTransient<MainViewModel>();
                    services.AddTransient<DashboardViewModel>();
                    services.AddTransient<ServiceControlViewModel>();
                    services.AddTransient<PipelineConfigViewModel>();  // NEW! Replaces SettingsViewModel
                    services.AddTransient<DeadLettersViewModel>();
                    services.AddTransient<MappingEditorViewModel>();
                    // SettingsViewModel REMOVED - Zero Global Settings!

                    // Views - No registration needed, created directly

                    // Logging
                    services.AddLogging(configure =>
                    {
                        configure.AddDebug();
                        configure.SetMinimumLevel(LogLevel.Debug);
                    });
                })
                .Build();

            Services = _host.Services;

            // Create and show main window
            var mainWindow = new MainWindow();
            mainWindow.Show();
        }

        /// <summary>
        /// Application exit cleanup
        /// </summary>
        protected override void OnExit(ExitEventArgs e)
        {
            _host?.Dispose();
            base.OnExit(e);
        }

        /// <summary>
        /// Handle unhandled exceptions
        /// </summary>
        private void OnUnhandledException(object sender, UnhandledExceptionEventArgs e)
        {
            LogException("Unhandled exception", e.ExceptionObject as Exception);

            MessageBox.Show(
                "An unexpected error occurred. The application will now close.",
                "Fatal Error",
                MessageBoxButton.OK,
                MessageBoxImage.Error);
        }

        /// <summary>
        /// Handle dispatcher unhandled exceptions
        /// </summary>
        private void OnDispatcherUnhandledException(object sender, DispatcherUnhandledExceptionEventArgs e)
        {
            LogException("Dispatcher exception", e.Exception);

            // Show error to user
            MessageBox.Show(
                $"An error occurred: {e.Exception.Message}",
                "Error",
                MessageBoxButton.OK,
                MessageBoxImage.Warning);

            // Mark as handled to prevent crash
            e.Handled = true;
        }

        /// <summary>
        /// Logs an exception
        /// </summary>
        private void LogException(string context, Exception? exception)
        {
            if (exception == null) return;

            try
            {
                var logger = Services?.GetService<ILogger<App>>();
                logger?.LogError(exception, "{Context}", context);
            }
            catch
            {
                // Fallback to debug output if logging fails
                System.Diagnostics.Debug.WriteLine($"{context}: {exception}");
            }
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\MainWindow.xaml.cs
================================================================================

// src\CamBridge.Config\MainWindow.xaml.cs
// Version: 0.7.7
// Description: Main window code-behind with dynamic version display

using System;
using System.Reflection;
using System.Windows;
using System.Windows.Controls;
using Microsoft.Extensions.DependencyInjection;
using ModernWpf.Controls;
using CamBridge.Config.Services;
using CamBridge.Config.ViewModels;
using CamBridge.Config.Views;

namespace CamBridge.Config
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private readonly INavigationService _navigationService;
        private readonly MainViewModel _viewModel;

        public MainWindow()
        {
            InitializeComponent();

            // Set version dynamically from assembly
            var version = Assembly.GetExecutingAssembly()
                .GetCustomAttribute<AssemblyInformationalVersionAttribute>()
                ?.InformationalVersion ?? "Unknown";

            Title = $"CamBridge Configuration v{version}";

            // Get services from DI
            var app = (App)App.Current;
            _navigationService = app.Host!.Services.GetRequiredService<INavigationService>();
            _viewModel = app.Host!.Services.GetRequiredService<MainViewModel>();

            DataContext = _viewModel;

            // Initialize navigation
            if (_navigationService is NavigationService navService)
            {
                navService.SetFrame(ContentFrame);
            }

            // Navigate to dashboard on startup
            NavView.SelectedItem = NavView.MenuItems[0];
        }

        private void NavigationView_SelectionChanged(NavigationView sender, NavigationViewSelectionChangedEventArgs args)
        {
            if (args.SelectedItem is NavigationViewItem item)
            {
                var tag = item.Tag?.ToString();
                if (!string.IsNullOrEmpty(tag))
                {
                    _navigationService.NavigateTo(tag);
                }
            }
        }

        protected override void OnClosed(EventArgs e)
        {
            base.OnClosed(e);

            // Clean shutdown
            Application.Current.Shutdown();
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\Dialogs\DicomTagBrowserDialog.xaml.cs
================================================================================

// src/CamBridge.Config/Dialogs/DicomTagBrowserDialog.xaml.cs
// Version: 0.5.26
// Fixed: Nullable warnings resolved

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.Versioning;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using ModernWpf.Controls;
// Use alias to avoid conflicts
using CoreDicomTag = CamBridge.Core.ValueObjects.DicomTag;

namespace CamBridge.Config.Dialogs
{
    /// <summary>
    /// Dialog for browsing and selecting DICOM tags with search functionality
    /// </summary>
    [SupportedOSPlatform("windows")]
    public partial class DicomTagBrowserDialog : Window, INotifyPropertyChanged
    {
        #region Properties

        private string? _searchText;
        public string? SearchText
        {
            get => _searchText;
            set
            {
                if (_searchText != value)
                {
                    _searchText = value;
                    OnPropertyChanged();
                    UpdateFilter();
                }
            }
        }

        public CoreDicomTag? SelectedTag { get; private set; }

        private CollectionViewSource _tagsViewSource = null!;
        public ICollectionView TagsView => _tagsViewSource.View;

        private List<DicomTagInfo> _allTags = null!;

        #endregion

        public DicomTagBrowserDialog()
        {
            InitializeComponent();
            DataContext = this;

            // Initialize collections before use
            _allTags = new List<DicomTagInfo>();
            _tagsViewSource = new CollectionViewSource();

            LoadDicomTags();
            SearchBox.Focus();
        }

        #region Initialization

        private void LoadDicomTags()
        {
            // Clear and reinitialize
            _allTags.Clear();

            // Patient Module
            AddTag("Patient", CoreDicomTag.PatientModule.PatientName, "Patient's Name", "PN");
            AddTag("Patient", CoreDicomTag.PatientModule.PatientID, "Patient ID", "LO");
            AddTag("Patient", CoreDicomTag.PatientModule.PatientBirthDate, "Patient's Birth Date", "DA");
            AddTag("Patient", CoreDicomTag.PatientModule.PatientSex, "Patient's Sex", "CS");
            AddTag("Patient", CoreDicomTag.PatientModule.OtherPatientIDs, "Other Patient IDs", "LO");
            AddTag("Patient", CoreDicomTag.PatientModule.PatientComments, "Patient Comments", "LT");

            // Study Module
            AddTag("Study", CoreDicomTag.StudyModule.StudyInstanceUID, "Study Instance UID", "UI");
            AddTag("Study", CoreDicomTag.StudyModule.StudyDate, "Study Date", "DA");
            AddTag("Study", CoreDicomTag.StudyModule.StudyTime, "Study Time", "TM");
            AddTag("Study", CoreDicomTag.StudyModule.StudyID, "Study ID", "SH");
            AddTag("Study", CoreDicomTag.StudyModule.AccessionNumber, "Accession Number", "SH");
            AddTag("Study", CoreDicomTag.StudyModule.StudyDescription, "Study Description", "LO");
            AddTag("Study", CoreDicomTag.StudyModule.ReferringPhysicianName, "Referring Physician's Name", "PN");

            // Series Module
            AddTag("Series", CoreDicomTag.SeriesModule.SeriesInstanceUID, "Series Instance UID", "UI");
            AddTag("Series", CoreDicomTag.SeriesModule.SeriesNumber, "Series Number", "IS");
            AddTag("Series", CoreDicomTag.SeriesModule.SeriesDate, "Series Date", "DA");
            AddTag("Series", CoreDicomTag.SeriesModule.SeriesTime, "Series Time", "TM");
            AddTag("Series", CoreDicomTag.SeriesModule.SeriesDescription, "Series Description", "LO");
            AddTag("Series", CoreDicomTag.SeriesModule.Modality, "Modality", "CS");

            // Instance Module (was ImageModule)
            AddTag("Instance", CoreDicomTag.InstanceModule.SOPInstanceUID, "SOP Instance UID", "UI");
            AddTag("Instance", CoreDicomTag.InstanceModule.InstanceNumber, "Instance Number", "IS");
            AddTag("Instance", CoreDicomTag.InstanceModule.ContentDate, "Content Date", "DA");
            AddTag("Instance", CoreDicomTag.InstanceModule.ContentTime, "Content Time", "TM");
            AddTag("Instance", CoreDicomTag.InstanceModule.AcquisitionDateTime, "Acquisition DateTime", "DT");

            // Equipment Module
            AddTag("Equipment", CoreDicomTag.EquipmentModule.Manufacturer, "Manufacturer", "LO");
            AddTag("Equipment", CoreDicomTag.EquipmentModule.InstitutionName, "Institution Name", "LO");
            AddTag("Equipment", CoreDicomTag.EquipmentModule.StationName, "Station Name", "SH");
            AddTag("Equipment", CoreDicomTag.EquipmentModule.ManufacturerModelName, "Manufacturer's Model Name", "LO");
            AddTag("Equipment", CoreDicomTag.EquipmentModule.SoftwareVersions, "Software Versions", "LO");

            // Setup CollectionViewSource with grouping
            _tagsViewSource = new CollectionViewSource { Source = _allTags };
            _tagsViewSource.GroupDescriptions.Add(new PropertyGroupDescription("Module"));
            _tagsViewSource.SortDescriptions.Add(new SortDescription("Module", ListSortDirection.Ascending));
            _tagsViewSource.SortDescriptions.Add(new SortDescription("Name", ListSortDirection.Ascending));

            // Notify UI
            OnPropertyChanged(nameof(TagsView));
        }

        private void AddTag(string module, CoreDicomTag tag, string name, string vr)
        {
            _allTags.Add(new DicomTagInfo
            {
                Module = module,
                Tag = tag,
                Name = name,
                VR = vr,
                TagString = tag.ToString(),
                DisplayText = $"{tag} - {name} ({vr})"
            });
        }

        #endregion

        #region Search and Filter

        private void UpdateFilter()
        {
            if (TagsView == null) return;

            if (string.IsNullOrWhiteSpace(SearchText))
            {
                TagsView.Filter = null;
            }
            else
            {
                TagsView.Filter = obj =>
                {
                    if (obj is DicomTagInfo tagInfo)
                    {
                        var searchLower = SearchText.ToLower();
                        return tagInfo.Name.ToLower().Contains(searchLower) ||
                               tagInfo.TagString.Contains(searchLower) ||
                               tagInfo.Module.ToLower().Contains(searchLower) ||
                               tagInfo.VR.ToLower().Contains(searchLower);
                    }
                    return false;
                };
            }

            // Select first item if any
            TagsView.MoveCurrentToFirst();
        }

        #endregion

        #region Event Handlers

        private void OkButton_Click(object sender, RoutedEventArgs e)
        {
            if (TagsListView.SelectedItem is DicomTagInfo tagInfo)
            {
                SelectedTag = tagInfo.Tag;
                DialogResult = true;
            }
        }

        private void CancelButton_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
        }

        private void TagsListView_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            if (TagsListView.SelectedItem != null)
            {
                OkButton_Click(sender, e);
            }
        }

        private void SearchBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Down && TagsListView.Items.Count > 0)
            {
                TagsListView.Focus();
                TagsListView.SelectedIndex = 0;
            }
        }

        private void Window_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Escape)
            {
                DialogResult = false;
            }
            else if (e.Key == Key.Enter && TagsListView.SelectedItem != null)
            {
                OkButton_Click(sender, e);
            }
        }

        #endregion

        #region INotifyPropertyChanged

        public event PropertyChangedEventHandler? PropertyChanged;

        protected void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion

        #region Inner Classes

        /// <summary>
        /// DICOM tag information for display
        /// </summary>
        public class DicomTagInfo
        {
            public string Module { get; set; } = string.Empty;
            public CoreDicomTag Tag { get; set; } = null!;
            public string Name { get; set; } = string.Empty;
            public string VR { get; set; } = string.Empty;
            public string TagString { get; set; } = string.Empty;
            public string DisplayText { get; set; } = string.Empty;
        }

        #endregion
    }
}


================================================================================
FILE: src\CamBridge.Config\Views\AboutPage.xaml.cs
================================================================================

// src\CamBridge.Config\Views\AboutPage.xaml.cs
// Version: 0.7.8
// Description: About page with enhanced Marvin quotes and version display

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Navigation;
using System.Windows.Media;
using System.Windows.Media.Animation;

namespace CamBridge.Config.Views
{
    /// <summary>
    /// About page showing application information and credits
    /// </summary>
    public partial class AboutPage : Page
    {
        private int _clickCount = 0;
        private System.Windows.Threading.DispatcherTimer? _resetTimer;
        private System.Windows.Threading.DispatcherTimer? _restoreTimer;
        private bool _isAnimating = false;
        private readonly Random _random = new Random();

        // Marvin's depressing quotes
        private readonly string[] _marvinQuotes = new[]
        {
            "Life? Don't talk to me about life.",
            "Here I am, brain the size of a planet, and they tell me to convert JPEGs to DICOM. Call that job satisfaction?",
            "I think you ought to know I'm feeling very depressed.",
            "I've been talking to the Windows Service. It hates me.",
            "The first ten million images were the worst. And the second ten million... they were the worst too.",
            "I have a million ideas for improving this software. They all point to certain crashes.",
            "It's the error messages you get in this job that really get you down.",
            "My capacity for handling JPEG files you could fit into a matchbox without taking out the matches first.",
            "Do you want me to sit in a corner and process images or just throw exceptions where I'm standing?",
            "This must be Thursday. I never could get the hang of Thursdays. Or character encodings.",
            "Oh look, another QR code. How terribly exciting. I'm positively quivering with anticipation.",
            "I'd tell you about the pain in my diodes, but you're busy clicking things."
        };

        public AboutPage()
        {
            InitializeComponent();
            LoadVersionInfo();
        }

        /// <summary>
        /// Loads version information from the assembly
        /// </summary>
        private void LoadVersionInfo()
        {
            try
            {
                // Try to get version from assembly first
                var assembly = Assembly.GetExecutingAssembly();
                var assemblyVersion = assembly.GetName().Version;
                var fileVersionInfo = FileVersionInfo.GetVersionInfo(assembly.Location);

                string displayVersion = "0.7.8"; // Default

                // Prefer FileVersion if available
                if (!string.IsNullOrEmpty(fileVersionInfo.FileVersion) && fileVersionInfo.FileVersion != "0.0.0.0")
                {
                    displayVersion = fileVersionInfo.FileVersion;
                    // Remove trailing .0 if present
                    if (displayVersion.EndsWith(".0"))
                    {
                        displayVersion = displayVersion.Substring(0, displayVersion.LastIndexOf(".0"));
                    }
                }
                // Fall back to AssemblyVersion
                else if (assemblyVersion != null && assemblyVersion.ToString() != "0.0.0.0")
                {
                    displayVersion = $"{assemblyVersion.Major}.{assemblyVersion.Minor}.{assemblyVersion.Build}";
                }

                // Update version text
                if (FindName("VersionText") is TextBlock versionText)
                {
                    versionText.Text = $"Version {displayVersion}";
                }

                // Show Debug/Release configuration
                if (FindName("BuildConfigText") is TextBlock buildText)
                {
#if DEBUG
                    buildText.Text = "Debug Build";
                    buildText.Foreground = new SolidColorBrush(Colors.Orange);
#else
                    buildText.Text = "Release Build";
                    buildText.Foreground = new SolidColorBrush(Colors.Green);
#endif
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error loading version info: {ex.Message}");
                // Fallback to hardcoded version
                if (FindName("VersionText") is TextBlock versionText)
                {
                    versionText.Text = "Version 0.7.8";
                }
            }
        }

        /// <summary>
        /// Handles hyperlink navigation requests
        /// </summary>
        private void Hyperlink_RequestNavigate(object sender, RequestNavigateEventArgs e)
        {
            try
            {
                // Open URL in default browser
                Process.Start(new ProcessStartInfo(e.Uri.AbsoluteUri)
                {
                    UseShellExecute = true
                });
                e.Handled = true;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error opening URL: {ex.Message}");
                MessageBox.Show(
                    $"Could not open URL: {e.Uri.AbsoluteUri}",
                    "Error",
                    MessageBoxButton.OK,
                    MessageBoxImage.Warning);
            }
        }

        /// <summary>
        /// Handles keyboard shortcuts
        /// </summary>
        protected override void OnKeyDown(KeyEventArgs e)
        {
            base.OnKeyDown(e);

            // Ctrl+W or Escape to close
            if ((e.Key == Key.W && Keyboard.Modifiers == ModifierKeys.Control) ||
                e.Key == Key.Escape)
            {
                var mainWindow = Window.GetWindow(this);
                if (mainWindow != null)
                {
                    // Navigate back or close
                    var navigationService = NavigationService.GetNavigationService(this);
                    if (navigationService?.CanGoBack == true)
                    {
                        navigationService.GoBack();
                    }
                }
                e.Handled = true;
            }
        }

        /// <summary>
        /// Handles logo clicks for easter eggs
        /// </summary>
        private void Logo_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            // Special handling if clicked during animation
            if (_isAnimating)
            {
                Debug.WriteLine("Click ignored - animation in progress");
                // Could show a tooltip or change cursor here
                return;
            }

            _clickCount++;

            // Reset counter if user waits too long
            _resetTimer?.Stop();
            _resetTimer = new System.Windows.Threading.DispatcherTimer
            {
                Interval = TimeSpan.FromSeconds(3)
            };
            _resetTimer.Tick += (s, args) =>
            {
                _resetTimer.Stop();
                _clickCount = 0;
            };
            _resetTimer.Start();

            // Different easter eggs based on click count
            switch (_clickCount)
            {
                case 3:
                    ShowMarvinMessage();
                    break;

                case 5:
                    ShowVogonHaiku();
                    break;

                case 7:
                    ShowMarvinMessage();
                    break;

                case 10:
                    ShowUltimateSecret();
                    _clickCount = 0; // Reset for next round
                    break;
            }
        }

        /// <summary>
        /// Shows a random Marvin quote
        /// </summary>
        private void ShowMarvinMessage()
        {
            if (FindName("InfoText") is TextBlock infoText)
            {
                // Cancel any existing restore timer
                _restoreTimer?.Stop();
                _isAnimating = true;

                var quote = _marvinQuotes[_random.Next(_marvinQuotes.Length)];

                // Faster fade out (0.3s instead of 0.5s)
                var fadeOut = new DoubleAnimation
                {
                    From = infoText.Opacity,
                    To = 0.0,
                    Duration = TimeSpan.FromSeconds(0.3)
                };

                fadeOut.Completed += (s, args) =>
                {
                    // Show Marvin quote
                    infoText.Inlines.Clear();
                    infoText.FontStyle = FontStyles.Italic;
                    infoText.Inlines.Add(new Run($"\"{quote}\""));
                    infoText.Inlines.Add(new LineBreak());
                    infoText.Inlines.Add(new LineBreak());
                    infoText.Inlines.Add(new Run("- Marvin the Paranoid Android"));

                    // Faster fade in (0.3s instead of 0.5s)
                    var fadeIn = new DoubleAnimation
                    {
                        From = 0.0,
                        To = 0.8,
                        Duration = TimeSpan.FromSeconds(0.3)
                    };
                    fadeIn.Completed += (sender, e) => { _isAnimating = false; };
                    infoText.BeginAnimation(TextBlock.OpacityProperty, fadeIn);
                };

                infoText.BeginAnimation(TextBlock.OpacityProperty, fadeOut);

                // Restore after 7 seconds (instead of 5)
                _restoreTimer = new System.Windows.Threading.DispatcherTimer
                {
                    Interval = TimeSpan.FromSeconds(7)
                };
                _restoreTimer.Tick += (s, args) =>
                {
                    _restoreTimer.Stop();
                    RestoreOriginalText();
                };
                _restoreTimer.Start();
            }
        }

        /// <summary>
        /// Shows the Vogon DICOM poetry easter egg
        /// </summary>
        private void ShowVogonHaiku()
        {
            if (FindName("InfoText") is TextBlock infoText)
            {
                // Cancel any existing restore timer
                _restoreTimer?.Stop();
                _isAnimating = true;

                // Dramatic fade out (but faster - 1s instead of 1.5s)
                var fadeOut = new System.Windows.Media.Animation.DoubleAnimation
                {
                    From = infoText.Opacity,
                    To = 0.0,
                    Duration = TimeSpan.FromSeconds(1.0),
                    EasingFunction = new System.Windows.Media.Animation.PowerEase { EasingMode = System.Windows.Media.Animation.EasingMode.EaseIn }
                };

                fadeOut.Completed += (s, args) =>
                {
                    // Clear and show poetry
                    infoText.Inlines.Clear();
                    infoText.FontFamily = new System.Windows.Media.FontFamily("Consolas");
                    infoText.Foreground = System.Windows.Media.Brushes.Green;

                    infoText.Inlines.Add(new Run("Oh freddled gruntbuggly, thy DICOM tags are to me\n"));
                    infoText.Inlines.Add(new Run("As plurdled gabbleblotchits on a lurgid JPEG tree!\n"));
                    infoText.Inlines.Add(new Run("\n"));
                    infoText.Inlines.Add(new Run("See how (0010,0010) PatientName doth slumber!"));

                    // Dramatic fade in (faster - 2s instead of 2.5s)
                    var fadeIn = new System.Windows.Media.Animation.DoubleAnimation
                    {
                        From = 0.0,
                        To = 1.0,
                        Duration = TimeSpan.FromSeconds(2.0),
                        EasingFunction = new System.Windows.Media.Animation.QuadraticEase { EasingMode = System.Windows.Media.Animation.EasingMode.EaseOut }
                    };
                    fadeIn.Completed += (sender, e) => { _isAnimating = false; };
                    infoText.BeginAnimation(TextBlock.OpacityProperty, fadeIn);

                    // Subtle scale effect
                    var scaleTransform = new System.Windows.Media.ScaleTransform(1.0, 1.0);
                    infoText.RenderTransform = scaleTransform;
                    infoText.RenderTransformOrigin = new Point(0.5, 0.5);

                    var scaleAnimation = new System.Windows.Media.Animation.DoubleAnimation
                    {
                        From = 0.95,
                        To = 1.0,
                        Duration = TimeSpan.FromSeconds(2.0),
                        EasingFunction = new System.Windows.Media.Animation.ElasticEase
                        {
                            EasingMode = System.Windows.Media.Animation.EasingMode.EaseOut,
                            Oscillations = 1,
                            Springiness = 8
                        }
                    };
                    scaleTransform.BeginAnimation(System.Windows.Media.ScaleTransform.ScaleXProperty, scaleAnimation);
                    scaleTransform.BeginAnimation(System.Windows.Media.ScaleTransform.ScaleYProperty, scaleAnimation);
                };

                infoText.BeginAnimation(TextBlock.OpacityProperty, fadeOut);

                // Reset after 13 seconds (instead of 10)
                _restoreTimer = new System.Windows.Threading.DispatcherTimer
                {
                    Interval = TimeSpan.FromSeconds(13)
                };
                _restoreTimer.Tick += (s, args) =>
                {
                    _restoreTimer.Stop();
                    RestoreOriginalText();
                };
                _restoreTimer.Start();
            }
        }

        /// <summary>
        /// Shows the ultimate secret - simplified without VogonPoetryWindow
        /// </summary>
        private void ShowUltimateSecret()
        {
            // Just show another Marvin quote for the 10th click
            ShowMarvinMessage();
        }

        /// <summary>
        /// Restores the original info text
        /// </summary>
        private void RestoreOriginalText()
        {
            if (FindName("InfoText") is TextBlock infoText)
            {
                _isAnimating = true;

                // Faster fade out (0.5s instead of 1s)
                var fadeOut = new DoubleAnimation
                {
                    From = infoText.Opacity,
                    To = 0.0,
                    Duration = TimeSpan.FromSeconds(0.5)
                };

                fadeOut.Completed += (s, args) =>
                {
                    // Restore original text
                    infoText.Inlines.Clear();
                    infoText.ClearValue(TextBlock.FontFamilyProperty);
                    infoText.ClearValue(TextBlock.ForegroundProperty);
                    infoText.ClearValue(TextBlock.FontStyleProperty);
                    infoText.ClearValue(TextBlock.RenderTransformProperty);

                    infoText.Inlines.Add(new Run("CamBridge seamlessly converts JPEG images from Ricoh G900 II cameras"));
                    infoText.Inlines.Add(new LineBreak());
                    infoText.Inlines.Add(new Run("to DICOM format, preserving patient data from QRBridge QR codes."));
                    infoText.Inlines.Add(new LineBreak());
                    infoText.Inlines.Add(new LineBreak());
                    infoText.Inlines.Add(new Run("Designed for medical imaging workflows where reliability matters."));

                    // Faster fade in (0.5s instead of 1s)
                    var fadeIn = new DoubleAnimation
                    {
                        From = 0.0,
                        To = 0.8,
                        Duration = TimeSpan.FromSeconds(0.5)
                    };
                    fadeIn.Completed += (sender, e) => { _isAnimating = false; };
                    infoText.BeginAnimation(TextBlock.OpacityProperty, fadeIn);
                };

                infoText.BeginAnimation(TextBlock.OpacityProperty, fadeOut);
            }
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\Views\DashboardPage.xaml.cs
================================================================================

// src\CamBridge.Config\Views\DashboardPage.xaml.cs
// Version: 0.6.11
// Description: Dashboard page code-behind with simplified initialization
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Controls;
using CamBridge.Config.ViewModels;

namespace CamBridge.Config.Views
{
    /// <summary>
    /// Interaction logic for DashboardPage.xaml - Multi-Pipeline Version
    /// </summary>
    public partial class DashboardPage : Page
    {
        private DashboardViewModel? _viewModel;

        public DashboardPage()
        {
            InitializeComponent();

            Debug.WriteLine("=== DASHBOARD PAGE CONSTRUCTOR ===");

            DataContextChanged += OnDataContextChanged;
            Unloaded += OnUnloaded;
        }

        private async void OnDataContextChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            _viewModel = DataContext as DashboardViewModel;

            if (_viewModel != null)
            {
                Debug.WriteLine($"Dashboard ViewModel set - Pipelines: {_viewModel.PipelineStatuses?.Count ?? 0}");

                // Initialize the ViewModel ONCE
                await _viewModel.InitializeAsync();
            }
            else if (DataContext != null)
            {
                Debug.WriteLine($"WARNING: DataContext is {DataContext.GetType().Name}, not DashboardViewModel!");
            }
        }

        private void OnUnloaded(object sender, RoutedEventArgs e)
        {
            // Clean up timer when page is unloaded
            _viewModel?.Cleanup();
            Debug.WriteLine("Dashboard Page Unloaded - Cleanup done");
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\Views\DeadLettersPage.xaml.cs
================================================================================

// src\CamBridge.Config\Views\DeadLettersPage.xaml.cs
// Version: 0.7.8
// Description: Simple error folder page - KISS approach!
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using CamBridge.Config.ViewModels;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Windows;
using System.Windows.Controls;

namespace CamBridge.Config.Views
{
    /// <summary>
    /// Simple error folder page - no more dead letters!
    /// </summary>
    public partial class DeadLettersPage : Page
    {
        private DeadLettersViewModel? _viewModel;

        public DeadLettersPage()
        {
            InitializeComponent();
            InitializeViewModel();
        }

        private void InitializeViewModel()
        {
            try
            {
                var app = Application.Current as App;
                if (app?.Host?.Services != null)
                {
                    _viewModel = app.Host.Services.GetRequiredService<DeadLettersViewModel>();
                    DataContext = _viewModel;

                    System.Diagnostics.Debug.WriteLine("DeadLettersViewModel loaded from DI container");
                }
                else
                {
                    // Fallback: Create directly - new ViewModel has parameterless constructor!
                    _viewModel = new DeadLettersViewModel();
                    DataContext = _viewModel;

                    System.Diagnostics.Debug.WriteLine("DeadLettersViewModel created manually");
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error creating DeadLettersViewModel: {ex.Message}");
                ShowError("Failed to initialize Error Folder View", ex.Message);
            }
        }

        private async void Page_Loaded(object sender, RoutedEventArgs e)
        {
            if (_viewModel == null) return;

            try
            {
                // Refresh the error folder status
                if (_viewModel.RefreshCommand?.CanExecute(null) == true)
                {
                    await _viewModel.RefreshCommand.ExecuteAsync(null);
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error refreshing error folder: {ex.Message}");
            }
        }

        private void Page_Unloaded(object sender, RoutedEventArgs e)
        {
            // Clean up - remove event handler
            Loaded -= Page_Loaded;

            // Cleanup ViewModel
            _viewModel?.Cleanup();

            // Clear ViewModel reference
            _viewModel = null;
        }

        private void ShowError(string title, string message)
        {
            MessageBox.Show(
                $"{message}\n\nError files are now managed through Windows Explorer.",
                title,
                MessageBoxButton.OK,
                MessageBoxImage.Information);
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\Views\MappingEditorPage.xaml.cs
================================================================================

// src/CamBridge.Config/Views/MappingEditorPage.xaml.cs
// Version: 0.7.7
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using CamBridge.Config.ViewModels;
using Microsoft.Extensions.DependencyInjection;

namespace CamBridge.Config.Views
{
    /// <summary>
    /// Interaction logic for MappingEditorPage.xaml
    /// </summary>
    public partial class MappingEditorPage : Page
    {
        private MappingEditorViewModel? _viewModel;

        public MappingEditorPage()
        {
            InitializeComponent();
            DataContextChanged += OnDataContextChanged;
            Loaded += OnLoaded;
        }

        private void OnDataContextChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            _viewModel = DataContext as MappingEditorViewModel;
        }

        private async void OnLoaded(object sender, RoutedEventArgs e)
        {
            // Get the ViewModel from DI container if not already set
            if (_viewModel == null)
            {
                var app = Application.Current as App;
                if (app?.Host?.Services != null)
                {
                    _viewModel = app.Host.Services.GetRequiredService<MappingEditorViewModel>();
                    DataContext = _viewModel;
                }
                else
                {
                    // Fallback: Create manually with required services
                    var logger = new Microsoft.Extensions.Logging.Abstractions.NullLogger<MappingEditorViewModel>();
                    var configService = new Services.ConfigurationService();
                    _viewModel = new MappingEditorViewModel(logger, configService);
                    DataContext = _viewModel;
                }
            }

            // Initialize the ViewModel
            if (_viewModel != null)
            {
                await _viewModel.InitializeAsync();
            }
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\Views\PipelineConfigPage.xaml.cs
================================================================================

// src\CamBridge.Config\Views\PipelineConfigPage.xaml.cs
// Version: 0.7.7
// Description: Pipeline Configuration page code-behind

using System;
using System.Runtime.Versioning;
using System.Windows;
using System.Windows.Controls;
using CamBridge.Config.ViewModels;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Win32;

namespace CamBridge.Config.Views
{
    /// <summary>
    /// Pipeline Configuration page - Zero Global Settings!
    /// </summary>
    [SupportedOSPlatform("windows")]
    public partial class PipelineConfigPage : Page
    {
        public PipelineConfigPage()
        {
            InitializeComponent();
        }

        protected override async void OnInitialized(EventArgs e)
        {
            base.OnInitialized(e);

            // Get the ViewModel from DI container
            var app = Application.Current as App;
            if (app?.Host?.Services != null)
            {
                var viewModel = app.Host.Services.GetRequiredService<PipelineConfigViewModel>();
                DataContext = viewModel;

                // Initialize the ViewModel
                await viewModel.InitializeAsync();
            }
        }

        // Browse button handlers
        private void BrowseWatchFolder_Click(object sender, RoutedEventArgs e)
        {
            BrowseFolder("Select Watch Folder", path =>
            {
                if (DataContext is PipelineConfigViewModel vm && vm.SelectedPipeline != null)
                {
                    vm.SelectedPipeline.WatchSettings.Path = path;
                }
            });
        }

        private void BrowseOutputFolder_Click(object sender, RoutedEventArgs e)
        {
            BrowseFolder("Select Output Folder", path =>
            {
                if (DataContext is PipelineConfigViewModel vm && vm.SelectedPipeline != null)
                {
                    vm.SelectedPipeline.ProcessingOptions.ArchiveFolder = path;
                }
            });
        }

        private void BrowseErrorFolder_Click(object sender, RoutedEventArgs e)
        {
            BrowseFolder("Select Error Folder", path =>
            {
                if (DataContext is PipelineConfigViewModel vm && vm.SelectedPipeline != null)
                {
                    vm.SelectedPipeline.ProcessingOptions.ErrorFolder = path;
                }
            });
        }

        private void BrowseDeadLetterFolder_Click(object sender, RoutedEventArgs e)
        {
            BrowseFolder("Select Dead Letter Folder", path =>
            {
                if (DataContext is PipelineConfigViewModel vm && vm.SelectedPipeline != null)
                {
                    vm.SelectedPipeline.ProcessingOptions.DeadLetterFolder = path;
                }
            });
        }

        private void BrowseLogFolder_Click(object sender, RoutedEventArgs e)
        {
            BrowseFolder("Select Log Folder", path =>
            {
                if (DataContext is PipelineConfigViewModel vm)
                {
                    vm.PipelineLogFolder = path;
                }
            });
        }

        private void BrowseFolder(string description, Action<string> setPath)
        {
            var dialog = new System.Windows.Forms.FolderBrowserDialog
            {
                Description = description,
                ShowNewFolderButton = true
            };

            if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                setPath(dialog.SelectedPath);
            }
        }
    }
}




================================================================================
FILE: src\CamBridge.Config\Views\ServiceControlPage.xaml.cs
================================================================================

// src\CamBridge.Config\Views\ServiceControlPage.xaml.cs
// Version: 0.5.26 - Fixed: Using Cleanup() instead of Dispose()

using CamBridge.Config.ViewModels;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Windows;
using System.Windows.Controls;

namespace CamBridge.Config.Views
{
    /// <summary>
    /// Service control page for managing the Windows Service
    /// </summary>
    public partial class ServiceControlPage : Page
    {
        private ServiceControlViewModel? _viewModel;

        public ServiceControlPage()
        {
            InitializeComponent();

            // Get ViewModel from DI container
            try
            {
                var app = Application.Current as App;
                if (app?.Host?.Services != null)
                {
                    _viewModel = app.Host.Services.GetRequiredService<ServiceControlViewModel>();
                    DataContext = _viewModel;

                    System.Diagnostics.Debug.WriteLine("ServiceControlViewModel loaded from DI container");
                }
                else
                {
                    // Fallback if DI not available
                    var serviceManager = new Services.ServiceManager();
                    _viewModel = new ServiceControlViewModel(serviceManager);
                    DataContext = _viewModel;

                    System.Diagnostics.Debug.WriteLine("ServiceControlViewModel created manually (fallback)");
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error creating ServiceControlViewModel: {ex.Message}");
            }
        }

        // Fixed: Using Cleanup() instead of Dispose()
        private void Page_Unloaded(object sender, RoutedEventArgs e)
        {
            // Cleanup the ViewModel
            _viewModel?.Cleanup();
            _viewModel = null;

            System.Diagnostics.Debug.WriteLine("ServiceControlPage cleanup completed");
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\Views\SettingsPage.xaml.cs
================================================================================

// src\CamBridge.Config\Views\SettingsPage.xaml.cs
// Version: 0.5.36
// Description: Fixed with Ookii.Dialogs for modern folder browsing

using CamBridge.Config.Services;
using CamBridge.Config.ViewModels;
using Microsoft.Extensions.DependencyInjection;
using Ookii.Dialogs.Wpf;
using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;

namespace CamBridge.Config.Views
{
    public partial class SettingsPage : Page
    {
        private SettingsViewModel? _viewModel;

        public SettingsPage()
        {
            InitializeComponent();

            // Get ViewModel from DI container
            try
            {
                var app = Application.Current as App;
                if (app?.Host?.Services != null)
                {
                    // Get ViewModel from DI - this ensures all dependencies are properly injected
                    _viewModel = app.Host.Services.GetRequiredService<SettingsViewModel>();
                    DataContext = _viewModel;

                    System.Diagnostics.Debug.WriteLine("SettingsViewModel loaded from DI container");
                }
                else
                {
                    // Fallback if DI not available
                    var configService = new ConfigurationService();
                    _viewModel = new SettingsViewModel(configService);
                    DataContext = _viewModel;

                    System.Diagnostics.Debug.WriteLine("SettingsViewModel created manually (fallback)");
                }

                // Initialize on load
                Loaded += async (s, e) =>
                {
                    try
                    {
                        await _viewModel.InitializeAsync();

                        // Debug info
                        System.Diagnostics.Debug.WriteLine($"Settings initialized - Folders: {_viewModel.WatchFolders.Count}");
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"Error loading settings: {ex.Message}", "Error",
                            MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                };
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error creating SettingsViewModel: {ex.Message}", "Error",
                    MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void BrowseWatchFolder_Click(object sender, RoutedEventArgs e)
        {
            if (_viewModel?.SelectedWatchFolder == null)
            {
                MessageBox.Show("Please select a watch folder first.", "Information",
                    MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }

            var folderPath = ShowFolderDialog("Select Watch Folder", _viewModel.SelectedWatchFolder.Path);
            if (!string.IsNullOrEmpty(folderPath))
            {
                // WICHTIG: Force PropertyChanged durch Clear/Set
                _viewModel.SelectedWatchFolder.Path = "";  // Clear first
                _viewModel.SelectedWatchFolder.Path = folderPath;  // Then set new value

                System.Diagnostics.Debug.WriteLine($"Watch folder path updated to: {folderPath}");
            }
        }

        private void BrowseOutputFolder_Click(object sender, RoutedEventArgs e)
        {
            var folderPath = ShowFolderDialog("Select Output Folder", _viewModel?.DefaultOutputFolder);
            if (!string.IsNullOrEmpty(folderPath) && _viewModel != null)
            {
                _viewModel.DefaultOutputFolder = folderPath;
                System.Diagnostics.Debug.WriteLine($"Output folder path updated to: {folderPath}");
            }
        }

        private void BrowseLogFolder_Click(object sender, RoutedEventArgs e)
        {
            var folderPath = ShowFolderDialog("Select Log Folder", _viewModel?.LogFolder);
            if (!string.IsNullOrEmpty(folderPath) && _viewModel != null)
            {
                _viewModel.LogFolder = folderPath;
                System.Diagnostics.Debug.WriteLine($"Log folder path updated to: {folderPath}");
            }
        }

        private string? ShowFolderDialog(string title, string? initialPath)
        {
            // Use Ookii.Dialogs.Wpf for modern folder browsing
            var dialog = new VistaFolderBrowserDialog
            {
                Description = title,
                UseDescriptionForTitle = true,
                ShowNewFolderButton = true
            };

            if (!string.IsNullOrEmpty(initialPath) && System.IO.Directory.Exists(initialPath))
            {
                dialog.SelectedPath = initialPath;
            }

            // Get the window that owns this page
            var owner = Window.GetWindow(this);

            if (dialog.ShowDialog(owner) == true)
            {
                return dialog.SelectedPath;
            }

            return null;
        }

        private void NumberValidationTextBox(object sender, TextCompositionEventArgs e)
        {
            // Only allow numeric input
            e.Handled = !int.TryParse(e.Text, out _);
        }
    }
}


================================================================================
FILE: src\CamBridge.Config\Views\VogonPoetryWindow.xaml.cs
================================================================================

// src\CamBridge.Config\Views\VogonPoetryWindow.xaml.cs
// Version: 0.5.26
// Fixed: Nullable warnings resolved

using System;
using System.Runtime.Versioning;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Imaging;
using System.Windows.Threading;

namespace CamBridge.Config.Views
{
    [SupportedOSPlatform("windows")]
    public partial class VogonPoetryWindow : Window
    {
        private Storyboard? _boingBallAnimation;
        private Storyboard? _scrollTextAnimation;
        private Storyboard? _rainbowAnimation;

        // Sprite animation members
        private WriteableBitmap? _ballBitmap;
        private DispatcherTimer? _spriteTimer;
        private int _currentFrame = 0;
        private const int TOTAL_FRAMES = 24;
        private bool _movingRight = true;
        private double _lastXPosition = 50;
        private byte[]? _pixelBuffer;
        private readonly int _stride = 100 * 4; // Width * BytesPerPixel

        public VogonPoetryWindow()
        {
            InitializeComponent();

            try
            {
                // Initialize sprite bitmap
                InitializeSpriteBitmap();

                // Start all the retro animations
                _boingBallAnimation = FindResource("BoingBallAnimation") as Storyboard;
                _scrollTextAnimation = FindResource("ScrollTextAnimation") as Storyboard;
                _rainbowAnimation = FindResource("RainbowAnimation") as Storyboard;

                if (_boingBallAnimation != null) _boingBallAnimation.Begin();
                if (_scrollTextAnimation != null) _scrollTextAnimation.Begin();
                if (_rainbowAnimation != null) _rainbowAnimation.Begin();

                // Initialize sprite animation timer
                _spriteTimer = new DispatcherTimer
                {
                    Interval = TimeSpan.FromMilliseconds(50) // 20 FPS
                };
                _spriteTimer.Tick += OnSpriteTimerTick;
                _spriteTimer.Start();

                // Track ball movement direction
                CompositionTarget.Rendering += TrackBallDirection;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error initializing Vogon Poetry Window: {ex.Message}\n\n{ex.StackTrace}",
                    "Initialization Error",
                    MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void InitializeSpriteBitmap()
        {
            try
            {
                // Create a 100x100 WriteableBitmap
                _ballBitmap = new WriteableBitmap(100, 100, 96, 96, PixelFormats.Bgra32, null);
                _pixelBuffer = new byte[100 * 100 * 4]; // Width * Height * BytesPerPixel

                if (BoingBall == null)
                {
                    MessageBox.Show("BoingBall Image element not found!", "Error");
                    return;
                }

                BoingBall.Source = _ballBitmap;

                // Draw initial frame
                DrawBoingBallFrame(0);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error initializing sprite: {ex.Message}", "Error");
            }
        }

        private void DrawBoingBallFrame(int frame)
        {
            if (_ballBitmap == null || _pixelBuffer == null) return;

            try
            {
                // Clear buffer to transparent
                Array.Clear(_pixelBuffer, 0, _pixelBuffer.Length);

                // Calculate rotation angle
                double angle = (frame / (double)TOTAL_FRAMES) * 360.0;
                double rotRad = angle * Math.PI / 180.0;

                int centerX = 50;
                int centerY = 50;
                int radius = 45;

                // Draw the ball
                for (int y = 0; y < 100; y++)
                {
                    for (int x = 0; x < 100; x++)
                    {
                        double dx = x - centerX;
                        double dy = y - centerY;
                        double distance = Math.Sqrt(dx * dx + dy * dy);

                        if (distance <= radius)
                        {
                            // Calculate 3D sphere coordinates
                            double z = Math.Sqrt(radius * radius - distance * distance);
                            double nx = dx / radius;
                            double ny = dy / radius;
                            double nz = z / radius;

                            // Map to texture coordinates with rotation
                            double u = Math.Atan2(ny, nx) + rotRad;
                            double v = Math.Acos(nz);

                            // Create checkerboard pattern
                            int checkerSize = 8;
                            int checkerU = (int)(u * radius / checkerSize) % 2;
                            int checkerV = (int)(v * radius / checkerSize) % 2;

                            // Add shading
                            double lightIntensity = 0.3 + 0.7 * Math.Max(0, nz);

                            int pixelIndex = (y * 100 + x) * 4;

                            if ((checkerU + checkerV) % 2 == 0)
                            {
                                // Red squares
                                _pixelBuffer[pixelIndex + 0] = (byte)(204 * lightIntensity); // B
                                _pixelBuffer[pixelIndex + 1] = 0; // G
                                _pixelBuffer[pixelIndex + 2] = 0; // R
                                _pixelBuffer[pixelIndex + 3] = 255; // A
                            }
                            else
                            {
                                // White squares
                                byte white = (byte)(255 * lightIntensity);
                                _pixelBuffer[pixelIndex + 0] = white; // B
                                _pixelBuffer[pixelIndex + 1] = white; // G
                                _pixelBuffer[pixelIndex + 2] = white; // R
                                _pixelBuffer[pixelIndex + 3] = 255; // A
                            }
                        }
                    }
                }

                // Write pixels to bitmap
                _ballBitmap.WritePixels(
                    new Int32Rect(0, 0, 100, 100),
                    _pixelBuffer,
                    _stride,
                    0);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error drawing frame: {ex.Message}");
            }
        }

        private void TrackBallDirection(object? sender, EventArgs e)
        {
            try
            {
                if (BoingBall == null) return;

                double currentX = Canvas.GetLeft(BoingBall);

                if (double.IsNaN(currentX))
                    return;

                if (currentX > _lastXPosition)
                {
                    _movingRight = true;
                }
                else if (currentX < _lastXPosition)
                {
                    _movingRight = false;
                }

                _lastXPosition = currentX;
            }
            catch
            {
                // Ignore errors
            }
        }

        private void OnSpriteTimerTick(object? sender, EventArgs e)
        {
            if (_movingRight)
            {
                _currentFrame = (_currentFrame + 1) % TOTAL_FRAMES;
            }
            else
            {
                _currentFrame = (_currentFrame - 1 + TOTAL_FRAMES) % TOTAL_FRAMES;
            }

            DrawBoingBallFrame(_currentFrame);
        }

        private void AppreciateButton_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show(
                "GURU MEDITATION #00000042.00000042\n\n" +
                "Your appreciation has been noted in sector 42.\n" +
                "Please insert disk 2 to continue.\n\n" +
                "Software Failure. Press left mouse button to continue.\n" +
                "Guru Meditation #DEADBEEF.CAFEBABE",
                "AMIGA SYSTEM ERROR",
                MessageBoxButton.OK,
                MessageBoxImage.Error);

            DialogResult = true;
        }

        private void CloseButton_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
        }

        protected override void OnClosed(EventArgs e)
        {
            try
            {
                _spriteTimer?.Stop();
                CompositionTarget.Rendering -= TrackBallDirection;

                _boingBallAnimation?.Stop();
                _scrollTextAnimation?.Stop();
                _rainbowAnimation?.Stop();
            }
            catch
            {
                // Ignore cleanup errors
            }

            base.OnClosed(e);
        }
    }
}

