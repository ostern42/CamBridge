################################################################################
# CamBridge Sources - INFRASTRUCTURE
# Generated: 2025-06-23 20:28:25
# Root Path: src\CamBridge.Infrastructure
# Description: Services, implementations, business logic
################################################################################

## PROJECT SUMMARY
Total Files: 15
Total Lines: 3133
Total Size: 123,82 KB

Files by Type:
  .cs: 13 files
  .csproj: 1 files
  .json: 1 files

## DIRECTORY STRUCTURE
src\CamBridge.Infrastructure/
+-- Services/ (8 files)

## FILE CONTENTS

================================================================================
FILE: CamBridge.Infrastructure.csproj
--------------------------------------------------------------------------------
Size: 1,59 KB | Lines: 42 | Modified: 2025-06-23 20:13:41
================================================================================

<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <NoWarn>$(NoWarn);CS1591</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\CamBridge.Core\CamBridge.Core.csproj" />
  </ItemGroup>

	<ItemGroup>
		<PackageReference Include="MetadataExtractor" Version="2.8.1" />
		<PackageReference Include="fo-dicom" Version="5.2.2" />
		<PackageReference Include="Microsoft.Extensions.Configuration.Binder" Version="8.0.0" />
		<PackageReference Include="Microsoft.Extensions.Hosting.Abstractions" Version="9.0.5" />
		<PackageReference Include="Microsoft.Extensions.Logging.Configuration" Version="8.0.0" />
		<PackageReference Include="Microsoft.Extensions.Options.ConfigurationExtensions" Version="8.0.0" />
		<PackageReference Include="System.Drawing.Common" Version="8.0.10" />
		<PackageReference Include="Microsoft.Extensions.DependencyInjection.Abstractions" Version="9.0.5" />
		<PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="9.0.5" />
		<PackageReference Include="System.Diagnostics.EventLog" Version="8.0.0" />
	</ItemGroup>
  
  <ItemGroup>
    <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
      <_Parameter1>CamBridge.Infrastructure.Tests</_Parameter1>
    </AssemblyAttribute>
  </ItemGroup>
  
  <ItemGroup>
  </ItemGroup>
  
  <ItemGroup>
    <Folder Include="Properties\" />
  </ItemGroup>

</Project>


================================================================================
FILE: obj/Release/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
--------------------------------------------------------------------------------
Size: 198 bytes | Lines: 5 | Modified: 2025-06-23 19:50:05
================================================================================

// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]


================================================================================
FILE: obj/Release/net8.0/CamBridge.Infrastructure.AssemblyInfo.cs
--------------------------------------------------------------------------------
Size: 1,53 KB | Lines: 28 | Modified: 2025-06-23 19:50:05
================================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Ã„nderungen an dieser Datei kÃ¶nnen falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("CamBridge.Infrastructure.Tests")]
[assembly: System.Reflection.AssemblyCompanyAttribute("Claude\'s Improbably Reliable Software Solutions")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyCopyrightAttribute("Â© 2025 Claude\'s Improbably Reliable Software Solutions")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("0.8.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("0.8.0+a2bed238060f0dad03d59d67aabd71062e685301")]
[assembly: System.Reflection.AssemblyProductAttribute("CamBridge Medical Image Converter")]
[assembly: System.Reflection.AssemblyTitleAttribute("CamBridge.Infrastructure")]
[assembly: System.Reflection.AssemblyVersionAttribute("0.8.0.0")]
[assembly: System.Reflection.AssemblyMetadataAttribute("RepositoryUrl", "https://github.com/yourusername/CamBridge")]
[assembly: System.Resources.NeutralResourcesLanguageAttribute("en-US")]

// Von der MSBuild WriteCodeFragment-Klasse generiert.



================================================================================
FILE: obj/x64/Release/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
--------------------------------------------------------------------------------
Size: 198 bytes | Lines: 5 | Modified: 2025-06-23 19:50:10
================================================================================

// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]


================================================================================
FILE: obj/x64/Release/net8.0/CamBridge.Infrastructure.AssemblyInfo.cs
--------------------------------------------------------------------------------
Size: 1,53 KB | Lines: 28 | Modified: 2025-06-23 19:50:10
================================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Ã„nderungen an dieser Datei kÃ¶nnen falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("CamBridge.Infrastructure.Tests")]
[assembly: System.Reflection.AssemblyCompanyAttribute("Claude\'s Improbably Reliable Software Solutions")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyCopyrightAttribute("Â© 2025 Claude\'s Improbably Reliable Software Solutions")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("0.8.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("0.8.0+a2bed238060f0dad03d59d67aabd71062e685301")]
[assembly: System.Reflection.AssemblyProductAttribute("CamBridge Medical Image Converter")]
[assembly: System.Reflection.AssemblyTitleAttribute("CamBridge.Infrastructure")]
[assembly: System.Reflection.AssemblyVersionAttribute("0.8.0.0")]
[assembly: System.Reflection.AssemblyMetadataAttribute("RepositoryUrl", "https://github.com/yourusername/CamBridge")]
[assembly: System.Resources.NeutralResourcesLanguageAttribute("en-US")]

// Von der MSBuild WriteCodeFragment-Klasse generiert.



================================================================================
FILE: obj/x64/Release/net8.0/CamBridge.Infrastructure.sourcelink.json
--------------------------------------------------------------------------------
Size: 168 bytes | Lines: 1 | Modified: 2025-06-23 19:50:10
================================================================================

{"documents":{"C:\\Users\\oliver.stern\\source\\repos\\CamBridge\\*":"https://raw.githubusercontent.com/ostern42/CamBridge/a2bed238060f0dad03d59d67aabd71062e685301/*"}}

================================================================================
FILE: ServiceCollectionExtensions.cs
--------------------------------------------------------------------------------
Size: 2,72 KB | Lines: 66 | Modified: 2025-06-23 20:13:41
================================================================================

// src/CamBridge.Infrastructure/ServiceCollectionExtensions.cs
// Version: 0.7.31
// Description: DI container configuration - Fixed ExifToolReader registration
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using System;
using CamBridge.Core;
using CamBridge.Core.Interfaces;
using CamBridge.Infrastructure.Services;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
// using Microsoft.Extensions.Diagnostics.HealthChecks; // Might need this package

namespace CamBridge.Infrastructure
{
    /// <summary>
    /// Extension methods for service registration
    /// PIPELINE UPDATE: FileProcessor no longer registered as singleton!
    /// </summary>
    public static class ServiceCollectionExtensions
    {
        /// <summary>
        /// Adds infrastructure services to the DI container
        /// </summary>
        public static IServiceCollection AddInfrastructure(this IServiceCollection services, IConfiguration configuration)
        {
            // Add configuration
            services.Configure<CamBridgeSettingsV2>(configuration.GetSection("CamBridge"));
            services.Configure<ProcessingOptions>(configuration.GetSection("CamBridge:DefaultProcessingOptions"));

            // Add notification settings (global)
            services.Configure<NotificationSettings>(configuration.GetSection("CamBridge:Notifications"));

            // Register shared services (used by all pipelines)
            // FIX: ExifToolReader needs the path from configuration!
            services.AddSingleton<ExifToolReader>(sp =>
            {
                var settings = sp.GetRequiredService<IOptionsMonitor<CamBridgeSettingsV2>>().CurrentValue;
                return new ExifToolReader(
                    sp.GetRequiredService<ILogger<ExifToolReader>>(),
                    settings.ExifToolPath ?? "Tools\\exiftool.exe"
                );
            });

            services.AddSingleton<DicomConverter>();

            // FileProcessor is NO LONGER registered here!
            // It's created per-pipeline in PipelineManager!
            // services.AddSingleton<FileProcessor>(); // REMOVED!

            // Register pipeline manager
            services.AddSingleton<PipelineManager>();

            // Register notification service (v0.7.18: Direct class, no interface!)
            services.AddSingleton<NotificationService>();

            // Register remaining interfaces (only 2 left!)
            services.AddSingleton<IMappingConfiguration, MappingConfigurationLoader>();
            services.AddSingleton<IDicomTagMapper, DicomTagMapper>();

            return services;
        }
    }
}


================================================================================
FILE: Services/DicomConverter.cs
--------------------------------------------------------------------------------
Size: 16,32 KB | Lines: 393 | Modified: 2025-06-23 11:53:05
================================================================================

// src/CamBridge.Infrastructure/Services/DicomConverter.cs
// Version: 0.7.31
// Description: DICOM converter with FIXED property names and JPEG encapsulation
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Runtime.Versioning;
using System.Threading.Tasks;
using CamBridge.Core.Entities;
using CamBridge.Core.Interfaces;
using FellowOakDicom;
using FellowOakDicom.Imaging;
using FellowOakDicom.IO.Buffer;
using Microsoft.Extensions.Logging;
using DicomTag = FellowOakDicom.DicomTag;

namespace CamBridge.Infrastructure.Services
{
    /// <summary>
    /// DICOM converter using fo-dicom library
    /// Converts JPEG images to DICOM format while preserving JPEG compression
    /// v0.7.31: FIXED property names and JPEG encapsulation
    /// </summary>
    [SupportedOSPlatform("windows")]
    public class DicomConverter
    {
        private readonly ILogger<DicomConverter> _logger;
        private readonly IDicomTagMapper? _tagMapper;
        private readonly IMappingConfiguration? _mappingConfiguration;

        private const string PHOTOGRAPHIC_SOP_CLASS_UID = "1.2.840.10008.5.1.4.1.1.77.1.4";
        private const string JPEG_BASELINE_TRANSFER_SYNTAX_UID = "1.2.840.10008.1.2.4.50";

        // Implementation Class UID prefix for CamBridge
        private const string IMPLEMENTATION_CLASS_UID = "1.2.276.0.7230010.3.0.3.6.4";
        private const string IMPLEMENTATION_VERSION_NAME = "CAMBRIDGE_001";

        // Constructor for backward compatibility
        public DicomConverter(ILogger<DicomConverter> logger)
            : this(logger, null, null)
        {
        }

        // New constructor with dependency injection
        public DicomConverter(
            ILogger<DicomConverter> logger,
            IDicomTagMapper? tagMapper,
            IMappingConfiguration? mappingConfiguration)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            _tagMapper = tagMapper;
            _mappingConfiguration = mappingConfiguration;
        }

        /// <summary>
        /// Converts a JPEG file to DICOM using the provided metadata
        /// </summary>
        public async Task<ConversionResult> ConvertToDicomAsync(
            string sourceJpegPath,
            string destinationDicomPath,
            ImageMetadata metadata)
        {
            try
            {
                _logger.LogInformation("Converting JPEG to DICOM: {Source} â†’ {Destination}",
                    sourceJpegPath, destinationDicomPath);

                // Validate inputs
                if (!File.Exists(sourceJpegPath))
                {
                    return ConversionResult.CreateFailure($"Source file not found: {sourceJpegPath}");
                }

                // Load JPEG data
                var jpegData = await File.ReadAllBytesAsync(sourceJpegPath);

                // Create DICOM dataset with JPEG transfer syntax for proper encapsulation
                var dataset = CreateDicomDataset(metadata, jpegData);

                // Map custom tags if mapper is available
                if (_tagMapper != null && _mappingConfiguration != null)
                {
                    var mappingRules = _mappingConfiguration.GetMappingRules();

                    if (mappingRules.Any())
                    {
                        _tagMapper.MapToDataset(dataset, metadata.ExifData, mappingRules);
                    }
                }

                // Create DICOM file with correct structure
                var dicomFile = new DicomFile(dataset);

                // CRITICAL FIX: Set Transfer Syntax on FileMetaInfo!
                dicomFile.FileMetaInfo.TransferSyntax = DicomTransferSyntax.JPEGProcess1;

                // Also ensure File Meta Information has required tags
                dicomFile.FileMetaInfo.MediaStorageSOPClassUID = dataset.GetSingleValue<DicomUID>(DicomTag.SOPClassUID);
                dicomFile.FileMetaInfo.MediaStorageSOPInstanceUID = dataset.GetSingleValue<DicomUID>(DicomTag.SOPInstanceUID);
                dicomFile.FileMetaInfo.ImplementationClassUID = DicomUID.Parse(IMPLEMENTATION_CLASS_UID);
                dicomFile.FileMetaInfo.ImplementationVersionName = IMPLEMENTATION_VERSION_NAME;

                // Ensure output directory exists
                var outputDir = Path.GetDirectoryName(destinationDicomPath);
                if (!string.IsNullOrEmpty(outputDir))
                {
                    Directory.CreateDirectory(outputDir);
                }

                // Save DICOM file - fo-dicom should handle undefined length automatically
                // when dataset has JPEG transfer syntax
                await dicomFile.SaveAsync(destinationDicomPath);

                var fileInfo = new FileInfo(destinationDicomPath);
                var sopInstanceUid = dataset.GetSingleValue<string>(DicomTag.SOPInstanceUID);

                _logger.LogInformation("Successfully created DICOM file: {Path} ({Size} bytes, Transfer Syntax: {TransferSyntax})",
                    destinationDicomPath, fileInfo.Length, dicomFile.FileMetaInfo.TransferSyntax.UID.UID);

                return ConversionResult.CreateSuccess(destinationDicomPath, sopInstanceUid, fileInfo.Length);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to convert JPEG to DICOM");
                return ConversionResult.CreateFailure($"Conversion failed: {ex.Message}");
            }
        }

        /// <summary>
        /// Validates if the generated DICOM file is compliant
        /// </summary>
        public async Task<ValidationResult> ValidateDicomFileAsync(string dicomFilePath)
        {
            try
            {
                if (!File.Exists(dicomFilePath))
                {
                    return ValidationResult.Invalid($"DICOM file not found: {dicomFilePath}");
                }

                // Load DICOM file for validation
                var dicomFile = await DicomFile.OpenAsync(dicomFilePath);
                var dataset = dicomFile.Dataset;

                var errors = new List<string>();
                var warnings = new List<string>();

                // Validate required tags
                ValidateRequiredTags(dataset, errors);

                // Validate image module
                ValidateImageModule(dataset, warnings);

                // Validate patient module
                ValidatePatientModule(dataset, warnings);

                // Validate study module
                ValidateStudyModule(dataset, warnings);

                // Check for critical errors
                if (errors.Any())
                {
                    return ValidationResult.Invalid(string.Join("; ", errors));
                }

                // Return valid with warnings if any
                if (warnings.Any())
                {
                    return ValidationResult.ValidWithWarnings(string.Join("; ", warnings));
                }

                return ValidationResult.Valid();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to validate DICOM file: {Path}", dicomFilePath);
                return ValidationResult.Invalid($"Validation error: {ex.Message}");
            }
        }

        private DicomDataset CreateDicomDataset(ImageMetadata metadata, byte[] jpegData)
        {
            // CRITICAL FIX: Create dataset WITH transfer syntax for proper JPEG encapsulation!
            // This ensures fo-dicom uses undefined length for pixel data as required by DICOM standard
            var dataset = new DicomDataset(DicomTransferSyntax.JPEGProcess1);

            // Generate UIDs
            var studyInstanceUid = GenerateUid();
            var seriesInstanceUid = GenerateUid();
            var sopInstanceUid = GenerateUid();

            // SOP Common Module
            dataset.Add(DicomTag.SOPClassUID, PHOTOGRAPHIC_SOP_CLASS_UID);
            dataset.Add(DicomTag.SOPInstanceUID, sopInstanceUid);

            // Study Module - FIXED property names
            dataset.Add(DicomTag.StudyInstanceUID, studyInstanceUid);
            dataset.Add(DicomTag.StudyDate, metadata.Study.StudyDate.ToString("yyyyMMdd"));
            dataset.Add(DicomTag.StudyTime, metadata.Study.StudyDate.ToString("HHmmss.fff"));
            dataset.Add(DicomTag.StudyID, metadata.Study.StudyId.Value ?? "");
            dataset.Add(DicomTag.AccessionNumber, metadata.Study.AccessionNumber ?? "");
            dataset.Add(DicomTag.StudyDescription, metadata.Study.Description ?? "");

            // Series Module
            dataset.Add(DicomTag.SeriesInstanceUID, seriesInstanceUid);
            dataset.Add(DicomTag.SeriesNumber, "1"); // IS expects string!
            dataset.Add(DicomTag.Modality, metadata.Study.Modality ?? "OT"); // Other

            // Patient Module - FIXED property names
            dataset.Add(DicomTag.PatientName, metadata.Patient.Name ?? "");
            dataset.Add(DicomTag.PatientID, metadata.Patient.Id.Value ?? "");
            dataset.Add(DicomTag.PatientBirthDate, metadata.Patient.BirthDate?.ToString("yyyyMMdd") ?? "");
            dataset.Add(DicomTag.PatientSex, MapGenderToString(metadata.Patient.Gender) ?? "");

            // General Image Module
            dataset.Add(DicomTag.InstanceNumber, "1"); // IS expects string!
            dataset.Add(DicomTag.PatientOrientation, "");

            // Image Pixel Module - FIXED: No SamplesPerPixel property
            dataset.Add(DicomTag.SamplesPerPixel, (ushort)3); // Assume RGB JPEG
            dataset.Add(DicomTag.PhotometricInterpretation, "YBR_FULL_422"); // JPEG requires YBR!
            dataset.Add(DicomTag.Rows, (ushort)(metadata.TechnicalData.ImageHeight ?? 0));
            dataset.Add(DicomTag.Columns, (ushort)(metadata.TechnicalData.ImageWidth ?? 0));
            dataset.Add(DicomTag.BitsAllocated, (ushort)8);
            dataset.Add(DicomTag.BitsStored, (ushort)8);
            dataset.Add(DicomTag.HighBit, (ushort)7);
            dataset.Add(DicomTag.PixelRepresentation, (ushort)0);
            dataset.Add(DicomTag.PlanarConfiguration, (ushort)0);

            // Add JPEG data as encapsulated pixel data
            var pixelData = DicomPixelData.Create(dataset, true);
            var buffer = new MemoryByteBuffer(jpegData);
            pixelData.AddFrame(buffer);

            // General Equipment Module - FIXED property names
            dataset.Add(DicomTag.Manufacturer, metadata.TechnicalData.Manufacturer ?? "Unknown");
            dataset.Add(DicomTag.ManufacturerModelName, metadata.TechnicalData.Model ?? "Unknown");
            dataset.Add(DicomTag.SoftwareVersions, metadata.TechnicalData.Software ?? "CamBridge");

            // Add character set for proper encoding (UTF-8)
            dataset.Add(DicomTag.SpecificCharacterSet, "ISO_IR 192");

            return dataset;
        }

        /// <summary>
        /// Generates a DICOM compliant UID with only numeric characters
        /// </summary>
        private string GenerateUid()
        {
            // Use shorter components to ensure we stay under 64 characters
            // Only numeric characters allowed in DICOM UIDs!
            var shortTicks = (DateTime.UtcNow.Ticks % 10000000000).ToString();
            var processId = (Environment.ProcessId % 10000).ToString();
            var random = new Random().Next(1000, 9999);

            var uid = $"{IMPLEMENTATION_CLASS_UID}.{shortTicks}.{processId}.{random}";

            // Ensure UID doesn't exceed 64 characters
            if (uid.Length > 64)
            {
                _logger.LogWarning("Generated UID too long ({Length} chars), truncating: {UID}",
                    uid.Length, uid);
                uid = uid.Substring(0, 64);
            }

            return uid;
        }

        private void ValidateRequiredTags(DicomDataset dataset, List<string> errors)
        {
            // Check for essential tags
            if (!dataset.Contains(DicomTag.SOPClassUID))
                errors.Add("Missing SOP Class UID");

            if (!dataset.Contains(DicomTag.SOPInstanceUID))
                errors.Add("Missing SOP Instance UID");

            if (!dataset.Contains(DicomTag.StudyInstanceUID))
                errors.Add("Missing Study Instance UID");

            if (!dataset.Contains(DicomTag.SeriesInstanceUID))
                errors.Add("Missing Series Instance UID");

            if (!dataset.Contains(DicomTag.Rows) || !dataset.Contains(DicomTag.Columns))
                errors.Add("Missing image dimensions (Rows/Columns)");
        }

        private void ValidateImageModule(DicomDataset dataset, List<string> warnings)
        {
            // Validate pixel data exists
            try
            {
                var pixelData = DicomPixelData.Create(dataset);
                if (pixelData.NumberOfFrames == 0)
                {
                    warnings.Add("No pixel data frames found");
                }
            }
            catch
            {
                warnings.Add("Unable to read pixel data");
            }

            // Check photometric interpretation
            var photometric = dataset.GetSingleValueOrDefault<string>(DicomTag.PhotometricInterpretation, string.Empty);
            if (string.IsNullOrEmpty(photometric))
            {
                warnings.Add("Missing Photometric Interpretation");
            }
        }

        private void ValidatePatientModule(DicomDataset dataset, List<string> warnings)
        {
            if (!dataset.Contains(DicomTag.PatientName) || string.IsNullOrWhiteSpace(dataset.GetSingleValueOrDefault<string>(DicomTag.PatientName, string.Empty)))
                warnings.Add("Missing or empty Patient Name");

            if (!dataset.Contains(DicomTag.PatientID) || string.IsNullOrWhiteSpace(dataset.GetSingleValueOrDefault<string>(DicomTag.PatientID, string.Empty)))
                warnings.Add("Missing or empty Patient ID");
        }

        private void ValidateStudyModule(DicomDataset dataset, List<string> warnings)
        {
            if (!dataset.Contains(DicomTag.StudyDate))
                warnings.Add("Missing Study Date");

            if (!dataset.Contains(DicomTag.StudyTime))
                warnings.Add("Missing Study Time");
        }

        private string MapGenderToString(Gender gender)
        {
            return gender switch
            {
                Gender.Male => "M",
                Gender.Female => "F",
                Gender.Other => "O",
                _ => "O"
            };
        }
    }

    /// <summary>
    /// Result of DICOM conversion operation
    /// </summary>
    public class ConversionResult
    {
        public bool Success { get; init; }
        public string? ErrorMessage { get; init; }
        public string? DicomFilePath { get; init; }
        public string? SopInstanceUid { get; init; }
        public long FileSizeBytes { get; init; }

        public static ConversionResult CreateSuccess(string dicomFilePath, string sopInstanceUid, long fileSizeBytes)
        {
            return new ConversionResult
            {
                Success = true,
                DicomFilePath = dicomFilePath,
                SopInstanceUid = sopInstanceUid,
                FileSizeBytes = fileSizeBytes
            };
        }

        public static ConversionResult CreateFailure(string errorMessage)
        {
            return new ConversionResult
            {
                Success = false,
                ErrorMessage = errorMessage
            };
        }
    }

    /// <summary>
    /// Result of DICOM validation
    /// </summary>
    public class ValidationResult
    {
        public bool IsValid { get; init; }
        public string? Message { get; init; }

        public static ValidationResult Valid() => new() { IsValid = true };
        public static ValidationResult ValidWithWarnings(string warnings) => new() { IsValid = true, Message = warnings };
        public static ValidationResult Invalid(string errors) => new() { IsValid = false, Message = errors };
    }
}


================================================================================
FILE: Services/DicomTagMapper.cs
--------------------------------------------------------------------------------
Size: 8,45 KB | Lines: 246 | Modified: 2025-06-23 11:53:05
================================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Extensions.Logging;
using CamBridge.Core;
using CamBridge.Core.Interfaces;
using FellowOakDicom;

namespace CamBridge.Infrastructure.Services
{
    /// <summary>
    /// Service responsible for mapping values to DICOM tags according to mapping rules
    /// </summary>
    public class DicomTagMapper : IDicomTagMapper
    {
        private readonly ILogger<DicomTagMapper> _logger;

        public DicomTagMapper(ILogger<DicomTagMapper> logger)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        /// <summary>
        /// Applies a mapping rule to transform a value
        /// </summary>
        public string? ApplyTransform(string? value, string? transform)
        {
            if (string.IsNullOrEmpty(value) || string.IsNullOrEmpty(transform) || transform == "None")
            {
                return value;
            }

            // Parse transform string to enum
            if (!Enum.TryParse<ValueTransform>(transform, out var transformEnum))
            {
                _logger.LogWarning("Unknown transform: {Transform}", transform);
                return value;
            }

            try
            {
                return transformEnum switch
                {
                    ValueTransform.DateToDicom => ConvertDateToDicom(value),
                    ValueTransform.TimeToDicom => ConvertTimeToDicom(value),
                    ValueTransform.DateTimeToDicom => ConvertDateTimeToDicom(value),
                    ValueTransform.MapGender => MapGenderCode(value),
                    ValueTransform.RemovePrefix => RemovePrefix(value),
                    ValueTransform.ExtractDate => ExtractDate(value),
                    ValueTransform.ExtractTime => ExtractTime(value),
                    ValueTransform.ToUpperCase => value.ToUpperInvariant(),
                    ValueTransform.ToLowerCase => value.ToLowerInvariant(),
                    ValueTransform.Trim => value.Trim(),
                    _ => value
                };
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Failed to apply transform {Transform} to value '{Value}'", transform, value);
                return value;
            }
        }

        private string ConvertDateToDicom(string date)
        {
            // Convert various date formats to DICOM format (YYYYMMDD)
            if (DateTime.TryParse(date, out var dt))
            {
                return dt.ToString("yyyyMMdd");
            }

            // Already in DICOM format?
            if (date.Length == 8 && int.TryParse(date, out _))
            {
                return date;
            }

            _logger.LogWarning("Unable to convert date '{Date}' to DICOM format", date);
            return date;
        }

        private string ConvertTimeToDicom(string time)
        {
            // Convert various time formats to DICOM format (HHMMSS)
            if (DateTime.TryParse(time, out var dt))
            {
                return dt.ToString("HHmmss");
            }

            if (TimeSpan.TryParse(time, out var ts))
            {
                return $"{ts.Hours:D2}{ts.Minutes:D2}{ts.Seconds:D2}";
            }

            _logger.LogWarning("Unable to convert time '{Time}' to DICOM format", time);
            return time;
        }

        private string ConvertDateTimeToDicom(string dateTime)
        {
            if (DateTime.TryParse(dateTime, out var dt))
            {
                return dt.ToString("yyyyMMddHHmmss");
            }

            _logger.LogWarning("Unable to convert datetime '{DateTime}' to DICOM format", dateTime);
            return dateTime;
        }

        /// <summary>
        /// Maps source data to a DICOM dataset using mapping rules
        /// </summary>
        public void MapToDataset(DicomDataset dataset, Dictionary<string, string> sourceData, IEnumerable<MappingRule> mappingRules)
        {
            if (dataset == null) throw new ArgumentNullException(nameof(dataset));
            if (sourceData == null) throw new ArgumentNullException(nameof(sourceData));
            if (mappingRules == null) throw new ArgumentNullException(nameof(mappingRules));

            foreach (var rule in mappingRules)
            {
                try
                {
                    // Get source value
                    if (!sourceData.TryGetValue(rule.SourceField, out var sourceValue))
                    {
                        if (rule.Required)
                        {
                            _logger.LogWarning("Required source field '{Field}' not found in data", rule.SourceField);
                        }

                        // Use default value if available
                        sourceValue = rule.DefaultValue;

                        if (string.IsNullOrEmpty(sourceValue))
                        {
                            continue;
                        }
                    }

                    // Apply transform if specified
                    var transformedValue = ApplyTransform(sourceValue, rule.Transform);

                    if (string.IsNullOrEmpty(transformedValue) && rule.Required)
                    {
                        _logger.LogWarning("Required field '{Field}' resulted in empty value after transform", rule.SourceField);
                    }

                    // Parse DICOM tag
                    if (!TryParseDicomTag(rule.DicomTag, out var group, out var element))
                    {
                        _logger.LogError("Invalid DICOM tag format: {Tag}", rule.DicomTag);
                        continue;
                    }

                    // Add to dataset
                    var tag = new DicomTag(group, element);

                    if (!string.IsNullOrEmpty(transformedValue))
                    {
                        dataset.AddOrUpdate(tag, transformedValue);
                        _logger.LogDebug("Mapped {Source} -> {Tag}: {Value}",
                            rule.SourceField, rule.DicomTag, transformedValue);
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Error mapping rule {Source} -> {Tag}",
                        rule.SourceField, rule.DicomTag);
                }
            }
        }

        /// <summary>
        /// Parses a DICOM tag string like "(0010,0010)" into group and element
        /// </summary>
        private bool TryParseDicomTag(string tagString, out ushort group, out ushort element)
        {
            group = 0;
            element = 0;

            if (string.IsNullOrEmpty(tagString))
                return false;

            // Remove parentheses and spaces
            var cleaned = tagString.Trim('(', ')', ' ');
            var parts = cleaned.Split(',');

            if (parts.Length != 2)
                return false;

            try
            {
                group = Convert.ToUInt16(parts[0].Trim(), 16);
                element = Convert.ToUInt16(parts[1].Trim(), 16);
                return true;
            }
            catch
            {
                return false;
            }
        }

        private string MapGenderCode(string gender)
        {
            return gender?.ToUpperInvariant() switch
            {
                "M" or "MALE" => "M",
                "F" or "FEMALE" => "F",
                "O" or "OTHER" => "O",
                _ => ""
            };
        }

        private string RemovePrefix(string value)
        {
            // Remove common prefixes like "GCM_TAG"
            if (value.StartsWith("GCM_TAG", StringComparison.OrdinalIgnoreCase))
            {
                return value.Substring(7).Trim();
            }

            return value;
        }

        private string ExtractDate(string dateTime)
        {
            if (DateTime.TryParse(dateTime, out var dt))
            {
                return dt.ToString("yyyyMMdd");
            }

            return dateTime;
        }

        private string ExtractTime(string dateTime)
        {
            if (DateTime.TryParse(dateTime, out var dt))
            {
                return dt.ToString("HHmmss");
            }

            return dateTime;
        }
    }
}


================================================================================
FILE: Services/ExifToolReader.cs
--------------------------------------------------------------------------------
Size: 16,85 KB | Lines: 418 | Modified: 2025-06-23 20:13:41
================================================================================

// src/CamBridge.Infrastructure/Services/ExifToolReader.cs
// Version: 0.7.31
// Description: EXIF data extraction service - clean UTF-8 implementation
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using CamBridge.Core;
using CamBridge.Core.Entities;
using CamBridge.Core.ValueObjects;
using Microsoft.Extensions.Logging;

namespace CamBridge.Infrastructure.Services
{
    /// <summary>
    /// Service for reading EXIF data from image files using ExifTool
    /// Clean UTF-8 implementation without workarounds
    /// </summary>
    public class ExifToolReader
    {
        private readonly ILogger<ExifToolReader> _logger;
        private readonly string _exifToolPath;

        public ExifToolReader(ILogger<ExifToolReader> logger, string exifToolPath)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));

            if (string.IsNullOrWhiteSpace(exifToolPath))
            {
                throw new ArgumentException("ExifTool path cannot be empty", nameof(exifToolPath));
            }

            // Resolve to absolute path if relative
            _exifToolPath = Path.IsPathRooted(exifToolPath)
                ? exifToolPath
                : Path.Combine(AppDomain.CurrentDomain.BaseDirectory, exifToolPath);

            // Try to find ExifTool in various locations
            if (!File.Exists(_exifToolPath))
            {
                var searchPaths = new[]
                {
                    _exifToolPath,
                    Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Tools", "exiftool.exe"),
                    Path.Combine(Environment.CurrentDirectory, "Tools", "exiftool.exe"),
                    Path.Combine(Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location)!, "Tools", "exiftool.exe")
                };

                _exifToolPath = searchPaths.FirstOrDefault(File.Exists) ?? _exifToolPath;
            }

            if (!File.Exists(_exifToolPath))
            {
                throw new FileNotFoundException($"ExifTool not found at: {_exifToolPath}");
            }

            _logger.LogInformation("ExifToolReader initialized with path: {Path}", _exifToolPath);
        }

        /// <summary>
        /// Extract metadata from an image file
        /// </summary>
        public async Task<ImageMetadata> ExtractMetadataAsync(string imagePath)
        {
            _logger.LogDebug("Extracting metadata from: {ImagePath}", imagePath);

            if (!File.Exists(imagePath))
            {
                throw new FileNotFoundException($"Image file not found: {imagePath}");
            }

            var stopwatch = Stopwatch.StartNew();

            try
            {
                var exifData = await ReadExifDataAsync(imagePath);
                var metadata = ParseExifData(exifData, imagePath);

                stopwatch.Stop();
                _logger.LogDebug("EXIF extraction completed in {ElapsedMs}ms", stopwatch.ElapsedMilliseconds);

                return metadata;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to extract EXIF data from {ImagePath}", imagePath);
                throw new InvalidOperationException($"Failed to extract EXIF data: {ex.Message}", ex);
            }
        }

        private async Task<Dictionary<string, string>> ReadExifDataAsync(string imagePath)
        {
            var arguments = $"-j -a -G1 -s \"{imagePath}\"";

            using var process = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = _exifToolPath,
                    Arguments = arguments,
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    CreateNoWindow = true,
                    // Use UTF-8 encoding for clean data
                    StandardOutputEncoding = Encoding.UTF8
                }
            };

            _logger.LogDebug("Executing: {FileName} {Arguments}", _exifToolPath, arguments);

            process.Start();

            var outputTask = process.StandardOutput.ReadToEndAsync();
            var errorTask = process.StandardError.ReadToEndAsync();

            await Task.WhenAll(outputTask, errorTask);
            await process.WaitForExitAsync();

            if (process.ExitCode != 0)
            {
                var error = await errorTask;
                throw new InvalidOperationException($"ExifTool returned exit code {process.ExitCode}: {error}");
            }

            var output = await outputTask;
            return ParseExifToolOutput(output);
        }

        private Dictionary<string, string> ParseExifToolOutput(string output)
        {
            var result = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);

            try
            {
                using var doc = JsonDocument.Parse(output);
                var root = doc.RootElement;

                if (root.ValueKind == JsonValueKind.Array && root.GetArrayLength() > 0)
                {
                    var firstElement = root[0];
                    var duplicateKeys = new HashSet<string>();

                    foreach (var property in firstElement.EnumerateObject())
                    {
                        var key = property.Name;
                        // Handle different JSON value types
                        var value = property.Value.ValueKind switch
                        {
                            JsonValueKind.String => property.Value.GetString() ?? string.Empty,
                            JsonValueKind.Number => property.Value.GetRawText(),
                            JsonValueKind.True => "true",
                            JsonValueKind.False => "false",
                            JsonValueKind.Null => string.Empty,
                            _ => property.Value.GetRawText()
                        };

                        // Handle duplicate keys
                        if (result.ContainsKey(key))
                        {
                            duplicateKeys.Add(key);
                            var newKey = $"{key}_{duplicateKeys.Count(k => k == key)}";
                            _logger.LogDebug("Duplicate key found: {Key}, renamed to: {NewKey}", key, newKey);
                            result[newKey] = value;
                        }
                        else
                        {
                            result[key] = value;
                        }
                    }
                }
            }
            catch (JsonException ex)
            {
                _logger.LogError(ex, "Failed to parse ExifTool JSON output");
                throw new InvalidOperationException("Failed to parse ExifTool output", ex);
            }

            return result;
        }

        private ImageMetadata ParseExifData(Dictionary<string, string> exifData, string imagePath)
        {
            // Log barcode data if present
            if ((exifData.TryGetValue("RMETA:Barcode", out var barcodeData) ||
                 exifData.TryGetValue("Barcode", out barcodeData)) &&
                !string.IsNullOrEmpty(barcodeData))
            {
                _logger.LogInformation("Found Ricoh barcode data: '{BarcodeData}'", barcodeData);
            }

            // Check for UserComment (alternative location for camera data)
            if (exifData.TryGetValue("ExifIFD:UserComment", out var userComment) ||
                exifData.TryGetValue("UserComment", out userComment))
            {
                _logger.LogDebug("UserComment field: '{UserComment}'", userComment);
            }

            // Extract patient and study info from barcode data
            var (patientInfo, studyInfo) = ParsePatientAndStudyInfo(exifData);

            // Extract technical data
            var technicalData = new ImageTechnicalData
            {
                ImageWidth = this.GetIntValue(exifData, "File:ImageWidth", "ExifIFD:ExifImageWidth", "ImageWidth", "ExifImageWidth") ?? 0,
                ImageHeight = this.GetIntValue(exifData, "File:ImageHeight", "ExifIFD:ExifImageHeight", "ImageHeight", "ExifImageHeight") ?? 0,
                BitsPerSample = this.GetIntValue(exifData, "File:BitsPerSample", "BitsPerSample") ?? 8,
                Manufacturer = exifData.GetValueOrDefault("IFD0:Make") ?? exifData.GetValueOrDefault("Make") ?? "Unknown",
                Model = exifData.GetValueOrDefault("IFD0:Model") ?? exifData.GetValueOrDefault("Model") ?? "Unknown",
                Software = exifData.GetValueOrDefault("IFD0:Software") ?? exifData.GetValueOrDefault("Software"),
                ColorSpace = exifData.GetValueOrDefault("ExifIFD:ColorSpace") ?? exifData.GetValueOrDefault("ColorSpace"),
                Compression = exifData.GetValueOrDefault("File:Compression") ?? exifData.GetValueOrDefault("Compression"),
                Orientation = this.GetIntValue(exifData, "IFD0:Orientation", "Orientation")
            };

            // Get capture date
            var captureDateTime = ParseDateTime(
                exifData.GetValueOrDefault("ExifIFD:DateTimeOriginal") ??
                exifData.GetValueOrDefault("DateTimeOriginal") ??
                exifData.GetValueOrDefault("ExifIFD:CreateDate") ??
                exifData.GetValueOrDefault("CreateDate") ??
                exifData.GetValueOrDefault("IFD0:ModifyDate") ??
                exifData.GetValueOrDefault("ModifyDate")) ?? DateTime.Now;

            // Create metadata using the actual constructor
            return new ImageMetadata(
                sourceFilePath: imagePath,
                captureDateTime: captureDateTime,
                patient: patientInfo,
                study: studyInfo,
                technicalData: technicalData,
                userComment: userComment,
                barcodeData: barcodeData,
                instanceNumber: 1,
                instanceUid: null, // Will be auto-generated
                exifData: exifData
            );
        }

        private (PatientInfo, StudyInfo) ParsePatientAndStudyInfo(Dictionary<string, string> exifData)
        {
            // Check for barcode data first (Ricoh G900 II stores QR code payload here)
            // Try both with and without prefix
            if ((exifData.TryGetValue("RMETA:Barcode", out var barcodeData) ||
                 exifData.TryGetValue("Barcode", out barcodeData)) &&
                !string.IsNullOrEmpty(barcodeData))
            {
                _logger.LogDebug("Found barcode data in Barcode field: '{BarcodeData}'", barcodeData);
                return ParseBarcodeData(barcodeData);
            }

            // Check UserComment as fallback
            if (exifData.TryGetValue("UserComment", out var userComment) &&
                !string.IsNullOrEmpty(userComment) &&
                userComment.Contains("|"))
            {
                _logger.LogDebug("Found barcode data in UserComment field: '{UserComment}'", userComment);
                return ParseBarcodeData(userComment);
            }

            // No barcode data found
            return CreateDefaultPatientAndStudy();
        }

        private (PatientInfo, StudyInfo) ParseBarcodeData(string barcodeData)
        {
            try
            {
                _logger.LogDebug("Parsing barcode data: '{BarcodeData}'", barcodeData);

                // Expected format: "ExamId|PatientName|BirthDate|Gender|StudyDescription"
                var parts = barcodeData.Split('|');

                for (int i = 0; i < parts.Length; i++)
                {
                    _logger.LogDebug("Barcode field [{Index}]: '{Value}'", i, parts[i]);
                }

                if (parts.Length >= 4)
                {
                    // Parse patient info
                    var examId = parts[0]?.Trim() ?? string.Empty;
                    var patientName = parts[1]?.Trim() ?? "Unknown";
                    var birthDateStr = parts[2]?.Trim();
                    var genderStr = parts[3]?.Trim();
                    var studyDescription = parts.Length > 4 ? parts[4]?.Trim() : null;

                    // Parse birth date
                    DateTime? birthDate = null;
                    if (!string.IsNullOrEmpty(birthDateStr))
                    {
                        if (DateTime.TryParse(birthDateStr, out var parsed))
                        {
                            birthDate = parsed;
                        }
                    }

                    // Parse gender
                    var gender = ParseGender(genderStr);

                    // Create patient info
                    var patientInfo = new PatientInfo(
                        id: new PatientId(examId),
                        name: patientName,
                        birthDate: birthDate,
                        gender: gender
                    );

                    // Create study info
                    var studyIdValue = examId.Length > 14 ? examId.Substring(0, 14) : examId;
                    var studyInfo = new StudyInfo(
                        studyId: new StudyId($"S{studyIdValue}"), // Max 16 chars total
                        examId: examId,
                        description: studyDescription ?? "Clinical Photography",
                        modality: "VL", // Visible Light photography
                        studyDate: DateTime.Now
                    );

                    _logger.LogInformation("Successfully parsed barcode: ExamId={ExamId}, Patient={PatientName}, Study={StudyDescription}",
                        examId, patientName, studyDescription);

                    return (patientInfo, studyInfo);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error parsing barcode data");
            }

            return CreateDefaultPatientAndStudy();
        }

        private Gender ParseGender(string? genderStr)
        {
            if (string.IsNullOrWhiteSpace(genderStr))
                return Gender.Other;

            return genderStr.ToUpperInvariant() switch
            {
                "M" or "MALE" => Gender.Male,
                "F" or "FEMALE" => Gender.Female,
                "O" or "OTHER" => Gender.Other,
                _ => Gender.Other
            };
        }

        private (PatientInfo, StudyInfo) CreateDefaultPatientAndStudy()
        {
            var timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
            var shortTimestamp = DateTime.Now.ToString("MMddHHmm");

            var patientInfo = new PatientInfo(
                id: new PatientId($"AUTO_{timestamp}"),
                name: "Unknown Patient",
                birthDate: null,
                gender: Gender.Other
            );

            var studyInfo = new StudyInfo(
                studyId: new StudyId($"S{shortTimestamp}"), // Max 16 chars
                examId: $"AUTO_{timestamp}",
                description: "Unidentified Clinical Photography",
                modality: "VL",
                studyDate: DateTime.Now
            );

            _logger.LogWarning("Created default patient/study info with ID: AUTO_{Timestamp}", timestamp);

            return (patientInfo, studyInfo);
        }

        private DateTime? ParseDateTime(string? dateTimeStr)
        {
            if (string.IsNullOrWhiteSpace(dateTimeStr))
                return null;

            // ExifTool format: "2023:12:25 14:30:45"
            if (DateTime.TryParseExact(dateTimeStr, "yyyy:MM:dd HH:mm:ss",
                System.Globalization.CultureInfo.InvariantCulture,
                System.Globalization.DateTimeStyles.None,
                out var result))
            {
                return result;
            }

            // Fallback to standard parsing
            if (DateTime.TryParse(dateTimeStr, out result))
            {
                return result;
            }

            return null;
        }

        private int? GetIntValue(Dictionary<string, string> exifData, params string[] keys)
        {
            foreach (var key in keys)
            {
                if (exifData.TryGetValue(key, out var value))
                {
                    // Handle values like "8 8 8" for BitsPerSample
                    var firstValue = value.Split(' ')[0];

                    if (int.TryParse(firstValue, out var result))
                        return result;
                }
            }
            return null;
        }
    }
}


================================================================================
FILE: Services/FileProcessor.cs
--------------------------------------------------------------------------------
Size: 26,58 KB | Lines: 617 | Modified: 2025-06-23 20:13:41
================================================================================

// src/CamBridge.Infrastructure/Services/FileProcessor.cs
// Version: 0.7.29
// Description: Pipeline-aware file processor with FIXED DICOM output handling
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using CamBridge.Core;
using CamBridge.Core.Entities;
using CamBridge.Core.Interfaces;
using CamBridge.Core.ValueObjects;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;

namespace CamBridge.Infrastructure.Services
{
    /// <summary>
    /// Orchestrates the complete JPEG to DICOM conversion process for a specific pipeline
    /// FIXED: Now properly handles DICOM files in output with ABSOLUTE paths!
    /// </summary>
    public class FileProcessor
    {
        private readonly ILogger _logger;
        private readonly ExifToolReader _exifToolReader;
        private readonly DicomConverter _dicomConverter;
        private readonly PipelineConfiguration _pipelineConfig;
        private readonly DicomSettings _dicomSettings;
        private readonly IDicomTagMapper? _tagMapper;
        private readonly IMappingConfiguration? _mappingConfiguration;

        public event EventHandler<FileProcessingEventArgs>? ProcessingStarted;
        public event EventHandler<FileProcessingEventArgs>? ProcessingCompleted;
        public event EventHandler<FileProcessingErrorEventArgs>? ProcessingError;

        /// <summary>
        /// Creates a FileProcessor for a specific pipeline
        /// </summary>
        public FileProcessor(
            ILogger logger,
            ExifToolReader exifToolReader,
            DicomConverter dicomConverter,
            PipelineConfiguration pipelineConfig,
            DicomSettings globalDicomSettings,
            IDicomTagMapper? tagMapper = null,
            IMappingConfiguration? mappingConfiguration = null)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            _exifToolReader = exifToolReader ?? throw new ArgumentNullException(nameof(exifToolReader));
            _dicomConverter = dicomConverter ?? throw new ArgumentNullException(nameof(dicomConverter));
            _pipelineConfig = pipelineConfig ?? throw new ArgumentNullException(nameof(pipelineConfig));
            _dicomSettings = ApplyDicomOverrides(globalDicomSettings, pipelineConfig.DicomOverrides);
            _tagMapper = tagMapper;
            _mappingConfiguration = mappingConfiguration;

            _logger.LogDebug("Created FileProcessor for pipeline: {PipelineName} (\"{PipelineId}\")",
                pipelineConfig.Name, pipelineConfig.Id);
        }

        /// <summary>
        /// Determines if a file should be processed based on pipeline configuration
        /// </summary>
        public bool ShouldProcessFile(string filePath)
        {
            try
            {
                var fileInfo = new FileInfo(filePath);
                var extension = fileInfo.Extension.ToLowerInvariant();

                // Check file extension
                var filePattern = _pipelineConfig.WatchSettings.FilePattern;
                var patterns = string.IsNullOrEmpty(filePattern)
                    ? new[] { "*.jpg", "*.jpeg" }
                    : filePattern.Split(';', StringSplitOptions.RemoveEmptyEntries);

                var isValidExtension = patterns.Any(pattern =>
                {
                    var patternExt = Path.GetExtension(pattern).ToLowerInvariant();
                    return patternExt == extension || patternExt == ".*";
                });

                if (!isValidExtension)
                {
                    return false;
                }

                // Check file age
                if (_pipelineConfig.ProcessingOptions.MaxFileAge.HasValue)
                {
                    var age = DateTime.UtcNow - fileInfo.CreationTimeUtc;
                    if (age > _pipelineConfig.ProcessingOptions.MaxFileAge.Value)
                    {
                        _logger.LogDebug("File {FileName} is too old ({Age} days)",
                            fileInfo.Name, age.TotalDays);
                        return false;
                    }
                }

                // Check file size
                if (_pipelineConfig.ProcessingOptions.MinimumFileSizeBytes.HasValue &&
                    fileInfo.Length < _pipelineConfig.ProcessingOptions.MinimumFileSizeBytes.Value)
                {
                    _logger.LogDebug("File {FileName} is too small ({Size} bytes)",
                        fileInfo.Name, fileInfo.Length);
                    return false;
                }

                if (_pipelineConfig.ProcessingOptions.MaximumFileSizeBytes.HasValue &&
                    fileInfo.Length > _pipelineConfig.ProcessingOptions.MaximumFileSizeBytes.Value)
                {
                    _logger.LogDebug("File {FileName} is too large ({Size} bytes)",
                        fileInfo.Name, fileInfo.Length);
                    return false;
                }

                return true;
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Error checking file {FilePath}", filePath);
                return false;
            }
        }

        /// <summary>
        /// Processes a single JPEG file through the pipeline
        /// </summary>
        public async Task<FileProcessingResult> ProcessFileAsync(string filePath)
        {
            var stopwatch = Stopwatch.StartNew();
            var result = new FileProcessingResult
            {
                SourceFile = filePath,
                StartTime = DateTime.UtcNow,
                PipelineId = _pipelineConfig.Id
            };

            try
            {
                _logger.LogInformation("Processing file: {FileName}", Path.GetFileName(filePath));
                ProcessingStarted?.Invoke(this, new FileProcessingEventArgs { FilePath = filePath });

                // Validate input file
                ValidateInputFile(filePath);

                // Extract EXIF data
                _logger.LogDebug("Extracting EXIF data from {FilePath}", filePath);
                var exifStopwatch = Stopwatch.StartNew();
                var metadata = await _exifToolReader.ExtractMetadataAsync(filePath);
                exifStopwatch.Stop();
                _logger.LogDebug("EXIF extraction completed in {ElapsedMs}ms", exifStopwatch.ElapsedMilliseconds);

                if (metadata == null)
                {
                    // FIXED: Create default metadata instead of failing!
                    _logger.LogWarning("Failed to extract metadata, creating default DICOM with minimal tags");
                    metadata = CreateDefaultMetadata(filePath);
                }

                // Determine output path based on pipeline configuration
                var outputPath = DetermineOutputPath(metadata, filePath);

                // Ensure output directory exists
                var outputDir = Path.GetDirectoryName(outputPath);
                if (!string.IsNullOrEmpty(outputDir))
                {
                    Directory.CreateDirectory(outputDir);
                }

                // Convert to DICOM using pipeline-specific settings and mapping
                _logger.LogInformation("Converting JPEG to DICOM: {Source} â†’ {Destination}",
                    Path.GetFullPath(filePath), Path.GetFullPath(outputPath));

                var dicomStopwatch = Stopwatch.StartNew();

                // Create converter with mapper if available
                var converterWithMapping = new DicomConverter(
                    _logger as ILogger<DicomConverter> ?? Microsoft.Extensions.Logging.Abstractions.NullLogger<DicomConverter>.Instance,
                    _tagMapper,
                    _mappingConfiguration);

                var conversionResult = await converterWithMapping.ConvertToDicomAsync(
                    filePath,
                    outputPath,
                    metadata);

                dicomStopwatch.Stop();
                _logger.LogDebug("DICOM conversion completed in {ElapsedMs}ms", dicomStopwatch.ElapsedMilliseconds);

                result.Success = conversionResult.Success;
                result.OutputFile = outputPath;
                result.DicomFile = outputPath; // NEW: Track DICOM file location
                result.EndTime = DateTime.UtcNow;
                result.ProcessingTimeMs = stopwatch.ElapsedMilliseconds;

                if (result.Success)
                {
                    _logger.LogInformation(
                        "Successfully converted {FileName} to DICOM at: {FullPath} ({ElapsedMs}ms)",
                        Path.GetFileName(filePath),
                        Path.GetFullPath(outputPath),
                        result.ProcessingTimeMs);

                    // Performance warning for slow processing
                    if (result.ProcessingTimeMs > 5000)
                    {
                        _logger.LogWarning("Slow processing detected for {FileName}: {ElapsedMs}ms",
                            Path.GetFileName(filePath), result.ProcessingTimeMs);
                    }

                    // FIXED: Handle post-processing for SOURCE file only
                    await HandlePostProcessingAsync(filePath, outputPath, result.Success);

                    ProcessingCompleted?.Invoke(this, new FileProcessingEventArgs
                    {
                        FilePath = filePath,
                        OutputPath = outputPath
                    });
                }
                else
                {
                    throw new InvalidOperationException(
                        $"DICOM conversion failed: {conversionResult.ErrorMessage}");
                }
            }
            catch (Exception ex)
            {
                result.Success = false;
                result.ErrorMessage = ex.Message;
                result.EndTime = DateTime.UtcNow;
                result.ProcessingTimeMs = stopwatch.ElapsedMilliseconds;

                _logger.LogError(ex,
                    "Failed to process {FileName}. Error: {ErrorMessage}",
                    Path.GetFileName(filePath), ex.Message);

                // Critical error detection
                if (ex is UnauthorizedAccessException && filePath.StartsWith(_pipelineConfig.WatchSettings.Path))
                {
                    _logger.LogCritical(ex, "Cannot access watch folder {Path} - pipeline will fail!",
                        _pipelineConfig.WatchSettings.Path);
                }

                // Handle failure post-processing
                await HandlePostProcessingAsync(filePath, null, false);

                ProcessingError?.Invoke(this, new FileProcessingErrorEventArgs
                {
                    FilePath = filePath,
                    Error = ex
                });
            }

            return result;
        }

        private void ValidateInputFile(string filePath)
        {
            if (!File.Exists(filePath))
            {
                throw new FileNotFoundException($"Source file not found: {filePath}");
            }

            var extension = Path.GetExtension(filePath).ToLowerInvariant();
            if (extension != ".jpg" && extension != ".jpeg")
            {
                throw new InvalidOperationException($"Invalid file type: {extension}. Expected JPEG file.");
            }
        }

        private string DetermineOutputPath(ImageMetadata metadata, string sourceFile)
        {
            // FIXED: Use ArchiveFolder as DICOM output if no OutputPath configured
            // This matches the current config structure where ArchiveFolder is used for output
            var baseOutputPath = _pipelineConfig.WatchSettings.OutputPath;

            if (string.IsNullOrEmpty(baseOutputPath))
            {
                // Fallback to ArchiveFolder if no OutputPath (current config behavior)
                baseOutputPath = _pipelineConfig.ProcessingOptions.ArchiveFolder;
                _logger.LogWarning("No OutputPath in WatchSettings, using ArchiveFolder as output: {Path}",
                    Path.GetFullPath(baseOutputPath));
            }

            // ALWAYS make path absolute!
            if (!Path.IsPathRooted(baseOutputPath))
            {
                // If relative path, make it relative to service executable location
                var serviceDir = AppDomain.CurrentDomain.BaseDirectory;
                baseOutputPath = Path.Combine(serviceDir, baseOutputPath);
                _logger.LogWarning("OutputPath was relative, converted to absolute: {Path}",
                    Path.GetFullPath(baseOutputPath));
            }

            _logger.LogDebug("Base output path for pipeline {Pipeline}: {Path}",
                _pipelineConfig.Name, Path.GetFullPath(baseOutputPath));

            var organization = _pipelineConfig.ProcessingOptions.OutputOrganization;
            var fileName = Path.GetFileNameWithoutExtension(sourceFile);

            // Build organized path based on configuration
            var outputDir = baseOutputPath;

            switch (organization)
            {
                case OutputOrganization.ByPatient:
                    if (!string.IsNullOrEmpty(metadata.Patient?.PatientName))
                    {
                        var safeName = SanitizeForPath(metadata.Patient.PatientName);
                        outputDir = Path.Combine(baseOutputPath, safeName);
                        _logger.LogDebug("Output organized by patient: {PatientName} -> {SafeName}",
                            metadata.Patient.PatientName, safeName);
                    }
                    else
                    {
                        outputDir = Path.Combine(baseOutputPath, "Unknown Patient");
                        _logger.LogWarning("No patient name found, using 'Unknown Patient' folder");
                    }
                    break;

                case OutputOrganization.ByDate:
                    // ALWAYS use current date for organization
                    var dateFolder = DateTime.Now.ToString("yyyy-MM-dd");
                    outputDir = Path.Combine(baseOutputPath, dateFolder);
                    _logger.LogDebug("Output organized by date: {Date}", dateFolder);
                    break;

                case OutputOrganization.ByPatientAndDate:
                    if (!string.IsNullOrEmpty(metadata.Patient?.PatientName))
                    {
                        var safeName = SanitizeForPath(metadata.Patient.PatientName);
                        // ALWAYS use current date for organization
                        var dateFolder2 = DateTime.Now.ToString("yyyy-MM-dd");
                        outputDir = Path.Combine(baseOutputPath, safeName, dateFolder2);
                        _logger.LogDebug("Output organized by patient/date: {PatientName}/{Date}",
                            safeName, dateFolder2);
                    }
                    else
                    {
                        var dateFolder3 = DateTime.Now.ToString("yyyy-MM-dd");
                        outputDir = Path.Combine(baseOutputPath, "Unknown Patient", dateFolder3);
                        _logger.LogWarning("No patient name found, using 'Unknown Patient/{Date}' folder", dateFolder3);
                    }
                    break;

                case OutputOrganization.None:
                default:
                    // Use base output path as-is
                    break;
            }

            // Add DICOM extension
            var dicomPath = Path.Combine(outputDir, $"{fileName}.dcm");

            // CRITICAL: ALWAYS return ABSOLUTE path!
            var absolutePath = Path.GetFullPath(dicomPath);
            _logger.LogInformation("Determined DICOM output path: {FullPath}", absolutePath);
            return absolutePath;
        }

        private string SanitizeForPath(string input)
        {
            var invalid = Path.GetInvalidFileNameChars()
                .Concat(Path.GetInvalidPathChars())
                .Distinct()
                .ToArray();

            return string.Join("_", input.Split(invalid, StringSplitOptions.RemoveEmptyEntries));
        }

        /// <summary>
        /// FIXED: Now handles source and DICOM files separately!
        /// </summary>
        private async Task HandlePostProcessingAsync(string sourceFilePath, string? dicomFilePath, bool success)
        {
            var action = success
                ? _pipelineConfig.ProcessingOptions.SuccessAction
                : _pipelineConfig.ProcessingOptions.FailureAction;

            try
            {
                switch (action)
                {
                    case PostProcessingAction.Delete:
                        // Delete only the source file
                        if (File.Exists(sourceFilePath))
                        {
                            File.Delete(sourceFilePath);
                            _logger.LogDebug("Deleted source file: {FilePath}", sourceFilePath);
                        }
                        break;

                    case PostProcessingAction.Archive:
                        // FIXED: Create separate archive folder for processed JPEGs
                        // Don't mix them with DICOM output!
                        var jpegArchiveFolder = _pipelineConfig.ProcessingOptions.BackupFolder
                            ?? Path.Combine(_pipelineConfig.ProcessingOptions.ArchiveFolder, "ProcessedJPEGs");

                        var archivePath = Path.Combine(
                            jpegArchiveFolder,
                            Path.GetFileName(sourceFilePath));

                        Directory.CreateDirectory(Path.GetDirectoryName(archivePath)!);

                        if (File.Exists(sourceFilePath))
                        {
                            File.Move(sourceFilePath, archivePath, true);
                            _logger.LogDebug("Archived source JPEG: {FullSourcePath} -> {FullArchivePath}",
                                Path.GetFullPath(sourceFilePath), Path.GetFullPath(archivePath));
                        }

                        // DICOM file stays in output folder - don't move it!
                        if (success && !string.IsNullOrEmpty(dicomFilePath))
                        {
                            _logger.LogInformation("DICOM file created at: {FullDicomPath}",
                                Path.GetFullPath(dicomFilePath));
                        }
                        break;

                    case PostProcessingAction.MoveToError:
                        // Move source file to error folder (typically for failures)
                        if (!success)
                        {
                            await MoveToErrorFolderAsync(sourceFilePath, "Processing failed");

                            // If DICOM was partially created, clean it up
                            if (!string.IsNullOrEmpty(dicomFilePath) && File.Exists(dicomFilePath))
                            {
                                try
                                {
                                    File.Delete(dicomFilePath);
                                    _logger.LogDebug("Cleaned up partial DICOM file: {DicomPath}", dicomFilePath);
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogWarning(ex, "Failed to clean up partial DICOM file: {DicomPath}", dicomFilePath);
                                }
                            }
                        }
                        break;

                    default:
                        // Leave files as-is
                        _logger.LogDebug("No post-processing action for {FilePath}", sourceFilePath);
                        break;
                }
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex,
                    "Failed to perform post-processing action {Action} on {FilePath}",
                    action, sourceFilePath);
                // Don't fail the overall processing for post-processing errors
            }
        }

        private async Task MoveToErrorFolderAsync(string filePath, string errorMessage)
        {
            try
            {
                var errorFolder = _pipelineConfig.ProcessingOptions.ErrorFolder;
                Directory.CreateDirectory(errorFolder);

                var errorFileName = $"{Path.GetFileNameWithoutExtension(filePath)}" +
                                   $"_{DateTime.Now:yyyyMMdd_HHmmss}" +
                                   $"{Path.GetExtension(filePath)}";

                var errorPath = Path.Combine(errorFolder, errorFileName);

                // Write error info file
                var errorInfoPath = Path.ChangeExtension(errorPath, ".error.txt");
                await File.WriteAllTextAsync(errorInfoPath,
                    $"Error Time: {DateTime.Now:yyyy-MM-dd HH:mm:ss}\n" +
                    $"Pipeline: {_pipelineConfig.Name}\n" +
                    $"Source File: {filePath}\n" +
                    $"Error: {errorMessage}");

                // Move the file
                if (File.Exists(filePath))
                {
                    File.Move(filePath, errorPath, true);
                    _logger.LogDebug("Moved failed file to error folder: {FullErrorPath}",
                        Path.GetFullPath(errorPath));
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to move file to error folder: {FilePath}", filePath);
            }
        }

        private DicomSettings ApplyDicomOverrides(DicomSettings global, DicomOverrides? overrides)
        {
            if (overrides == null)
                return global;

            // Create a copy of global settings with overrides applied
            var settings = new DicomSettings
            {
                InstitutionName = overrides.InstitutionName ?? global.InstitutionName,
                InstitutionDepartment = overrides.InstitutionDepartment ?? global.InstitutionDepartment,
                StationName = global.StationName,
                SourceApplicationEntityTitle = global.SourceApplicationEntityTitle,
                ImplementationVersionName = global.ImplementationVersionName,
                ImplementationClassUid = global.ImplementationClassUid,
                Modality = global.Modality,
                ValidateAfterCreation = global.ValidateAfterCreation
            };

            _logger.LogDebug("Applied DICOM overrides for pipeline: {PipelineName}", _pipelineConfig.Name);
            return settings;
        }

        /// <summary>
        /// Creates minimal default metadata when extraction fails
        /// DICOM MUST be created regardless of metadata availability!
        /// </summary>
        private ImageMetadata CreateDefaultMetadata(string sourceFile)
        {
            var fileName = Path.GetFileNameWithoutExtension(sourceFile);
            var now = DateTime.Now;

            _logger.LogWarning("Creating default metadata for {FileName} with date {Date}",
                fileName, now.ToString("yyyy-MM-dd"));

            // Create default patient info with constructor
            var patientId = new PatientId($"DEFAULT_{now:yyyyMMddHHmmss}");
            var patient = new PatientInfo(
                id: patientId,
                name: "Unknown Patient",
                birthDate: null,
                gender: Gender.Other
            );

            // Create default study info with constructor
            var studyId = new StudyId(Guid.NewGuid().ToString().Substring(0, 16)); // Max 16 chars
            var study = new StudyInfo(
                studyId: studyId,
                examId: null,
                description: "CamBridge JPEG to DICOM Conversion",
                modality: "XC",  // Photographic Image
                studyDate: now,
                accessionNumber: $"ACC{now:yyyyMMddHHmmss}",
                referringPhysician: null,
                comment: null
            );

            // Create technical data (minimal)
            var technicalData = new ImageTechnicalData
            {
                Manufacturer = "Unknown",
                Model = "Unknown"
            };

            // Create EXIF data dictionary
            var exifData = new Dictionary<string, string>
            {
                ["FileName"] = fileName,
                ["FileDate"] = now.ToString("yyyy-MM-dd HH:mm:ss"),
                ["Source"] = "CamBridge Default"
            };

            // Create metadata with full constructor
            var metadata = new ImageMetadata(
                sourceFilePath: sourceFile,
                captureDateTime: now,  // Note: captureDateTime, not captureDate!
                patient: patient,
                study: study,
                technicalData: technicalData,
                userComment: null,
                barcodeData: null,
                instanceNumber: 1,
                instanceUid: null,  // Will be auto-generated
                exifData: exifData
            );

            return metadata;
        }
    }

    /// <summary>
    /// Event arguments for file processing events
    /// </summary>
    public class FileProcessingEventArgs : EventArgs
    {
        public string FilePath { get; set; } = string.Empty;
        public string? OutputPath { get; set; }
    }

    /// <summary>
    /// Event arguments for file processing errors
    /// </summary>
    public class FileProcessingErrorEventArgs : EventArgs
    {
        public string FilePath { get; set; } = string.Empty;
        public Exception Error { get; set; } = null!;
    }

    /// <summary>
    /// Result of file processing operation
    /// </summary>
    public class FileProcessingResult
    {
        public string SourceFile { get; set; } = string.Empty;
        public string? OutputFile { get; set; }
        public string? DicomFile { get; set; }  // NEW: Track DICOM file separately
        public bool Success { get; set; }
        public string? ErrorMessage { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public long ProcessingTimeMs { get; set; }
        public Guid PipelineId { get; set; }
    }
}


================================================================================
FILE: Services/MappingConfigurationLoader.cs
--------------------------------------------------------------------------------
Size: 11,34 KB | Lines: 316 | Modified: 2025-06-23 11:53:05
================================================================================

// File: src/CamBridge.Infrastructure/Services/MappingConfigurationLoader.cs
// Version: 0.5.25
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions
// Modified: 2025-06-04
// Status: Development/Local - FREEZE BUG FIXED

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.Json;
using System.Threading.Tasks;
using CamBridge.Core;
using CamBridge.Core.Interfaces;
using Microsoft.Extensions.Logging;

namespace CamBridge.Infrastructure.Services
{
    /// <summary>
    /// Loads and manages DICOM mapping configurations from JSON files
    /// </summary>
    public class MappingConfigurationLoader : IMappingConfiguration
    {
        private readonly ILogger<MappingConfigurationLoader> _logger;
        private readonly string _configPath;
        private List<MappingRule> _mappingRules;
        private bool _isInitialized = false;

        public MappingConfigurationLoader(ILogger<MappingConfigurationLoader> logger, string configPath = "mappings.json")
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            _configPath = configPath;
            _mappingRules = new List<MappingRule>();

            // REMOVED: LoadConfigurationAsync().GetAwaiter().GetResult();
            // This was causing the UI freeze!
            // Configuration will be loaded lazily or explicitly via LoadConfigurationAsync
        }

        /// <inheritdoc />
        public IReadOnlyList<MappingRule> GetMappingRules()
        {
            // Return default rules if not initialized
            if (!_isInitialized)
            {
                LoadDefaultMappings();
                _isInitialized = true;
            }
            return _mappingRules.AsReadOnly();
        }

        /// <inheritdoc />
        public async Task<bool> LoadConfigurationAsync(string? filePath = null)
        {
            var path = filePath ?? _configPath;

            try
            {
                // Make path absolute if relative
                if (!Path.IsPathRooted(path))
                {
                    // Try multiple locations for the config file
                    var possiblePaths = new[]
                    {
                        Path.Combine(AppDomain.CurrentDomain.BaseDirectory, path),
                        Path.Combine(Environment.CurrentDirectory, path),
                        Path.Combine(Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location)!, path),
                        Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "CamBridge", path)
                    };

                    path = possiblePaths.FirstOrDefault(File.Exists) ?? possiblePaths[0];
                }

                if (!File.Exists(path))
                {
                    _logger.LogWarning("Mapping configuration file not found: {Path}. Using default mappings.", path);
                    LoadDefaultMappings();
                    _isInitialized = true;
                    return false;
                }

                var json = await File.ReadAllTextAsync(path);
                var config = JsonSerializer.Deserialize<MappingConfiguration>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                if (config?.Rules != null && config.Rules.Count > 0)
                {
                    _mappingRules = config.Rules;
                    _logger.LogInformation("Loaded {Count} mapping rules from {Path}", _mappingRules.Count, path);
                    _isInitialized = true;
                    return true;
                }
                else
                {
                    _logger.LogWarning("No mapping rules found in {Path}. Using default mappings.", path);
                    LoadDefaultMappings();
                    _isInitialized = true;
                    return false;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error loading mapping configuration from {Path}", path);
                LoadDefaultMappings();
                _isInitialized = true;
                return false;
            }
        }

        /// <inheritdoc />
        public async Task<bool> SaveConfigurationAsync(IEnumerable<MappingRule> rules, string? filePath = null)
        {
            var path = filePath ?? _configPath;

            try
            {
                // Make path absolute if relative
                if (!Path.IsPathRooted(path))
                {
                    path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, path);
                }

                // Ensure directory exists
                var directory = Path.GetDirectoryName(path);
                if (!string.IsNullOrEmpty(directory))
                {
                    Directory.CreateDirectory(directory);
                }

                var config = new MappingConfiguration
                {
                    Version = "1.0",
                    Rules = rules.ToList()
                };

                var json = JsonSerializer.Serialize(config, new JsonSerializerOptions
                {
                    WriteIndented = true,
                    PropertyNameCaseInsensitive = true
                });

                await File.WriteAllTextAsync(path, json);

                _mappingRules = config.Rules;
                _logger.LogInformation("Saved {Count} mapping rules to {Path}", _mappingRules.Count, path);

                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error saving mapping configuration to {Path}", path);
                return false;
            }
        }

        /// <inheritdoc />
        public void AddRule(MappingRule rule)
        {
            if (rule == null)
                throw new ArgumentNullException(nameof(rule));

            _mappingRules.Add(rule);
            _logger.LogDebug("Added mapping rule: {Source} -> {Target}", rule.SourceField, rule.DicomTag);
        }

        /// <inheritdoc />
        public void RemoveRule(string sourceField)
        {
            var removed = _mappingRules.RemoveAll(r => r.SourceField == sourceField);
            if (removed > 0)
            {
                _logger.LogDebug("Removed {Count} mapping rule(s) for source field: {SourceField}", removed, sourceField);
            }
        }

        /// <inheritdoc />
        public MappingRule? GetRuleForSource(string sourceField)
        {
            // Ensure we have rules loaded
            if (!_isInitialized)
            {
                LoadDefaultMappings();
                _isInitialized = true;
            }

            return _mappingRules.FirstOrDefault(r =>
                r.SourceField.Equals(sourceField, StringComparison.OrdinalIgnoreCase));
        }

        /// <inheritdoc />
        public IEnumerable<MappingRule> GetRulesForTag(string dicomTag)
        {
            // Ensure we have rules loaded
            if (!_isInitialized)
            {
                LoadDefaultMappings();
                _isInitialized = true;
            }

            return _mappingRules.Where(r =>
                r.DicomTag.Equals(dicomTag, StringComparison.OrdinalIgnoreCase));
        }

        /// <inheritdoc />
        public void ValidateRules()
        {
            foreach (var rule in _mappingRules)
            {
                if (string.IsNullOrWhiteSpace(rule.SourceField))
                    throw new InvalidOperationException($"Invalid rule: SourceField is empty");

                if (string.IsNullOrWhiteSpace(rule.DicomTag))
                    throw new InvalidOperationException($"Invalid rule: DicomTag is empty for source {rule.SourceField}");

                // Additional validation can be added here
            }
        }

        /// <summary>
        /// Loads default mapping rules for Ricoh G900 II
        /// </summary>
        private void LoadDefaultMappings()
        {
            _mappingRules = new List<MappingRule>
            {
                // Patient Information
                new MappingRule
                {
                    SourceField = "name",
                    DicomTag = "(0010,0010)",
                    Description = "Patient's Name",
                    ValueRepresentation = "PN",
                    Required = true
                },
                new MappingRule
                {
                    SourceField = "examid",
                    DicomTag = "(0010,0020)",
                    Description = "Patient ID",
                    ValueRepresentation = "LO",
                    Required = true
                },
                new MappingRule
                {
                    SourceField = "birthdate",
                    DicomTag = "(0010,0030)",
                    Description = "Patient's Birth Date",
                    ValueRepresentation = "DA",
                    Transform = "DateToDicom",
                    Required = false
                },
                new MappingRule
                {
                    SourceField = "gender",
                    DicomTag = "(0010,0040)",
                    Description = "Patient's Sex",
                    ValueRepresentation = "CS",
                    Transform = "MapGender",
                    Required = false
                },
                
                // Study Information
                new MappingRule
                {
                    SourceField = "examid",
                    DicomTag = "(0020,0010)",
                    Description = "Study ID",
                    ValueRepresentation = "SH",
                    Required = true
                },
                new MappingRule
                {
                    SourceField = "comment",
                    DicomTag = "(0008,1030)",
                    Description = "Study Description",
                    ValueRepresentation = "LO",
                    Required = false
                },
                
                // Series Information
                new MappingRule
                {
                    SourceField = "_datetime",
                    DicomTag = "(0008,0021)",
                    Description = "Series Date",
                    ValueRepresentation = "DA",
                    Transform = "ExtractDate",
                    Required = true
                },
                new MappingRule
                {
                    SourceField = "_datetime",
                    DicomTag = "(0008,0031)",
                    Description = "Series Time",
                    ValueRepresentation = "TM",
                    Transform = "ExtractTime",
                    Required = true
                }
            };

            _logger.LogInformation("Loaded {Count} default mapping rules", _mappingRules.Count);
        }

        /// <summary>
        /// Internal configuration class for JSON serialization
        /// </summary>
        private class MappingConfiguration
        {
            public string Version { get; set; } = "1.0";
            public List<MappingRule> Rules { get; set; } = new();
        }
    }
}


================================================================================
FILE: Services/NotificationService.cs
--------------------------------------------------------------------------------
Size: 2,20 KB | Lines: 67 | Modified: 2025-06-23 11:53:05
================================================================================

// src/CamBridge.Infrastructure/Services/NotificationService.cs
// Version: 0.7.18
// Description: Ultra-minimal notification service - KISS approach without interface!
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using System;
using System.Linq;
using System.Threading.Tasks;
using CamBridge.Core;
using Microsoft.Extensions.Logging;

namespace CamBridge.Infrastructure.Services
{
    /// <summary>
    /// Ultra-minimal notification service - just logs!
    /// KISS: No email implementation, no interface!
    /// v0.7.18: Direct dependency pattern
    /// </summary>
    public class NotificationService // No more interface!
    {
        private readonly ILogger<NotificationService> _logger;

        public NotificationService(ILogger<NotificationService> logger)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        /// <summary>
        /// Send daily summary - KISS: just log!
        /// </summary>
        public async Task SendDailySummaryAsync(ProcessingSummary summary)
        {
            await Task.CompletedTask;

            _logger.LogInformation(
                "Daily Summary: Processed {Total}, Success {Success}, Failed {Failed}, Uptime {Uptime}",
                summary.TotalProcessed,
                summary.Successful,
                summary.Failed,
                summary.Uptime);

            if (summary.TopErrors != null && summary.TopErrors.Count > 0)
            {
                _logger.LogInformation("Top Errors: {Errors}",
                    string.Join(", ", summary.TopErrors.Select(e => $"{e.Key}: {e.Value}")));
            }
        }

        /// <summary>
        /// Notify critical error - KISS: just log!
        /// </summary>
        public async Task NotifyErrorAsync(string message, Exception? exception = null)
        {
            await Task.CompletedTask;

            if (exception != null)
            {
                _logger.LogError(exception, "Critical Error: {Message}", message);
            }
            else
            {
                _logger.LogError("Critical Error: {Message}", message);
            }
        }
    }
}


================================================================================
FILE: Services/PipelineManager.cs
--------------------------------------------------------------------------------
Size: 19,17 KB | Lines: 491 | Modified: 2025-06-23 20:13:41
================================================================================

// src/CamBridge.Infrastructure/Services/PipelineManager.cs
// Version: 0.7.28
// Description: Orchestrates multiple processing pipelines with isolated logging and corrected log levels
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using CamBridge.Core;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;

namespace CamBridge.Infrastructure.Services
{
    /// <summary>
    /// Manages multiple processing pipelines with independent configurations, queues, watchers, FileProcessors, AND Loggers!
    /// PIPELINE UPDATE: Each pipeline gets its own FileProcessor instance AND Logger!
    /// </summary>
    public class PipelineManager : IDisposable
    {
        private readonly ILogger<PipelineManager> _logger;
        private readonly IServiceProvider _serviceProvider;
        private readonly IOptionsMonitor<CamBridgeSettingsV2> _settingsMonitor;
        private readonly ConcurrentDictionary<string, PipelineContext> _pipelines = new();
        private readonly SemaphoreSlim _pipelineLock = new(1, 1);
        private bool _disposed;

        public PipelineManager(
            ILogger<PipelineManager> logger,
            IServiceProvider serviceProvider,
            IOptionsMonitor<CamBridgeSettingsV2> settingsMonitor)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            _serviceProvider = serviceProvider ?? throw new ArgumentNullException(nameof(serviceProvider));
            _settingsMonitor = settingsMonitor ?? throw new ArgumentNullException(nameof(settingsMonitor));

            // React to settings changes
            _settingsMonitor.OnChange(async settings =>
            {
                _logger.LogInformation("Settings changed, reconfiguring pipelines");
                await ReconfigurePipelinesAsync(settings);
            });
        }

        /// <summary>
        /// Initializes and starts all configured pipelines
        /// </summary>
        public async Task StartAsync(CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("Starting Pipeline Manager");

            var settings = _settingsMonitor.CurrentValue;

            // Initialize pipelines from configuration
            foreach (var pipelineConfig in settings.Pipelines.Where(p => p.Enabled))
            {
                try
                {
                    await CreateAndStartPipelineAsync(pipelineConfig, cancellationToken);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Failed to start pipeline: {PipelineName}", pipelineConfig.Name);
                }
            }

            _logger.LogInformation("Pipeline Manager started with {Count} active pipelines",
                _pipelines.Count(p => p.Value.IsActive));
        }

        /// <summary>
        /// Stops all pipelines gracefully
        /// </summary>
        public async Task StopAsync(CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("Stopping Pipeline Manager");

            var stopTasks = _pipelines.Values
                .Where(p => p.IsActive)
                .Select(p => StopPipelineAsync(p, cancellationToken))
                .ToArray();

            await Task.WhenAll(stopTasks);

            _logger.LogInformation("Pipeline Manager stopped");
        }

        /// <summary>
        /// Enables a specific pipeline at runtime
        /// </summary>
        public async Task EnablePipelineAsync(string pipelineId, CancellationToken cancellationToken = default)
        {
            await _pipelineLock.WaitAsync(cancellationToken);
            try
            {
                if (_pipelines.TryGetValue(pipelineId, out var context))
                {
                    if (!context.IsActive)
                    {
                        context.Watcher.EnableRaisingEvents = true;
                        context.IsActive = true;
                        _logger.LogInformation("Pipeline {PipelineName} enabled", context.Configuration.Name);
                    }
                }
                else
                {
                    // Try to find in configuration and create
                    var config = _settingsMonitor.CurrentValue.Pipelines
                        .FirstOrDefault(p => p.Id.ToString() == pipelineId);

                    if (config != null)
                    {
                        config.Enabled = true;
                        await CreateAndStartPipelineAsync(config, cancellationToken);
                    }
                }
            }
            finally
            {
                _pipelineLock.Release();
            }
        }

        /// <summary>
        /// Disables a specific pipeline at runtime
        /// </summary>
        public async Task DisablePipelineAsync(string pipelineId, CancellationToken cancellationToken = default)
        {
            await _pipelineLock.WaitAsync(cancellationToken);
            try
            {
                if (_pipelines.TryGetValue(pipelineId, out var context))
                {
                    await StopPipelineAsync(context, cancellationToken);
                }
            }
            finally
            {
                _pipelineLock.Release();
            }
        }

        /// <summary>
        /// Gets the current status of all pipelines
        /// </summary>
        public List<PipelineStatus> GetPipelineStatuses()
        {
            return _pipelines.Values.Select(p => new PipelineStatus
            {
                Id = p.Configuration.Id,
                Name = p.Configuration.Name,
                IsActive = p.IsActive,
                QueueDepth = p.Queue.QueueLength,
                ProcessedCount = p.ProcessedCount,
                ErrorCount = p.ErrorCount,
                LastProcessed = p.LastProcessed,
                WatchPath = p.Configuration.WatchSettings.Path,
                OutputPath = p.Configuration.WatchSettings.OutputPath ?? ""
            }).ToList();
        }

        /// <summary>
        /// Gets detailed information about a specific pipeline
        /// </summary>
        public PipelineStatus? GetPipelineStatus(string pipelineId)
        {
            if (_pipelines.TryGetValue(pipelineId, out var context))
            {
                return new PipelineStatus
                {
                    Id = context.Configuration.Id,
                    Name = context.Configuration.Name,
                    IsActive = context.IsActive,
                    QueueDepth = context.Queue.QueueLength,
                    ProcessedCount = context.ProcessedCount,
                    ErrorCount = context.ErrorCount,
                    LastProcessed = context.LastProcessed,
                    WatchPath = context.Configuration.WatchSettings.Path,
                    OutputPath = context.Configuration.WatchSettings.OutputPath ?? ""
                };
            }
            return null;
        }

        private async Task CreateAndStartPipelineAsync(PipelineConfiguration config, CancellationToken cancellationToken)
        {
            if (_pipelines.ContainsKey(config.Id.ToString()))
            {
                _logger.LogWarning("Pipeline {PipelineName} ({Id}) already exists", config.Name, config.Id);
                return;
            }

            // Changed to DEBUG level - technical initialization detail
            _logger.LogDebug("Creating pipeline: {PipelineName} ({Id})", config.Name, config.Id);

            try
            {
                // Get services from DI
                var loggerFactory = _serviceProvider.GetRequiredService<ILoggerFactory>();
                var exifReader = _serviceProvider.GetRequiredService<ExifToolReader>();
                var dicomConverter = _serviceProvider.GetRequiredService<DicomConverter>();
                var globalDicomSettings = _settingsMonitor.CurrentValue.GlobalDicomSettings ?? new DicomSettings();

                // CRITICAL: Create pipeline-specific logger with sanitized name
                var sanitizedName = SanitizeForFileName(config.Name);
                var pipelineLogger = loggerFactory.CreateLogger($"Pipeline.{sanitizedName}");

                // Create FileProcessor for THIS pipeline with pipeline-specific logger
                var fileProcessor = new FileProcessor(
                    pipelineLogger,  // Use pipeline-specific logger!
                    exifReader,
                    dicomConverter,
                    config,
                    globalDicomSettings
                );

                // Create processing queue for this pipeline
                var processingOptions = Microsoft.Extensions.Options.Options.Create(config.ProcessingOptions);
                var queue = new ProcessingQueue(
                    loggerFactory.CreateLogger<ProcessingQueue>(),
                    fileProcessor,
                    processingOptions
                );

                // Create file system watcher
                var watcher = CreateFileSystemWatcher(config.WatchSettings);

                // Create pipeline context
                var context = new PipelineContext(
                    config,
                    fileProcessor,
                    queue,
                    watcher,
                    pipelineLogger  // Store pipeline logger in context
                );

                // Wire up file processor events
                fileProcessor.ProcessingCompleted += (sender, args) =>
                {
                    context.ProcessedCount++;
                    context.LastProcessed = DateTime.UtcNow;
                };

                fileProcessor.ProcessingError += (sender, args) =>
                {
                    context.ErrorCount++;
                };

                // Register pipeline
                if (_pipelines.TryAdd(config.Id.ToString(), context))
                {
                    // Wire up watcher events
                    watcher.Created += async (sender, e) =>
                    {
                        if (IsValidImageFile(e.FullPath, config.WatchSettings.FilePattern))
                        {
                            // Changed to DEBUG - file detection is technical detail
                            pipelineLogger.LogDebug("New file detected: {FilePath}", e.FullPath);
                            await queue.EnqueueAsync(e.FullPath, cancellationToken);
                        }
                    };

                    // Start processing queue (fire and forget!)
                    _ = Task.Run(async () =>
                    {
                        pipelineLogger.LogDebug("Starting processing queue for pipeline: {PipelineName}", config.Name);
                        await queue.ProcessQueueAsync(cancellationToken);
                    }, cancellationToken);

                    // Enable watcher
                    watcher.EnableRaisingEvents = true;
                    context.IsActive = true;

                    // Keep as INFO - important business event
                    pipelineLogger.LogInformation("Pipeline {PipelineName} started successfully. Watching: {WatchPath}",
                        config.Name, config.WatchSettings.Path);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to create pipeline: {PipelineName}", config.Name);
                throw;
            }
        }

        private async Task StopPipelineAsync(PipelineContext context, CancellationToken cancellationToken)
        {
            try
            {
                context.PipelineLogger.LogInformation("Stopping pipeline: {PipelineName}", context.Configuration.Name);

                context.IsActive = false;
                context.Watcher.EnableRaisingEvents = false;

                // Give queue time to finish current work
                await Task.Delay(1000, cancellationToken);

                context.PipelineLogger.LogInformation("Pipeline {PipelineName} stopped", context.Configuration.Name);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error stopping pipeline: {PipelineName}", context.Configuration.Name);
            }
        }

        private async Task ReconfigurePipelinesAsync(CamBridgeSettingsV2 newSettings)
        {
            await _pipelineLock.WaitAsync();
            try
            {
                // Stop pipelines that are no longer in config
                var configuredIds = newSettings.Pipelines.Select(p => p.Id.ToString()).ToHashSet();
                var toRemove = _pipelines.Keys.Where(id => !configuredIds.Contains(id)).ToList();

                foreach (var id in toRemove)
                {
                    if (_pipelines.TryRemove(id, out var context))
                    {
                        await StopPipelineAsync(context, CancellationToken.None);
                        context.Dispose();
                    }
                }

                // Start or update pipelines from config
                foreach (var pipelineConfig in newSettings.Pipelines)
                {
                    if (pipelineConfig.Enabled)
                    {
                        if (!_pipelines.ContainsKey(pipelineConfig.Id.ToString()))
                        {
                            await CreateAndStartPipelineAsync(pipelineConfig, CancellationToken.None);
                        }
                    }
                    else if (_pipelines.TryGetValue(pipelineConfig.Id.ToString(), out var context))
                    {
                        await StopPipelineAsync(context, CancellationToken.None);
                    }
                }
            }
            finally
            {
                _pipelineLock.Release();
            }
        }

        private FileSystemWatcher CreateFileSystemWatcher(PipelineWatchSettings settings)
        {
            // Ensure watch directory exists
            Directory.CreateDirectory(settings.Path);

            var watcher = new FileSystemWatcher(settings.Path)
            {
                NotifyFilter = NotifyFilters.FileName | NotifyFilters.CreationTime,
                IncludeSubdirectories = settings.IncludeSubdirectories
            };

            // Apply file pattern filter(s)
            // Note: FileSystemWatcher only supports single pattern, so we use *.* and filter in event
            watcher.Filter = "*.*";

            return watcher;
        }

        private bool IsValidImageFile(string filePath, string filePattern)
        {
            var fileName = Path.GetFileName(filePath);

            // Default to JPEG patterns if not specified
            if (string.IsNullOrWhiteSpace(filePattern))
                filePattern = "*.jpg;*.jpeg";

            // Split patterns by semicolon and check each
            var patterns = filePattern.Split(';', StringSplitOptions.RemoveEmptyEntries)
                .Select(p => p.Trim());

            foreach (var pattern in patterns)
            {
                // Convert wildcard pattern to regex
                var regexPattern = "^" + Regex.Escape(pattern)
                    .Replace("\\*", ".*")
                    .Replace("\\?", ".") + "$";

                if (Regex.IsMatch(fileName, regexPattern, RegexOptions.IgnoreCase))
                    return true;
            }

            return false;
        }

        private string SanitizeForFileName(string pipelineName)
        {
            // Same logic as in LogViewerViewModel
            var invalid = Path.GetInvalidFileNameChars()
                .Concat(new[] { ' ', '.', ',', '/', '\\', ':', '-' })
                .Distinct()
                .ToArray();

            var sanitized = string.Join("_", pipelineName.Split(invalid, StringSplitOptions.RemoveEmptyEntries));

            if (sanitized.Length > 100)
            {
                sanitized = sanitized.Substring(0, 97) + "...";
            }

            return sanitized;
        }

        public void Dispose()
        {
            if (_disposed) return;

            try
            {
                StopAsync(CancellationToken.None).GetAwaiter().GetResult();

                foreach (var context in _pipelines.Values)
                {
                    context.Dispose();
                }

                _pipelines.Clear();
                _pipelineLock?.Dispose();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error during PipelineManager disposal");
            }

            _disposed = true;
        }

        /// <summary>
        /// Internal class to hold pipeline runtime context
        /// </summary>
        private class PipelineContext : IDisposable
        {
            public PipelineConfiguration Configuration { get; }
            public FileProcessor FileProcessor { get; }
            public ProcessingQueue Queue { get; }
            public FileSystemWatcher Watcher { get; }
            public ILogger PipelineLogger { get; }
            public bool IsActive { get; set; }
            public DateTime LastProcessed { get; set; }
            public int ProcessedCount { get; set; }
            public int ErrorCount { get; set; }

            public PipelineContext(
                PipelineConfiguration configuration,
                FileProcessor fileProcessor,
                ProcessingQueue queue,
                FileSystemWatcher watcher,
                ILogger pipelineLogger)
            {
                Configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
                FileProcessor = fileProcessor ?? throw new ArgumentNullException(nameof(fileProcessor));
                Queue = queue ?? throw new ArgumentNullException(nameof(queue));
                Watcher = watcher ?? throw new ArgumentNullException(nameof(watcher));
                PipelineLogger = pipelineLogger ?? throw new ArgumentNullException(nameof(pipelineLogger));
                LastProcessed = DateTime.MinValue;
            }

            public void Dispose()
            {
                Watcher?.Dispose();
            }
        }
    }

    /// <summary>
    /// Pipeline status information for API responses
    /// </summary>
    public class PipelineStatus
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public bool IsActive { get; set; }
        public int QueueDepth { get; set; }
        public int ProcessedCount { get; set; }
        public int ErrorCount { get; set; }
        public DateTime LastProcessed { get; set; }
        public string WatchPath { get; set; } = string.Empty;
        public string OutputPath { get; set; } = string.Empty;
    }
}


================================================================================
FILE: Services/ProcessingQueue.cs
--------------------------------------------------------------------------------
Size: 14,98 KB | Lines: 410 | Modified: 2025-06-23 13:25:34
================================================================================

// src/CamBridge.Infrastructure/Services/ProcessingQueue.cs
// Version: 0.7.31
// Description: Thread-safe queue with duplicate detection fix
// Copyright: Â© 2025 Claude's Improbably Reliable Software Solutions

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using CamBridge.Core;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;

namespace CamBridge.Infrastructure.Services
{
    /// <summary>
    /// Thread-safe queue for managing file processing with retry logic
    /// FIXED: Prevents duplicate processing of successfully completed files
    /// </summary>
    public class ProcessingQueue
    {
        private readonly ILogger<ProcessingQueue> _logger;
        private readonly FileProcessor _fileProcessor;
        private readonly ProcessingOptions _options;
        private readonly ConcurrentQueue<ProcessingItem> _queue = new();
        private readonly ConcurrentDictionary<string, ProcessingItem> _activeItems = new();
        private readonly SemaphoreSlim _processingSlots;
        private readonly CancellationTokenSource _cancellationSource = new();
        private Task? _processingTask;

        // FIX: Track processed and enqueued files to prevent duplicates
        private readonly HashSet<string> _processedFiles = new();
        private readonly HashSet<string> _enqueuedFiles = new();
        private readonly object _trackingLock = new object();

        // Statistics
        private int _totalProcessed;
        private int _totalSuccessful;
        private int _totalFailed;
        private readonly DateTime _startTime = DateTime.UtcNow;
        private readonly ConcurrentDictionary<string, int> _errorCounts = new();
        private readonly object _statsLock = new object();

        // Public statistics properties
        public int QueueLength => _queue.Count;
        public int ActiveCount => _activeItems.Count;
        public int TotalProcessed => _totalProcessed;
        public int TotalSuccessful => _totalSuccessful;
        public int TotalFailed => _totalFailed;
        public TimeSpan UpTime => DateTime.UtcNow - _startTime;

        /// <summary>
        /// Creates a ProcessingQueue with a specific FileProcessor for this pipeline
        /// </summary>
        public ProcessingQueue(
            ILogger<ProcessingQueue> logger,
            FileProcessor fileProcessor,
            IOptions<ProcessingOptions> options)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            _fileProcessor = fileProcessor ?? throw new ArgumentNullException(nameof(fileProcessor));
            _options = options?.Value ?? throw new ArgumentNullException(nameof(options));

            _processingSlots = new SemaphoreSlim(
                _options.MaxConcurrentProcessing,
                _options.MaxConcurrentProcessing);
        }

        /// <summary>
        /// Enqueues a file for processing
        /// </summary>
        public bool TryEnqueue(string filePath)
        {
            if (string.IsNullOrWhiteSpace(filePath))
                return false;

            lock (_trackingLock)
            {
                // FIX: Check if already successfully processed
                if (_processedFiles.Contains(filePath))
                {
                    _logger.LogDebug("File {FilePath} already processed, ignoring duplicate event", filePath);
                    return false;
                }

                // FIX: Check if already in queue
                if (_enqueuedFiles.Contains(filePath))
                {
                    _logger.LogDebug("File {FilePath} already in queue, ignoring duplicate event", filePath);
                    return false;
                }

                // Check if already being processed
                if (_activeItems.ContainsKey(filePath))
                {
                    _logger.LogDebug("File {FilePath} is currently being processed", filePath);
                    return false;
                }

                // Add to tracking
                _enqueuedFiles.Add(filePath);
            }

            // Check file size constraints if needed
            // TODO: Add MinFileSizeBytes/MaxFileSizeBytes to ProcessingOptions if needed

            var item = new ProcessingItem(filePath);
            _queue.Enqueue(item);

            _logger.LogInformation("Enqueued {FilePath} for processing (queue length: {QueueLength})",
                filePath, _queue.Count);

            return true;
        }

        /// <summary>
        /// Async wrapper for TryEnqueue to match PipelineManager expectations
        /// </summary>
        public Task<bool> EnqueueAsync(string filePath, CancellationToken cancellationToken = default)
        {
            var result = TryEnqueue(filePath);
            return Task.FromResult(result);
        }

        /// <summary>
        /// Processes items from the queue
        /// </summary>
        public async Task ProcessAsync(CancellationToken cancellationToken)
        {
            _logger.LogInformation("Processing queue started");

            try
            {
                while (!cancellationToken.IsCancellationRequested)
                {
                    if (_queue.TryDequeue(out var item))
                    {
                        await _processingSlots.WaitAsync(cancellationToken);

                        // Fire and forget - process in background
                        _ = Task.Run(async () =>
                        {
                            try
                            {
                                await ProcessItemAsync(item, cancellationToken);
                            }
                            catch (Exception ex)
                            {
                                _logger.LogError(ex, "Unexpected error in background processing");
                            }
                        }, cancellationToken);
                    }
                    else
                    {
                        // No items to process, wait a bit
                        await Task.Delay(100, cancellationToken);
                    }
                }
            }
            finally
            {
                _logger.LogInformation("Processing queue stopped");
            }
        }

        /// <summary>
        /// Compatibility wrapper for PipelineManager that expects ProcessQueueAsync
        /// </summary>
        public Task ProcessQueueAsync(CancellationToken cancellationToken)
        {
            return ProcessAsync(cancellationToken);
        }

        /// <summary>
        /// Starts the background processing
        /// </summary>
        public Task StartAsync(CancellationToken cancellationToken)
        {
            _processingTask = ProcessAsync(_cancellationSource.Token);
            return Task.CompletedTask;
        }

        /// <summary>
        /// Stops the background processing
        /// </summary>
        public async Task StopAsync(CancellationToken cancellationToken)
        {
            _cancellationSource.Cancel();

            try
            {
                await _processingTask;
            }
            catch (OperationCanceledException)
            {
                // Expected when canceling
            }
        }

        /// <summary>
        /// Gets current statistics
        /// </summary>
        public ProcessingStatistics GetStatistics()
        {
            lock (_statsLock)
            {
                return new ProcessingStatistics
                {
                    QueueLength = QueueLength,
                    ActiveCount = ActiveCount,
                    TotalProcessed = TotalProcessed,
                    TotalSuccessful = TotalSuccessful,
                    TotalFailed = TotalFailed,
                    UpTime = UpTime,
                    ProcessingRate = TotalProcessed > 0 ? TotalProcessed / UpTime.TotalMinutes : 0,
                    TopErrors = _errorCounts
                        .OrderByDescending(x => x.Value)
                        .Take(5)
                        .ToDictionary(x => x.Key, x => x.Value)
                };
            }
        }

        private async Task ProcessItemAsync(ProcessingItem item, CancellationToken cancellationToken)
        {
            try
            {
                // Mark as active
                _activeItems.TryAdd(item.FilePath, item);
                item.StartTime = DateTime.UtcNow;
                item.AttemptCount++;

                _logger.LogInformation("Starting processing of {FilePath} (attempt {Attempt})",
                    item.FilePath, item.AttemptCount);

                // Process the file with THIS pipeline's FileProcessor!
                var result = await _fileProcessor.ProcessFileAsync(item.FilePath);

                // Update statistics
                lock (_statsLock)
                {
                    _totalProcessed++;
                    if (result.Success)
                    {
                        _totalSuccessful++;
                    }
                    else
                    {
                        _totalFailed++;
                        TrackError(result.ErrorMessage ?? "Unknown error");
                    }
                }

                if (result.Success)
                {
                    // FIX: Mark as successfully processed
                    lock (_trackingLock)
                    {
                        _processedFiles.Add(item.FilePath);
                        _enqueuedFiles.Remove(item.FilePath);

                        // Cleanup old entries if too many (prevent memory leak)
                        if (_processedFiles.Count > 10000)
                        {
                            _logger.LogInformation("Cleaning up processed files tracking (>10000 entries)");
                            _processedFiles.Clear();
                        }
                    }
                }
                else if (ShouldRetry(item))
                {
                    // Schedule retry
                    await ScheduleRetryAsync(item, cancellationToken);
                }
                else
                {
                    // Final failure - remove from tracking
                    lock (_trackingLock)
                    {
                        _enqueuedFiles.Remove(item.FilePath);
                    }

                    _logger.LogError("Failed to process {FilePath} after {Attempts} attempts: {Error}",
                        item.FilePath, item.AttemptCount, result.ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Unexpected error processing {FilePath}", item.FilePath);

                lock (_statsLock)
                {
                    _totalProcessed++;
                    _totalFailed++;
                    TrackError(ex.Message);
                }

                if (ShouldRetry(item))
                {
                    await ScheduleRetryAsync(item, cancellationToken);
                }
                else
                {
                    // Final failure - remove from tracking
                    lock (_trackingLock)
                    {
                        _enqueuedFiles.Remove(item.FilePath);
                    }

                    _logger.LogError("Failed to process {FilePath} after {Attempts} attempts",
                        item.FilePath, item.AttemptCount);
                }
            }
            finally
            {
                // Remove from active items
                _activeItems.TryRemove(item.FilePath, out _);

                // Release processing slot
                _processingSlots.Release();
            }
        }

        private bool ShouldRetry(ProcessingItem item)
        {
            return _options.RetryOnFailure &&
                   item.AttemptCount < _options.MaxRetryAttempts;
        }

        private async Task ScheduleRetryAsync(ProcessingItem item, CancellationToken cancellationToken)
        {
            var delay = TimeSpan.FromSeconds(_options.RetryDelaySeconds * item.AttemptCount);

            _logger.LogInformation("Scheduling retry for {FilePath} in {Delay} seconds",
                item.FilePath, delay.TotalSeconds);

            // Wait before re-enqueueing
            await Task.Delay(delay, cancellationToken);

            if (!cancellationToken.IsCancellationRequested)
            {
                item.StartTime = null; // Reset start time
                _queue.Enqueue(item);
            }
        }

        private void TrackError(string error)
        {
            var category = CategorizeError(error);
            _errorCounts.TryGetValue(category, out var count);
            _errorCounts[category] = count + 1;
        }

        private string CategorizeError(string error)
        {
            if (error.Contains("EXIF", StringComparison.OrdinalIgnoreCase))
                return "EXIF extraction failed";
            if (error.Contains("DICOM", StringComparison.OrdinalIgnoreCase))
                return "DICOM conversion failed";
            if (error.Contains("Patient", StringComparison.OrdinalIgnoreCase))
                return "Patient data missing";
            if (error.Contains("File", StringComparison.OrdinalIgnoreCase))
                return "File access error";
            if (error.Contains("Memory", StringComparison.OrdinalIgnoreCase))
                return "Memory error";
            return "Other error";
        }

        /// <summary>
        /// Processing item with retry tracking
        /// </summary>
        private class ProcessingItem
        {
            public string FilePath { get; }
            public int AttemptCount { get; set; }
            public DateTime? StartTime { get; set; }
            public DateTime EnqueuedTime { get; }

            public ProcessingItem(string filePath)
            {
                FilePath = filePath;
                EnqueuedTime = DateTime.UtcNow;
            }
        }
    }

    // Statistics classes remain the same...
    public class ProcessingStatistics
    {
        public int QueueLength { get; set; }
        public int ActiveCount { get; set; }
        public int TotalProcessed { get; set; }
        public int TotalSuccessful { get; set; }
        public int TotalFailed { get; set; }
        public TimeSpan UpTime { get; set; }
        public double ProcessingRate { get; set; }
        public Dictionary<string, int> TopErrors { get; set; } = new();
    }

    public class ProcessingItemStatus
    {
        public string FilePath { get; set; } = string.Empty;
        public DateTime? StartTime { get; set; }
        public int AttemptCount { get; set; }
        public TimeSpan Duration { get; set; }
    }
}

